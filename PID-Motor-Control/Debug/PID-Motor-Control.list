
PID-Motor-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08008aa8  08008aa8  00009aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e38  08008e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e44  08008e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008e48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  200001e8  08009030  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08009030  0000a9f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013683  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  0001d89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00020038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4e  00000000  00000000  00021150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a0a  00000000  00000000  00021e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149c3  00000000  00000000  000498a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4f78  00000000  00000000  0005e26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001531e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a30  00000000  00000000  00153228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00158c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a90 	.word	0x08008a90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008a90 	.word	0x08008a90

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <SetMotorDirection>:
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void SetMotorDirection(int direction)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    if (direction < 0)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da0a      	bge.n	8000efc <SetMotorDirection+0x24>
    {
        HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_DIR1_PIN, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2102      	movs	r1, #2
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <SetMotorDirection+0x40>)
 8000eec:	f001 fa94 	bl	8002418 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_DIR2_PIN, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <SetMotorDirection+0x40>)
 8000ef6:	f001 fa8f 	bl	8002418 <HAL_GPIO_WritePin>
    else
    {
        HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_DIR1_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_DIR2_PIN, GPIO_PIN_SET);
    }
}
 8000efa:	e009      	b.n	8000f10 <SetMotorDirection+0x38>
        HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_DIR1_PIN, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2102      	movs	r1, #2
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <SetMotorDirection+0x40>)
 8000f02:	f001 fa89 	bl	8002418 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_DIR2_PIN, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <SetMotorDirection+0x40>)
 8000f0c:	f001 fa84 	bl	8002418 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020400 	.word	0x40020400

08000f1c <SpeedCalculating>:

void SpeedCalculating(int direction)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	encoder_position = __HAL_TIM_GET_COUNTER(&htim1);
 8000f24:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <SpeedCalculating+0x88>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <SpeedCalculating+0x8c>)
 8000f2e:	601a      	str	r2, [r3, #0]
	delta_position = last_encoder_position - encoder_position;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SpeedCalculating+0x90>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <SpeedCalculating+0x8c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f3c:	6013      	str	r3, [r2, #0]

	if(direction > 0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dd0a      	ble.n	8000f5a <SpeedCalculating+0x3e>
	{
		if (delta_position > 0)
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dd10      	ble.n	8000f6e <SpeedCalculating+0x52>
		{
			delta_position -= 1920;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e009      	b.n	8000f6e <SpeedCalculating+0x52>
		}
	}
	else
	{
		if (delta_position < 0)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da05      	bge.n	8000f6e <SpeedCalculating+0x52>
		{
			delta_position += 1920;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f503 63f0 	add.w	r3, r3, #1920	@ 0x780
 8000f6a:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f6c:	6013      	str	r3, [r2, #0]
		}
	}

	last_encoder_position = encoder_position;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <SpeedCalculating+0x8c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <SpeedCalculating+0x90>)
 8000f74:	6013      	str	r3, [r2, #0]
	speed = (delta_position / 1920.0f) * 600.0f;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <SpeedCalculating+0x94>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f82:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000fb4 <SpeedCalculating+0x98>
 8000f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000fb8 <SpeedCalculating+0x9c>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <SpeedCalculating+0xa0>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	20000850 	.word	0x20000850
 8000fac:	20000888 	.word	0x20000888
 8000fb0:	2000088c 	.word	0x2000088c
 8000fb4:	44f00000 	.word	0x44f00000
 8000fb8:	44160000 	.word	0x44160000
 8000fbc:	20000890 	.word	0x20000890

08000fc0 <PIDCalculating>:

float PIDCalculating(float setpoint, float measured)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fca:	edc7 0a00 	vstr	s1, [r7]
    error = setpoint - fabs(measured);
 8000fce:	edd7 7a00 	vldr	s15, [r7]
 8000fd2:	eef0 7ae7 	vabs.f32	s15, s15
 8000fd6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <PIDCalculating+0xdc>)
 8000fe0:	edc3 7a00 	vstr	s15, [r3]

    float proportional = kp * error;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <PIDCalculating+0xe0>)
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <PIDCalculating+0xdc>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff4:	edc7 7a02 	vstr	s15, [r7, #8]
    integral += ki * error;
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <PIDCalculating+0xe4>)
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	4b27      	ldr	r3, [pc, #156]	@ (800109c <PIDCalculating+0xdc>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <PIDCalculating+0xe8>)
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <PIDCalculating+0xe8>)
 8001014:	edc3 7a00 	vstr	s15, [r3]
    derivative = kd * (error - previous_error);
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <PIDCalculating+0xdc>)
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <PIDCalculating+0xec>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <PIDCalculating+0xf0>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <PIDCalculating+0xf4>)
 8001034:	edc3 7a00 	vstr	s15, [r3]

    float output = proportional + integral + derivative;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <PIDCalculating+0xe8>)
 800103a:	ed93 7a00 	vldr	s14, [r3]
 800103e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001046:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <PIDCalculating+0xf4>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	edc7 7a03 	vstr	s15, [r7, #12]

    if (output > 100.0f)
 8001054:	edd7 7a03 	vldr	s15, [r7, #12]
 8001058:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80010b8 <PIDCalculating+0xf8>
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	dd01      	ble.n	800106a <PIDCalculating+0xaa>
    {
    	output = 100.0f;
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <PIDCalculating+0xfc>)
 8001068:	60fb      	str	r3, [r7, #12]
    }
    if (output < 0.0f)
 800106a:	edd7 7a03 	vldr	s15, [r7, #12]
 800106e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	d502      	bpl.n	800107e <PIDCalculating+0xbe>
    {
    	output = 0.0f;
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
    }

    previous_error = error;
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <PIDCalculating+0xdc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <PIDCalculating+0xec>)
 8001084:	6013      	str	r3, [r2, #0]

    return output;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	ee07 3a90 	vmov	s15, r3
}
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000894 	.word	0x20000894
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000008 	.word	0x20000008
 80010a8:	2000089c 	.word	0x2000089c
 80010ac:	20000898 	.word	0x20000898
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	200008a0 	.word	0x200008a0
 80010b8:	42c80000 	.word	0x42c80000
 80010bc:	42c80000 	.word	0x42c80000

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fe51 	bl	8001d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f894 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 fa5e 	bl	800158c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010d0:	f000 f9fe 	bl	80014d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d4:	f000 fa2c 	bl	8001530 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80010d8:	f000 f9a0 	bl	800141c <MX_TIM3_Init>
  MX_TIM1_Init();
 80010dc:	f000 f8f2 	bl	80012c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010e0:	f000 f94a 	bl	8001378 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80010e4:	2108      	movs	r1, #8
 80010e6:	483a      	ldr	r0, [pc, #232]	@ (80011d0 <main+0x110>)
 80010e8:	f002 fcdc 	bl	8003aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010ec:	213c      	movs	r1, #60	@ 0x3c
 80010ee:	4839      	ldr	r0, [pc, #228]	@ (80011d4 <main+0x114>)
 80010f0:	f002 fe78 	bl	8003de4 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_RESET)
 80010f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f8:	4837      	ldr	r0, [pc, #220]	@ (80011d8 <main+0x118>)
 80010fa:	f001 f975 	bl	80023e8 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d11f      	bne.n	8001144 <main+0x84>
	  {
	      if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_RESET)
 8001104:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001108:	4833      	ldr	r0, [pc, #204]	@ (80011d8 <main+0x118>)
 800110a:	f001 f96d 	bl	80023e8 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d138      	bne.n	8001186 <main+0xc6>
	      {
	          SetMotorDirection(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fedf 	bl	8000ed8 <SetMotorDirection>
	          SpeedCalculating(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f7ff fefe 	bl	8000f1c <SpeedCalculating>
	          new_PWM = PIDCalculating(set_speed, speed);
 8001120:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <main+0x11c>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <main+0x120>)
 8001128:	ed93 7a00 	vldr	s14, [r3]
 800112c:	eef0 0a47 	vmov.f32	s1, s14
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	f7ff ff44 	bl	8000fc0 <PIDCalculating>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <main+0x124>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
 8001142:	e020      	b.n	8001186 <main+0xc6>
	      }
	  }
	  else
	  {
	      if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) != GPIO_PIN_RESET)
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <main+0x118>)
 800114a:	f001 f94d 	bl	80023e8 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d018      	beq.n	8001186 <main+0xc6>
	      {
	          SetMotorDirection(-1);
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff febe 	bl	8000ed8 <SetMotorDirection>
	          SpeedCalculating(-1);
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff fedc 	bl	8000f1c <SpeedCalculating>
	          new_PWM = PIDCalculating(set_speed, speed);
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <main+0x11c>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <main+0x120>)
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	f7ff ff22 	bl	8000fc0 <PIDCalculating>
 800117c:	eef0 7a40 	vmov.f32	s15, s0
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <main+0x124>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	      }
	  }

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, new_PWM);
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <main+0x124>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <main+0x110>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 2a90 	vmov	r2, s15
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c
	  sprintf(message, "%.2f\n", speed);
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <main+0x120>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9f2 	bl	8000588 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	490f      	ldr	r1, [pc, #60]	@ (80011e8 <main+0x128>)
 80011aa:	4810      	ldr	r0, [pc, #64]	@ (80011ec <main+0x12c>)
 80011ac:	f005 fb44 	bl	8006838 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80011b0:	480e      	ldr	r0, [pc, #56]	@ (80011ec <main+0x12c>)
 80011b2:	f7ff f87d 	bl	80002b0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	490b      	ldr	r1, [pc, #44]	@ (80011ec <main+0x12c>)
 80011c0:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <main+0x130>)
 80011c2:	f003 fe79 	bl	8004eb8 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80011c6:	2064      	movs	r0, #100	@ 0x64
 80011c8:	f000 fe2c 	bl	8001e24 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_RESET)
 80011cc:	e792      	b.n	80010f4 <main+0x34>
 80011ce:	bf00      	nop
 80011d0:	2000029c 	.word	0x2000029c
 80011d4:	20000204 	.word	0x20000204
 80011d8:	40020800 	.word	0x40020800
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000890 	.word	0x20000890
 80011e4:	20000010 	.word	0x20000010
 80011e8:	08008aa8 	.word	0x08008aa8
 80011ec:	20000854 	.word	0x20000854
 80011f0:	200002e8 	.word	0x200002e8

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	@ 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fb7b 	bl	80068fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001218:	f001 fa52 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <SystemClock_Config+0xc8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	4a26      	ldr	r2, [pc, #152]	@ (80012bc <SystemClock_Config+0xc8>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	@ 0x40
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <SystemClock_Config+0xc8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <SystemClock_Config+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800123c:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <SystemClock_Config+0xcc>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <SystemClock_Config+0xcc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001254:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001268:	2348      	movs	r3, #72	@ 0x48
 800126a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001270:	2303      	movs	r3, #3
 8001272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fa31 	bl	80026e0 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 fa72 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fcbf 	bl	8002c28 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b0:	f000 fa5c 	bl	800176c <Error_Handler>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3750      	adds	r7, #80	@ 0x50
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	@ 0x30
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2224      	movs	r2, #36	@ 0x24
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f005 fb13 	bl	80068fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <MX_TIM1_Init+0xac>)
 80012e4:	4a23      	ldr	r2, [pc, #140]	@ (8001374 <MX_TIM1_Init+0xb0>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <MX_TIM1_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <MX_TIM1_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <MX_TIM1_Init+0xac>)
 80012f6:	f240 727f 	movw	r2, #1919	@ 0x77f
 80012fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_TIM1_Init+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_TIM1_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_TIM1_Init+0xac>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800130e:	2303      	movs	r3, #3
 8001310:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001316:	2301      	movs	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001326:	2301      	movs	r3, #1
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <MX_TIM1_Init+0xac>)
 800133a:	f002 fcad 	bl	8003c98 <HAL_TIM_Encoder_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001344:	f000 fa12 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_TIM1_Init+0xac>)
 800135a:	f003 fcb3 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001364:	f000 fa02 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	@ 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000204 	.word	0x20000204
 8001374:	40010000 	.word	0x40010000

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <MX_TIM2_Init+0xa0>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013a0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80013a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c0:	4815      	ldr	r0, [pc, #84]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013c2:	f002 fa47 	bl	8003854 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80013cc:	f000 f9ce 	bl	800176c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	480e      	ldr	r0, [pc, #56]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013de:	f002 ffab 	bl	8004338 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80013e8:	f000 f9c0 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_TIM2_Init+0xa0>)
 80013fa:	f003 fc63 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001404:	f000 f9b2 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <MX_TIM2_Init+0xa0>)
 800140a:	f002 fa7b 	bl	8003904 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000250 	.word	0x20000250

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001442:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <MX_TIM3_Init+0xb0>)
 8001444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001448:	2247      	movs	r2, #71	@ 0x47
 800144a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <MX_TIM3_Init+0xac>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001454:	2263      	movs	r2, #99	@ 0x63
 8001456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <MX_TIM3_Init+0xac>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001464:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001466:	f002 fac5 	bl	80039f4 <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001470:	f000 f97c 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4811      	ldr	r0, [pc, #68]	@ (80014c8 <MX_TIM3_Init+0xac>)
 8001484:	f003 fc1e 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800148e:	f000 f96d 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001492:	2360      	movs	r3, #96	@ 0x60
 8001494:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	2208      	movs	r2, #8
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <MX_TIM3_Init+0xac>)
 80014aa:	f002 fe31 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014b4:	f000 f95a 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <MX_TIM3_Init+0xac>)
 80014ba:	f000 fa09 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000029c 	.word	0x2000029c
 80014cc:	40000400 	.word	0x40000400

080014d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014d6:	4a15      	ldr	r2, [pc, #84]	@ (800152c <MX_USART3_UART_Init+0x5c>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_USART3_UART_Init+0x58>)
 8001514:	f003 fc82 	bl	8004e1c <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800151e:	f000 f925 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002e8 	.word	0x200002e8
 800152c:	40004800 	.word	0x40004800

08001530 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800153a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153e:	2206      	movs	r2, #6
 8001540:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001544:	2202      	movs	r2, #2
 8001546:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001550:	2202      	movs	r2, #2
 8001552:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001556:	2201      	movs	r2, #1
 8001558:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001568:	2201      	movs	r2, #1
 800156a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001574:	f000 ff69 	bl	800244a <HAL_PCD_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f8f5 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000370 	.word	0x20000370

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	4b67      	ldr	r3, [pc, #412]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a66      	ldr	r2, [pc, #408]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b64      	ldr	r3, [pc, #400]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b61      	ldr	r3, [pc, #388]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a60      	ldr	r2, [pc, #384]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b5e      	ldr	r3, [pc, #376]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	4b55      	ldr	r3, [pc, #340]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a54      	ldr	r2, [pc, #336]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001632:	4b49      	ldr	r3, [pc, #292]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a48      	ldr	r2, [pc, #288]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <MX_GPIO_Init+0x1cc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 800164a:	2200      	movs	r2, #0
 800164c:	f244 0187 	movw	r1, #16519	@ 0x4087
 8001650:	4842      	ldr	r0, [pc, #264]	@ (800175c <MX_GPIO_Init+0x1d0>)
 8001652:	f000 fee1 	bl	8002418 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2140      	movs	r1, #64	@ 0x40
 800165a:	4841      	ldr	r0, [pc, #260]	@ (8001760 <MX_GPIO_Init+0x1d4>)
 800165c:	f000 fedc 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800166a:	2302      	movs	r3, #2
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	483b      	ldr	r0, [pc, #236]	@ (8001764 <MX_GPIO_Init+0x1d8>)
 8001676:	f000 fd0b 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800167a:	2332      	movs	r3, #50	@ 0x32
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168a:	230b      	movs	r3, #11
 800168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4833      	ldr	r0, [pc, #204]	@ (8001764 <MX_GPIO_Init+0x1d8>)
 8001696:	f000 fcfb 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800169a:	2386      	movs	r3, #134	@ 0x86
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016aa:	230b      	movs	r3, #11
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	482c      	ldr	r0, [pc, #176]	@ (8001768 <MX_GPIO_Init+0x1dc>)
 80016b6:	f000 fceb 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 80016ba:	f244 0387 	movw	r3, #16519	@ 0x4087
 80016be:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4822      	ldr	r0, [pc, #136]	@ (800175c <MX_GPIO_Init+0x1d0>)
 80016d4:	f000 fcdc 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ea:	230b      	movs	r3, #11
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	4819      	ldr	r0, [pc, #100]	@ (800175c <MX_GPIO_Init+0x1d0>)
 80016f6:	f000 fccb 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <MX_GPIO_Init+0x1d4>)
 8001712:	f000 fcbd 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_GPIO_Init+0x1d4>)
 800172a:	f000 fcb1 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800172e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001740:	230b      	movs	r3, #11
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_GPIO_Init+0x1d4>)
 800174c:	f000 fca0 	bl	8002090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3730      	adds	r7, #48	@ 0x30
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400
 8001760:	40021800 	.word	0x40021800
 8001764:	40020800 	.word	0x40020800
 8001768:	40020000 	.word	0x40020000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <Error_Handler+0x8>

08001778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_MspInit+0x44>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_MspInit+0x44>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_MspInit+0x44>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x44>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x44>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_TIM_Encoder_MspInit+0x7c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d128      	bne.n	8001834 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <HAL_TIM_Encoder_MspInit+0x80>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <HAL_TIM_Encoder_MspInit+0x80>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_TIM_Encoder_MspInit+0x80>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_TIM_Encoder_MspInit+0x80>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <HAL_TIM_Encoder_MspInit+0x80>)
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_TIM_Encoder_MspInit+0x80>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001812:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001824:	2301      	movs	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <HAL_TIM_Encoder_MspInit+0x84>)
 8001830:	f000 fc2e 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	@ 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40010000 	.word	0x40010000
 8001840:	40023800 	.word	0x40023800
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001858:	d113      	bne.n	8001882 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_TIM_Base_MspInit+0x44>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <HAL_TIM_Base_MspInit+0x44>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_TIM_Base_MspInit+0x44>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	201c      	movs	r0, #28
 8001878:	f000 fbd3 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800187c:	201c      	movs	r0, #28
 800187e:	f000 fbec 	bl	800205a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_TIM_PWM_MspInit+0x38>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10b      	bne.n	80018ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <HAL_TIM_MspPostInit+0x64>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d11c      	bne.n	800192c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_TIM_MspPostInit+0x68>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <HAL_TIM_MspPostInit+0x68>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_TIM_MspPostInit+0x68>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800190a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800190e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <HAL_TIM_MspPostInit+0x6c>)
 8001928:	f000 fbb2 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40000400 	.word	0x40000400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020800 	.word	0x40020800

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0aa      	sub	sp, #168	@ 0xa8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2284      	movs	r2, #132	@ 0x84
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f004 ffcc 	bl	80068fe <memset>
  if(huart->Instance==USART3)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <HAL_UART_MspInit+0xb4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d13c      	bne.n	80019ea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001974:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001976:	2300      	movs	r3, #0
 8001978:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fb78 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800198a:	f7ff feef 	bl	800176c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800198e:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019d8:	2307      	movs	r3, #7
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019de:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <HAL_UART_MspInit+0xbc>)
 80019e6:	f000 fb53 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80019ea:	bf00      	nop
 80019ec:	37a8      	adds	r7, #168	@ 0xa8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40004800 	.word	0x40004800
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020c00 	.word	0x40020c00

08001a00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0ac      	sub	sp, #176	@ 0xb0
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	2284      	movs	r2, #132	@ 0x84
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 ff6c 	bl	80068fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a2e:	d159      	bne.n	8001ae4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fb17 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a4c:	f7ff fe8e 	bl	800176c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a25      	ldr	r2, [pc, #148]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5c:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a68:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a82:	230a      	movs	r3, #10
 8001a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4818      	ldr	r0, [pc, #96]	@ (8001af0 <HAL_PCD_MspInit+0xf0>)
 8001a90:	f000 fafe 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4810      	ldr	r0, [pc, #64]	@ (8001af0 <HAL_PCD_MspInit+0xf0>)
 8001ab0:	f000 faee 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001abe:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	4a06      	ldr	r2, [pc, #24]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001ad2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <HAL_PCD_MspInit+0xec>)
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	37b0      	adds	r7, #176	@ 0xb0
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 f94b 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <TIM2_IRQHandler+0x10>)
 8001b5a:	f002 f9d1 	bl	8003f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000250 	.word	0x20000250

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b82:	f004 ff0f 	bl	80069a4 <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001baa:	bf00      	nop
 8001bac:	e7fd      	b.n	8001baa <_exit+0x12>

08001bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e00a      	b.n	8001bd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc0:	f3af 8000 	nop.w
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf0      	blt.n	8001bc0 <_read+0x12>
  }

  return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e009      	b.n	8001c0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf1      	blt.n	8001bfa <_write+0x12>
  }
  return len;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_close>:

int _close(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c48:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_isatty>:

int _isatty(int file)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f004 fe74 	bl	80069a4 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20050000 	.word	0x20050000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	200008a4 	.word	0x200008a4
 8001cf0:	200009f8 	.word	0x200009f8

08001cf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d1c:	f7ff ffea 	bl	8001cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f004 fe33 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff f9b9 	bl	80010c0 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d5c:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 8001d60:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d64:	200009f8 	.word	0x200009f8

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>

08001d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f94c 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 f805 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7a:	f7ff fcfd 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f967 	bl	8002076 <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f92f 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	2000001c 	.word	0x2000001c
 8001de0:	20000018 	.word	0x20000018

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000001c 	.word	0x2000001c
 8001e08:	200008a8 	.word	0x200008a8

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200008a8 	.word	0x200008a8

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000001c 	.word	0x2000001c

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <__NVIC_SetPriorityGrouping+0x40>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <__NVIC_SetPriorityGrouping+0x40>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	05fa0000 	.word	0x05fa0000

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	@ (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	@ (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	@ 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e175      	b.n	800239c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8164 	bne.w	8002396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d005      	beq.n	80020e6 <HAL_GPIO_Init+0x56>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d017      	beq.n	8002184 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80be 	beq.w	8002396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a65      	ldr	r2, [pc, #404]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b63      	ldr	r3, [pc, #396]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002232:	4a61      	ldr	r2, [pc, #388]	@ (80023b8 <HAL_GPIO_Init+0x328>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <HAL_GPIO_Init+0x32c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d037      	beq.n	80022ce <HAL_GPIO_Init+0x23e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a57      	ldr	r2, [pc, #348]	@ (80023c0 <HAL_GPIO_Init+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_GPIO_Init+0x23a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a56      	ldr	r2, [pc, #344]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x236>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a55      	ldr	r2, [pc, #340]	@ (80023c8 <HAL_GPIO_Init+0x338>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x232>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	@ (80023cc <HAL_GPIO_Init+0x33c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a53      	ldr	r2, [pc, #332]	@ (80023d0 <HAL_GPIO_Init+0x340>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x22a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	@ (80023d4 <HAL_GPIO_Init+0x344>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	@ (80023d8 <HAL_GPIO_Init+0x348>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	@ (80023dc <HAL_GPIO_Init+0x34c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	@ (80023e0 <HAL_GPIO_Init+0x350>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x21a>
 80022a6:	2309      	movs	r3, #9
 80022a8:	e012      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022aa:	230a      	movs	r3, #10
 80022ac:	e010      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ae:	2308      	movs	r3, #8
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	@ (80023b8 <HAL_GPIO_Init+0x328>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002312:	4a34      	ldr	r2, [pc, #208]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002318:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800233c:	4a29      	ldr	r2, [pc, #164]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002342:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002366:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236c:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002390:	4a14      	ldr	r2, [pc, #80]	@ (80023e4 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae86 	bls.w	80020b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40022400 	.word	0x40022400
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e001      	b.n	800240a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af02      	add	r7, sp, #8
 8002450:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e108      	b.n	800266e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fac2 	bl	8001a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248a:	d102      	bne.n	8002492 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fa20 	bl	80058dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7c1a      	ldrb	r2, [r3, #16]
 80024a4:	f88d 2000 	strb.w	r2, [sp]
 80024a8:	3304      	adds	r3, #4
 80024aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ac:	f003 f9bc 	bl	8005828 <USB_CoreInit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0d5      	b.n	800266e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fa18 	bl	80058fe <USB_SetCurrentMode>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0c6      	b.n	800266e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e04a      	b.n	800257c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3315      	adds	r3, #21
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3314      	adds	r3, #20
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	b298      	uxth	r0, r3
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	332e      	adds	r3, #46	@ 0x2e
 8002522:	4602      	mov	r2, r0
 8002524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3318      	adds	r3, #24
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	331c      	adds	r3, #28
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3320      	adds	r3, #32
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3324      	adds	r3, #36	@ 0x24
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3301      	adds	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3af      	bcc.n	80024e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e044      	b.n	8002616 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	3301      	adds	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	429a      	cmp	r2, r3
 800261e:	d3b5      	bcc.n	800258c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7c1a      	ldrb	r2, [r3, #16]
 8002628:	f88d 2000 	strb.w	r2, [sp]
 800262c:	3304      	adds	r3, #4
 800262e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002630:	f003 f9b2 	bl	8005998 <USB_DevInit>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e013      	b.n	800266e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7b1b      	ldrb	r3, [r3, #12]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d102      	bne.n	8002662 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f80b 	bl	8002678 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fb6d 	bl	8005d46 <USB_DevDisconnect>

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_PCDEx_ActivateLPM+0x44>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	10000003 	.word	0x10000003

080026c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e291      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8087 	beq.w	8002812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002704:	4b96      	ldr	r3, [pc, #600]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00c      	beq.n	800272a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002710:	4b93      	ldr	r3, [pc, #588]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d112      	bne.n	8002742 <HAL_RCC_OscConfig+0x62>
 800271c:	4b90      	ldr	r3, [pc, #576]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002728:	d10b      	bne.n	8002742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	4b8d      	ldr	r3, [pc, #564]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d06c      	beq.n	8002810 <HAL_RCC_OscConfig+0x130>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d168      	bne.n	8002810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e26b      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x7a>
 800274c:	4b84      	ldr	r3, [pc, #528]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a83      	ldr	r2, [pc, #524]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e02e      	b.n	80027b8 <HAL_RCC_OscConfig+0xd8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x9c>
 8002762:	4b7f      	ldr	r3, [pc, #508]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7e      	ldr	r2, [pc, #504]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b7c      	ldr	r3, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7b      	ldr	r2, [pc, #492]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xd8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0xc0>
 8002786:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a75      	ldr	r2, [pc, #468]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xd8>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff fb24 	bl	8001e0c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff fb20 	bl	8001e0c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e21f      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe8>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff fb10 	bl	8001e0c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fb0c 	bl	8001e0c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e20b      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b57      	ldr	r3, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x110>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d069      	beq.n	80028f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281e:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282a:	4b4d      	ldr	r3, [pc, #308]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11c      	bne.n	8002870 <HAL_RCC_OscConfig+0x190>
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x17a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1df      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	493d      	ldr	r1, [pc, #244]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	e040      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002878:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a38      	ldr	r2, [pc, #224]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff fac2 	bl	8001e0c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff fabe 	bl	8001e0c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1bd      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4929      	ldr	r1, [pc, #164]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
 80028be:	e018      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a26      	ldr	r2, [pc, #152]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa9e 	bl	8001e0c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7ff fa9a 	bl	8001e0c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e199      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d038      	beq.n	8002970 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d019      	beq.n	800293a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800290a:	4a15      	ldr	r2, [pc, #84]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7ff fa7b 	bl	8001e0c <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7ff fa77 	bl	8001e0c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e176      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x23a>
 8002938:	e01a      	b.n	8002970 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293e:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_RCC_OscConfig+0x280>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7ff fa61 	bl	8001e0c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7ff fa5d 	bl	8001e0c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d903      	bls.n	8002964 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e15c      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
 8002960:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b91      	ldr	r3, [pc, #580]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a4 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a87      	ldr	r2, [pc, #540]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b85      	ldr	r3, [pc, #532]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029b2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb0 <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7ff fa25 	bl	8001e0c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7ff fa21 	bl	8001e0c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	@ 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e120      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d8:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x4d0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x31a>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f8:	e02d      	b.n	8002a56 <HAL_RCC_OscConfig+0x376>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x33c>
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	4a69      	ldr	r2, [pc, #420]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	4a66      	ldr	r2, [pc, #408]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1a:	e01c      	b.n	8002a56 <HAL_RCC_OscConfig+0x376>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x35e>
 8002a24:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	4a60      	ldr	r2, [pc, #384]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a30:	4b5e      	ldr	r3, [pc, #376]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a5d      	ldr	r2, [pc, #372]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCC_OscConfig+0x376>
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	4a5a      	ldr	r2, [pc, #360]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4a:	4b58      	ldr	r3, [pc, #352]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	4a57      	ldr	r2, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7ff f9d5 	bl	8001e0c <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7ff f9d1 	bl	8001e0c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0ce      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ee      	beq.n	8002a66 <HAL_RCC_OscConfig+0x386>
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7ff f9bf 	bl	8001e0c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7ff f9bb 	bl	8001e0c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0b8      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4b3c      	ldr	r3, [pc, #240]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a3b      	ldr	r2, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a4 	beq.w	8002c18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad0:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d06b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d149      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a30      	ldr	r2, [pc, #192]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff f98c 	bl	8001e0c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7ff f988 	bl	8001e0c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e087      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7ff f95c 	bl	8001e0c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7ff f958 	bl	8001e0c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e057      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x478>
 8002b76:	e04f      	b.n	8002c18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff f942 	bl	8001e0c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7ff f93e 	bl	8001e0c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e03d      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4ac>
 8002baa:	e035      	b.n	8002c18 <HAL_RCC_OscConfig+0x538>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x544>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d028      	beq.n	8002c14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d121      	bne.n	8002c14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d11a      	bne.n	8002c14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d111      	bne.n	8002c14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0d0      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d910      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b67      	ldr	r3, [pc, #412]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 020f 	bic.w	r2, r3, #15
 8002c56:	4965      	ldr	r1, [pc, #404]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b63      	ldr	r3, [pc, #396]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b8      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c88:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a58      	ldr	r2, [pc, #352]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca0:	4b53      	ldr	r3, [pc, #332]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002caa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b50      	ldr	r3, [pc, #320]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	494d      	ldr	r1, [pc, #308]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d040      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e073      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06b      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4936      	ldr	r1, [pc, #216]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7ff f876 	bl	8001e0c <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7ff f872 	bl	8001e0c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e053      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d210      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	4922      	ldr	r1, [pc, #136]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e032      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4916      	ldr	r1, [pc, #88]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	490e      	ldr	r1, [pc, #56]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dba:	f000 f821 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	490a      	ldr	r1, [pc, #40]	@ (8002df4 <HAL_RCC_ClockConfig+0x1cc>)
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd2:	4a09      	ldr	r2, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1d0>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_RCC_ClockConfig+0x1d4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe ffd2 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	08008ab0 	.word	0x08008ab0
 8002df8:	20000014 	.word	0x20000014
 8002dfc:	20000018 	.word	0x20000018

08002e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e04:	b094      	sub	sp, #80	@ 0x50
 8002e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e10:	2300      	movs	r3, #0
 8002e12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e18:	4b79      	ldr	r3, [pc, #484]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x40>
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	f200 80e1 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e32:	e0db      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b73      	ldr	r3, [pc, #460]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e38:	e0db      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e3a:	4b73      	ldr	r3, [pc, #460]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e3e:	e0d8      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e40:	4b6f      	ldr	r3, [pc, #444]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e72:	4622      	mov	r2, r4
 8002e74:	462b      	mov	r3, r5
 8002e76:	f04f 0000 	mov.w	r0, #0
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	0159      	lsls	r1, r3, #5
 8002e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e84:	0150      	lsls	r0, r2, #5
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	1a51      	subs	r1, r2, r1
 8002e8e:	6139      	str	r1, [r7, #16]
 8002e90:	4629      	mov	r1, r5
 8002e92:	eb63 0301 	sbc.w	r3, r3, r1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	018b      	lsls	r3, r1, #6
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eae:	4651      	mov	r1, sl
 8002eb0:	018a      	lsls	r2, r1, #6
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb8:	4659      	mov	r1, fp
 8002eba:	eb63 0901 	sbc.w	r9, r3, r1
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ed2:	4690      	mov	r8, r2
 8002ed4:	4699      	mov	r9, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	eb18 0303 	adds.w	r3, r8, r3
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	462b      	mov	r3, r5
 8002ee0:	eb49 0303 	adc.w	r3, r9, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	024b      	lsls	r3, r1, #9
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002efc:	4621      	mov	r1, r4
 8002efe:	024a      	lsls	r2, r1, #9
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f06:	2200      	movs	r2, #0
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f10:	f7fd fe6a 	bl	8000be8 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f1c:	e058      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	4611      	mov	r1, r2
 8002f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	0159      	lsls	r1, r3, #5
 8002f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4a:	0150      	lsls	r0, r2, #5
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4641      	mov	r1, r8
 8002f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f56:	4649      	mov	r1, r9
 8002f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f70:	ebb2 040a 	subs.w	r4, r2, sl
 8002f74:	eb63 050b 	sbc.w	r5, r3, fp
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	00eb      	lsls	r3, r5, #3
 8002f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f86:	00e2      	lsls	r2, r4, #3
 8002f88:	4614      	mov	r4, r2
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	18e3      	adds	r3, r4, r3
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	464b      	mov	r3, r9
 8002f94:	eb45 0303 	adc.w	r3, r5, r3
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	028b      	lsls	r3, r1, #10
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	028a      	lsls	r2, r1, #10
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	61fa      	str	r2, [r7, #28]
 8002fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc4:	f7fd fe10 	bl	8000be8 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3750      	adds	r7, #80	@ 0x50
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400
 8003008:	007a1200 	.word	0x007a1200

0800300c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_RCC_GetHCLKFreq+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000014 	.word	0x20000014

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003028:	f7ff fff0 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4903      	ldr	r1, [pc, #12]	@ (8003048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	08008ac0 	.word	0x08008ac0

0800304c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003050:	f7ff ffdc 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0b5b      	lsrs	r3, r3, #13
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	@ (8003070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	08008ac0 	.word	0x08008ac0

08003074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d012      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800309c:	4b69      	ldr	r3, [pc, #420]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a68      	ldr	r2, [pc, #416]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	4b66      	ldr	r3, [pc, #408]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b0:	4964      	ldr	r1, [pc, #400]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d017      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	4959      	ldr	r1, [pc, #356]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ec:	d101      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800310a:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003110:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	494a      	ldr	r1, [pc, #296]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003146:	2301      	movs	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 808b 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b3a      	ldr	r3, [pc, #232]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	4a39      	ldr	r2, [pc, #228]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	@ 0x40
 8003164:	4b37      	ldr	r3, [pc, #220]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003170:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a34      	ldr	r2, [pc, #208]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fe fe46 	bl	8001e0c <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fe fe42 	bl	8001e0c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e357      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003196:	4b2c      	ldr	r3, [pc, #176]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a2:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d035      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d02e      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a1a      	ldr	r2, [pc, #104]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031e2:	4a18      	ldr	r2, [pc, #96]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031e8:	4b16      	ldr	r3, [pc, #88]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d114      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe fe0a 	bl	8001e0c <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe fe06 	bl	8001e0c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e319      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800322a:	d111      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800323a:	400b      	ands	r3, r1
 800323c:	4901      	ldr	r1, [pc, #4]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
 8003242:	e00b      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003244:	40023800 	.word	0x40023800
 8003248:	40007000 	.word	0x40007000
 800324c:	0ffffcff 	.word	0x0ffffcff
 8003250:	4baa      	ldr	r3, [pc, #680]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4aa9      	ldr	r2, [pc, #676]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	4ba7      	ldr	r3, [pc, #668]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	49a4      	ldr	r1, [pc, #656]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	4313      	orrs	r3, r2
 800326c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800327a:	4ba0      	ldr	r3, [pc, #640]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003280:	4a9e      	ldr	r2, [pc, #632]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003286:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800328a:	4b9c      	ldr	r3, [pc, #624]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	4999      	ldr	r1, [pc, #612]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a8:	4b94      	ldr	r3, [pc, #592]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032b6:	4991      	ldr	r1, [pc, #580]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ca:	4b8c      	ldr	r3, [pc, #560]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d8:	4988      	ldr	r1, [pc, #544]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ec:	4b83      	ldr	r3, [pc, #524]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032fa:	4980      	ldr	r1, [pc, #512]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800330e:	4b7b      	ldr	r3, [pc, #492]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	4977      	ldr	r1, [pc, #476]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003330:	4b72      	ldr	r3, [pc, #456]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	496f      	ldr	r1, [pc, #444]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003352:	4b6a      	ldr	r3, [pc, #424]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f023 020c 	bic.w	r2, r3, #12
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003360:	4966      	ldr	r1, [pc, #408]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003374:	4b61      	ldr	r3, [pc, #388]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	495e      	ldr	r1, [pc, #376]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003396:	4b59      	ldr	r3, [pc, #356]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a4:	4955      	ldr	r1, [pc, #340]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033b8:	4b50      	ldr	r3, [pc, #320]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	494d      	ldr	r1, [pc, #308]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033da:	4b48      	ldr	r3, [pc, #288]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	4944      	ldr	r1, [pc, #272]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033fc:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003402:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	493c      	ldr	r1, [pc, #240]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800341e:	4b37      	ldr	r3, [pc, #220]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342c:	4933      	ldr	r1, [pc, #204]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003440:	4b2e      	ldr	r3, [pc, #184]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800344e:	492b      	ldr	r1, [pc, #172]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003462:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003470:	4922      	ldr	r1, [pc, #136]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003480:	d101      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003482:	2301      	movs	r3, #1
 8003484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a2:	4b16      	ldr	r3, [pc, #88]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b0:	4912      	ldr	r1, [pc, #72]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034c4:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d4:	4909      	ldr	r1, [pc, #36]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d006      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80d9 	beq.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034f0:	4b02      	ldr	r3, [pc, #8]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a01      	ldr	r2, [pc, #4]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034fa:	e001      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034fc:	40023800 	.word	0x40023800
 8003500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003502:	f7fe fc83 	bl	8001e0c <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003508:	e008      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800350a:	f7fe fc7f 	bl	8001e0c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	@ 0x64
 8003516:	d901      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e194      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800351c:	4b6c      	ldr	r3, [pc, #432]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d021      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11d      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800353c:	4b64      	ldr	r3, [pc, #400]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800354a:	4b61      	ldr	r3, [pc, #388]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003550:	0e1b      	lsrs	r3, r3, #24
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	019a      	lsls	r2, r3, #6
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	061b      	lsls	r3, r3, #24
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	071b      	lsls	r3, r3, #28
 8003570:	4957      	ldr	r1, [pc, #348]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02e      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a2:	d129      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035a4:	4b4a      	ldr	r3, [pc, #296]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035b2:	4b47      	ldr	r3, [pc, #284]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b8:	0f1b      	lsrs	r3, r3, #28
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	019a      	lsls	r2, r3, #6
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	071b      	lsls	r3, r3, #28
 80035d8:	493d      	ldr	r1, [pc, #244]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035e0:	4b3b      	ldr	r3, [pc, #236]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035e6:	f023 021f 	bic.w	r2, r3, #31
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	3b01      	subs	r3, #1
 80035f0:	4937      	ldr	r1, [pc, #220]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01d      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003604:	4b32      	ldr	r3, [pc, #200]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360a:	0e1b      	lsrs	r3, r3, #24
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003612:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003618:	0f1b      	lsrs	r3, r3, #28
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	019a      	lsls	r2, r3, #6
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	071b      	lsls	r3, r3, #28
 8003638:	4925      	ldr	r1, [pc, #148]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d011      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	019a      	lsls	r2, r3, #6
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	061b      	lsls	r3, r3, #24
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	071b      	lsls	r3, r3, #28
 8003668:	4919      	ldr	r1, [pc, #100]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a16      	ldr	r2, [pc, #88]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fe fbc6 	bl	8001e0c <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003684:	f7fe fbc2 	bl	8001e0c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	@ 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0d7      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	f040 80cd 	bne.w	8003844 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b6:	f7fe fba9 	bl	8001e0c <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036be:	f7fe fba5 	bl	8001e0c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	@ 0x64
 80036ca:	d903      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0ba      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80036d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e0:	d0ed      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d12a      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800370a:	4b51      	ldr	r3, [pc, #324]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003718:	4b4d      	ldr	r3, [pc, #308]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	0f1b      	lsrs	r3, r3, #28
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	019a      	lsls	r2, r3, #6
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	071b      	lsls	r3, r3, #28
 800373e:	4944      	ldr	r1, [pc, #272]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003746:	4b42      	ldr	r3, [pc, #264]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800374c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	493d      	ldr	r1, [pc, #244]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d022      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003774:	d11d      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003776:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	0e1b      	lsrs	r3, r3, #24
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003784:	4b32      	ldr	r3, [pc, #200]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	0f1b      	lsrs	r3, r3, #28
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	019a      	lsls	r2, r3, #6
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	431a      	orrs	r2, r3
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	071b      	lsls	r3, r3, #28
 80037aa:	4929      	ldr	r1, [pc, #164]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d028      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	0e1b      	lsrs	r3, r3, #24
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037cc:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	019a      	lsls	r2, r3, #6
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	071b      	lsls	r3, r3, #28
 80037f2:	4917      	ldr	r1, [pc, #92]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	4911      	ldr	r1, [pc, #68]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0e      	ldr	r2, [pc, #56]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fe faf6 	bl	8001e0c <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003824:	f7fe faf2 	bl	8001e0c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e007      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800383e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003842:	d1ef      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e049      	b.n	80038fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd ffe4 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fe4c 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e054      	b.n	80039c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a26      	ldr	r2, [pc, #152]	@ (80039d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003946:	d01d      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a22      	ldr	r2, [pc, #136]	@ (80039d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a21      	ldr	r2, [pc, #132]	@ (80039dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1f      	ldr	r2, [pc, #124]	@ (80039e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1e      	ldr	r2, [pc, #120]	@ (80039e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1c      	ldr	r2, [pc, #112]	@ (80039e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <HAL_TIM_Base_Start_IT+0xe8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d115      	bne.n	80039b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <HAL_TIM_Base_Start_IT+0xec>)
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d015      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0xbe>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d011      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	e008      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e000      	b.n	80039c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40001800 	.word	0x40001800
 80039f0:	00010007 	.word	0x00010007

080039f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e049      	b.n	8003a9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd ff38 	bl	8001890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fd7c 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_PWM_Start+0x24>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e03c      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d109      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x3e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e02f      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start+0x58>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e022      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d109      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x72>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e015      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x8c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e008      	b.n	8003b42 <HAL_TIM_PWM_Start+0x9e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e092      	b.n	8003c70 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xb6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b58:	e023      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0xc6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b68:	e01b      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xd6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b78:	e013      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b0c      	cmp	r3, #12
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0xe6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b88:	e00b      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0xf6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b98:	e003      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xfe>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f864 	bl	8004c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a30      	ldr	r2, [pc, #192]	@ (8003c78 <HAL_TIM_PWM_Start+0x1d4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_TIM_PWM_Start+0x120>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8003c7c <HAL_TIM_PWM_Start+0x1d8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_TIM_PWM_Start+0x124>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_TIM_PWM_Start+0x126>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a25      	ldr	r2, [pc, #148]	@ (8003c78 <HAL_TIM_PWM_Start+0x1d4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf0:	d01d      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a22      	ldr	r2, [pc, #136]	@ (8003c80 <HAL_TIM_PWM_Start+0x1dc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a20      	ldr	r2, [pc, #128]	@ (8003c84 <HAL_TIM_PWM_Start+0x1e0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c88 <HAL_TIM_PWM_Start+0x1e4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_TIM_PWM_Start+0x1d8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <HAL_TIM_PWM_Start+0x1e8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x18a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a19      	ldr	r2, [pc, #100]	@ (8003c90 <HAL_TIM_PWM_Start+0x1ec>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d115      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <HAL_TIM_PWM_Start+0x1f0>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	d015      	beq.n	8003c6c <HAL_TIM_PWM_Start+0x1c8>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c46:	d011      	beq.n	8003c6c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c58:	e008      	b.n	8003c6c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e000      	b.n	8003c6e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40001800 	.word	0x40001800
 8003c94:	00010007 	.word	0x00010007

08003c98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e08f      	b.n	8003dcc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd fd7d 	bl	80017c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <HAL_TIM_Encoder_Init+0x13c>)
 8003cda:	400b      	ands	r3, r1
 8003cdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f000 fc21 	bl	8004530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_TIM_Encoder_Init+0x140>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	4313      	orrs	r3, r2
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_TIM_Encoder_Init+0x144>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4b2a      	ldr	r3, [pc, #168]	@ (8003de0 <HAL_TIM_Encoder_Init+0x148>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	4313      	orrs	r3, r2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	011a      	lsls	r2, r3, #4
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	031b      	lsls	r3, r3, #12
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fffebff8 	.word	0xfffebff8
 8003dd8:	fffffcfc 	.word	0xfffffcfc
 8003ddc:	fffff3f3 	.word	0xfffff3f3
 8003de0:	ffff0f0f 	.word	0xffff0f0f

08003de4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003df4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d110      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d102      	bne.n	8003e20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e1a:	7b7b      	ldrb	r3, [r7, #13]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d001      	beq.n	8003e24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e069      	b.n	8003ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e34:	e031      	b.n	8003e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d110      	bne.n	8003e5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e3c:	7bbb      	ldrb	r3, [r7, #14]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e42:	7b3b      	ldrb	r3, [r7, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e055      	b.n	8003ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e5c:	e01d      	b.n	8003e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d108      	bne.n	8003e76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e64:	7bbb      	ldrb	r3, [r7, #14]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e6a:	7b7b      	ldrb	r3, [r7, #13]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d102      	bne.n	8003e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e70:	7b3b      	ldrb	r3, [r7, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e03e      	b.n	8003ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_TIM_Encoder_Start+0xc4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d008      	beq.n	8003eb8 <HAL_TIM_Encoder_Start+0xd4>
 8003ea6:	e00f      	b.n	8003ec8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fee1 	bl	8004c78 <TIM_CCxChannelCmd>
      break;
 8003eb6:	e016      	b.n	8003ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2104      	movs	r1, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fed9 	bl	8004c78 <TIM_CCxChannelCmd>
      break;
 8003ec6:	e00e      	b.n	8003ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fed1 	bl	8004c78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	2104      	movs	r1, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 feca 	bl	8004c78 <TIM_CCxChannelCmd>
      break;
 8003ee4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d020      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0202 	mvn.w	r2, #2
 8003f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fad2 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fac4 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fad5 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0204 	mvn.w	r2, #4
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 faac 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa9e 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 faaf 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0208 	mvn.w	r2, #8
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa86 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa78 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa89 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0210 	mvn.w	r2, #16
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2208      	movs	r2, #8
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa60 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa52 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa63 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0201 	mvn.w	r2, #1
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa30 	bl	80044cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00c      	beq.n	800409a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fead 	bl	8004df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fea5 	bl	8004e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa1d 	bl	800451c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0220 	mvn.w	r2, #32
 80040fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fe6d 	bl	8004de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800412a:	2302      	movs	r3, #2
 800412c:	e0ff      	b.n	800432e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b14      	cmp	r3, #20
 800413a:	f200 80f0 	bhi.w	800431e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800413e:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004199 	.word	0x08004199
 8004148:	0800431f 	.word	0x0800431f
 800414c:	0800431f 	.word	0x0800431f
 8004150:	0800431f 	.word	0x0800431f
 8004154:	080041d9 	.word	0x080041d9
 8004158:	0800431f 	.word	0x0800431f
 800415c:	0800431f 	.word	0x0800431f
 8004160:	0800431f 	.word	0x0800431f
 8004164:	0800421b 	.word	0x0800421b
 8004168:	0800431f 	.word	0x0800431f
 800416c:	0800431f 	.word	0x0800431f
 8004170:	0800431f 	.word	0x0800431f
 8004174:	0800425b 	.word	0x0800425b
 8004178:	0800431f 	.word	0x0800431f
 800417c:	0800431f 	.word	0x0800431f
 8004180:	0800431f 	.word	0x0800431f
 8004184:	0800429d 	.word	0x0800429d
 8004188:	0800431f 	.word	0x0800431f
 800418c:	0800431f 	.word	0x0800431f
 8004190:	0800431f 	.word	0x0800431f
 8004194:	080042dd 	.word	0x080042dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa72 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	619a      	str	r2, [r3, #24]
      break;
 80041d6:	e0a5      	b.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fac4 	bl	800476c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	619a      	str	r2, [r3, #24]
      break;
 8004218:	e084      	b.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb1b 	bl	800485c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0204 	bic.w	r2, r2, #4
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
      break;
 8004258:	e064      	b.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fb71 	bl	8004948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
      break;
 800429a:	e043      	b.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fba8 	bl	80049f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0208 	orr.w	r2, r2, #8
 80042b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042da:	e023      	b.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fbda 	bl	8004a9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800431c:	e002      	b.n	8004324 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
      break;
 8004322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop

08004338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIM_ConfigClockSource+0x1c>
 8004350:	2302      	movs	r3, #2
 8004352:	e0b4      	b.n	80044be <HAL_TIM_ConfigClockSource+0x186>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	4b56      	ldr	r3, [pc, #344]	@ (80044c8 <HAL_TIM_ConfigClockSource+0x190>)
 8004370:	4013      	ands	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800437a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d03e      	beq.n	800440c <HAL_TIM_ConfigClockSource+0xd4>
 800438e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004392:	f200 8087 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439a:	f000 8086 	beq.w	80044aa <HAL_TIM_ConfigClockSource+0x172>
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a2:	d87f      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b70      	cmp	r3, #112	@ 0x70
 80043a6:	d01a      	beq.n	80043de <HAL_TIM_ConfigClockSource+0xa6>
 80043a8:	2b70      	cmp	r3, #112	@ 0x70
 80043aa:	d87b      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ac:	2b60      	cmp	r3, #96	@ 0x60
 80043ae:	d050      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x11a>
 80043b0:	2b60      	cmp	r3, #96	@ 0x60
 80043b2:	d877      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043b4:	2b50      	cmp	r3, #80	@ 0x50
 80043b6:	d03c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0xfa>
 80043b8:	2b50      	cmp	r3, #80	@ 0x50
 80043ba:	d873      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d058      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x13a>
 80043c0:	2b40      	cmp	r3, #64	@ 0x40
 80043c2:	d86f      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043c4:	2b30      	cmp	r3, #48	@ 0x30
 80043c6:	d064      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x15a>
 80043c8:	2b30      	cmp	r3, #48	@ 0x30
 80043ca:	d86b      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d060      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x15a>
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d867      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d05c      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x15a>
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d05a      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x15a>
 80043dc:	e062      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ee:	f000 fc23 	bl	8004c38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	609a      	str	r2, [r3, #8]
      break;
 800440a:	e04f      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800441c:	f000 fc0c 	bl	8004c38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800442e:	609a      	str	r2, [r3, #8]
      break;
 8004430:	e03c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	461a      	mov	r2, r3
 8004440:	f000 fb80 	bl	8004b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2150      	movs	r1, #80	@ 0x50
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fbd9 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 8004450:	e02c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	461a      	mov	r2, r3
 8004460:	f000 fb9f 	bl	8004ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2160      	movs	r1, #96	@ 0x60
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fbc9 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 8004470:	e01c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	461a      	mov	r2, r3
 8004480:	f000 fb60 	bl	8004b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2140      	movs	r1, #64	@ 0x40
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fbb9 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 8004490:	e00c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f000 fbb0 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e003      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      break;
 80044a8:	e000      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	fffeff88 	.word	0xfffeff88

080044cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a46      	ldr	r2, [pc, #280]	@ (800465c <TIM_Base_SetConfig+0x12c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a43      	ldr	r2, [pc, #268]	@ (8004660 <TIM_Base_SetConfig+0x130>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a42      	ldr	r2, [pc, #264]	@ (8004664 <TIM_Base_SetConfig+0x134>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a41      	ldr	r2, [pc, #260]	@ (8004668 <TIM_Base_SetConfig+0x138>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a40      	ldr	r2, [pc, #256]	@ (800466c <TIM_Base_SetConfig+0x13c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a35      	ldr	r2, [pc, #212]	@ (800465c <TIM_Base_SetConfig+0x12c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004590:	d027      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a32      	ldr	r2, [pc, #200]	@ (8004660 <TIM_Base_SetConfig+0x130>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d023      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a31      	ldr	r2, [pc, #196]	@ (8004664 <TIM_Base_SetConfig+0x134>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a30      	ldr	r2, [pc, #192]	@ (8004668 <TIM_Base_SetConfig+0x138>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2f      	ldr	r2, [pc, #188]	@ (800466c <TIM_Base_SetConfig+0x13c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d017      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004670 <TIM_Base_SetConfig+0x140>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004674 <TIM_Base_SetConfig+0x144>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004678 <TIM_Base_SetConfig+0x148>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2b      	ldr	r2, [pc, #172]	@ (800467c <TIM_Base_SetConfig+0x14c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004680 <TIM_Base_SetConfig+0x150>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a29      	ldr	r2, [pc, #164]	@ (8004684 <TIM_Base_SetConfig+0x154>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a10      	ldr	r2, [pc, #64]	@ (800465c <TIM_Base_SetConfig+0x12c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0xf8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a12      	ldr	r2, [pc, #72]	@ (800466c <TIM_Base_SetConfig+0x13c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	611a      	str	r2, [r3, #16]
  }
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40010400 	.word	0x40010400
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800
 800467c:	40001800 	.word	0x40001800
 8004680:	40001c00 	.word	0x40001c00
 8004684:	40002000 	.word	0x40002000

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0201 	bic.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004760 <TIM_OC1_SetConfig+0xd8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0302 	bic.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a21      	ldr	r2, [pc, #132]	@ (8004764 <TIM_OC1_SetConfig+0xdc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC1_SetConfig+0x64>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a20      	ldr	r2, [pc, #128]	@ (8004768 <TIM_OC1_SetConfig+0xe0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d10c      	bne.n	8004706 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0308 	bic.w	r3, r3, #8
 80046f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 0304 	bic.w	r3, r3, #4
 8004704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <TIM_OC1_SetConfig+0xdc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_OC1_SetConfig+0x8e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <TIM_OC1_SetConfig+0xe0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	fffeff8f 	.word	0xfffeff8f
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400

0800476c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 0210 	bic.w	r2, r3, #16
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4b2e      	ldr	r3, [pc, #184]	@ (8004850 <TIM_OC2_SetConfig+0xe4>)
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a23      	ldr	r2, [pc, #140]	@ (8004854 <TIM_OC2_SetConfig+0xe8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_OC2_SetConfig+0x68>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a22      	ldr	r2, [pc, #136]	@ (8004858 <TIM_OC2_SetConfig+0xec>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10d      	bne.n	80047f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <TIM_OC2_SetConfig+0xe8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC2_SetConfig+0x94>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <TIM_OC2_SetConfig+0xec>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d113      	bne.n	8004828 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	feff8fff 	.word	0xfeff8fff
 8004854:	40010000 	.word	0x40010000
 8004858:	40010400 	.word	0x40010400

0800485c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <TIM_OC3_SetConfig+0xe0>)
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a22      	ldr	r2, [pc, #136]	@ (8004940 <TIM_OC3_SetConfig+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_OC3_SetConfig+0x66>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a21      	ldr	r2, [pc, #132]	@ (8004944 <TIM_OC3_SetConfig+0xe8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10d      	bne.n	80048de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a17      	ldr	r2, [pc, #92]	@ (8004940 <TIM_OC3_SetConfig+0xe4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_OC3_SetConfig+0x92>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a16      	ldr	r2, [pc, #88]	@ (8004944 <TIM_OC3_SetConfig+0xe8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	fffeff8f 	.word	0xfffeff8f
 8004940:	40010000 	.word	0x40010000
 8004944:	40010400 	.word	0x40010400

08004948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <TIM_OC4_SetConfig+0xa4>)
 8004974:	4013      	ands	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800497e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	031b      	lsls	r3, r3, #12
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <TIM_OC4_SetConfig+0xa8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_OC4_SetConfig+0x68>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <TIM_OC4_SetConfig+0xac>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d109      	bne.n	80049c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	019b      	lsls	r3, r3, #6
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	feff8fff 	.word	0xfeff8fff
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40010400 	.word	0x40010400

080049f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <TIM_OC5_SetConfig+0x98>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a12      	ldr	r2, [pc, #72]	@ (8004a94 <TIM_OC5_SetConfig+0x9c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_OC5_SetConfig+0x5e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a11      	ldr	r2, [pc, #68]	@ (8004a98 <TIM_OC5_SetConfig+0xa0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d109      	bne.n	8004a6a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	fffeff8f 	.word	0xfffeff8f
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <TIM_OC6_SetConfig+0x9c>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	051b      	lsls	r3, r3, #20
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <TIM_OC6_SetConfig+0xa0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC6_SetConfig+0x60>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <TIM_OC6_SetConfig+0xa4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	feff8fff 	.word	0xfeff8fff
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40010400 	.word	0x40010400

08004b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 030a 	bic.w	r3, r3, #10
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f023 0210 	bic.w	r2, r3, #16
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f043 0307 	orr.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1a      	ldr	r2, [r3, #32]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e06d      	b.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a30      	ldr	r2, [pc, #192]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a20      	ldr	r2, [pc, #128]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4e:	d01d      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1d      	ldr	r2, [pc, #116]	@ (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a15      	ldr	r2, [pc, #84]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a15      	ldr	r2, [pc, #84]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d10c      	bne.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40001800 	.word	0x40001800

08004de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e040      	b.n	8004eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc fd7e 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	@ 0x24
 8004e48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fb16 	bl	8005494 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f8af 	bl	8004fcc <UART_SetConfig>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e01b      	b.n	8004eb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb95 	bl	80055d8 <UART_CheckIdleState>
 8004eae:	4603      	mov	r3, r0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d177      	bne.n	8004fc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_UART_Transmit+0x24>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e070      	b.n	8004fc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2221      	movs	r2, #33	@ 0x21
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eee:	f7fc ff8d 	bl	8001e0c <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0c:	d108      	bne.n	8004f20 <HAL_UART_Transmit+0x68>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e003      	b.n	8004f28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f28:	e02f      	b.n	8004f8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2180      	movs	r1, #128	@ 0x80
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fba6 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e03b      	b.n	8004fc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	3302      	adds	r3, #2
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e007      	b.n	8004f78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1c9      	bne.n	8004f2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2140      	movs	r1, #64	@ 0x40
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fb70 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e005      	b.n	8004fc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4ba6      	ldr	r3, [pc, #664]	@ (8005290 <UART_SetConfig+0x2c4>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	430b      	orrs	r3, r1
 8005002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a94      	ldr	r2, [pc, #592]	@ (8005294 <UART_SetConfig+0x2c8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d120      	bne.n	800508a <UART_SetConfig+0xbe>
 8005048:	4b93      	ldr	r3, [pc, #588]	@ (8005298 <UART_SetConfig+0x2cc>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d816      	bhi.n	8005084 <UART_SetConfig+0xb8>
 8005056:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <UART_SetConfig+0x90>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	0800506d 	.word	0x0800506d
 8005060:	08005079 	.word	0x08005079
 8005064:	08005073 	.word	0x08005073
 8005068:	0800507f 	.word	0x0800507f
 800506c:	2301      	movs	r3, #1
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e150      	b.n	8005314 <UART_SetConfig+0x348>
 8005072:	2302      	movs	r3, #2
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e14d      	b.n	8005314 <UART_SetConfig+0x348>
 8005078:	2304      	movs	r3, #4
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e14a      	b.n	8005314 <UART_SetConfig+0x348>
 800507e:	2308      	movs	r3, #8
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e147      	b.n	8005314 <UART_SetConfig+0x348>
 8005084:	2310      	movs	r3, #16
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e144      	b.n	8005314 <UART_SetConfig+0x348>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a83      	ldr	r2, [pc, #524]	@ (800529c <UART_SetConfig+0x2d0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d132      	bne.n	80050fa <UART_SetConfig+0x12e>
 8005094:	4b80      	ldr	r3, [pc, #512]	@ (8005298 <UART_SetConfig+0x2cc>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d828      	bhi.n	80050f4 <UART_SetConfig+0x128>
 80050a2:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0xdc>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	080050f5 	.word	0x080050f5
 80050b0:	080050f5 	.word	0x080050f5
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	080050f5 	.word	0x080050f5
 80050c8:	080050e3 	.word	0x080050e3
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	080050f5 	.word	0x080050f5
 80050d8:	080050ef 	.word	0x080050ef
 80050dc:	2300      	movs	r3, #0
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e118      	b.n	8005314 <UART_SetConfig+0x348>
 80050e2:	2302      	movs	r3, #2
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e115      	b.n	8005314 <UART_SetConfig+0x348>
 80050e8:	2304      	movs	r3, #4
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e112      	b.n	8005314 <UART_SetConfig+0x348>
 80050ee:	2308      	movs	r3, #8
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e10f      	b.n	8005314 <UART_SetConfig+0x348>
 80050f4:	2310      	movs	r3, #16
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e10c      	b.n	8005314 <UART_SetConfig+0x348>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a68      	ldr	r2, [pc, #416]	@ (80052a0 <UART_SetConfig+0x2d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d120      	bne.n	8005146 <UART_SetConfig+0x17a>
 8005104:	4b64      	ldr	r3, [pc, #400]	@ (8005298 <UART_SetConfig+0x2cc>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800510e:	2b30      	cmp	r3, #48	@ 0x30
 8005110:	d013      	beq.n	800513a <UART_SetConfig+0x16e>
 8005112:	2b30      	cmp	r3, #48	@ 0x30
 8005114:	d814      	bhi.n	8005140 <UART_SetConfig+0x174>
 8005116:	2b20      	cmp	r3, #32
 8005118:	d009      	beq.n	800512e <UART_SetConfig+0x162>
 800511a:	2b20      	cmp	r3, #32
 800511c:	d810      	bhi.n	8005140 <UART_SetConfig+0x174>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <UART_SetConfig+0x15c>
 8005122:	2b10      	cmp	r3, #16
 8005124:	d006      	beq.n	8005134 <UART_SetConfig+0x168>
 8005126:	e00b      	b.n	8005140 <UART_SetConfig+0x174>
 8005128:	2300      	movs	r3, #0
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e0f2      	b.n	8005314 <UART_SetConfig+0x348>
 800512e:	2302      	movs	r3, #2
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e0ef      	b.n	8005314 <UART_SetConfig+0x348>
 8005134:	2304      	movs	r3, #4
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e0ec      	b.n	8005314 <UART_SetConfig+0x348>
 800513a:	2308      	movs	r3, #8
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e0e9      	b.n	8005314 <UART_SetConfig+0x348>
 8005140:	2310      	movs	r3, #16
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e0e6      	b.n	8005314 <UART_SetConfig+0x348>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a56      	ldr	r2, [pc, #344]	@ (80052a4 <UART_SetConfig+0x2d8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d120      	bne.n	8005192 <UART_SetConfig+0x1c6>
 8005150:	4b51      	ldr	r3, [pc, #324]	@ (8005298 <UART_SetConfig+0x2cc>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005156:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800515a:	2bc0      	cmp	r3, #192	@ 0xc0
 800515c:	d013      	beq.n	8005186 <UART_SetConfig+0x1ba>
 800515e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005160:	d814      	bhi.n	800518c <UART_SetConfig+0x1c0>
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d009      	beq.n	800517a <UART_SetConfig+0x1ae>
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d810      	bhi.n	800518c <UART_SetConfig+0x1c0>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <UART_SetConfig+0x1a8>
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d006      	beq.n	8005180 <UART_SetConfig+0x1b4>
 8005172:	e00b      	b.n	800518c <UART_SetConfig+0x1c0>
 8005174:	2300      	movs	r3, #0
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e0cc      	b.n	8005314 <UART_SetConfig+0x348>
 800517a:	2302      	movs	r3, #2
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e0c9      	b.n	8005314 <UART_SetConfig+0x348>
 8005180:	2304      	movs	r3, #4
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e0c6      	b.n	8005314 <UART_SetConfig+0x348>
 8005186:	2308      	movs	r3, #8
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e0c3      	b.n	8005314 <UART_SetConfig+0x348>
 800518c:	2310      	movs	r3, #16
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e0c0      	b.n	8005314 <UART_SetConfig+0x348>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a44      	ldr	r2, [pc, #272]	@ (80052a8 <UART_SetConfig+0x2dc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d125      	bne.n	80051e8 <UART_SetConfig+0x21c>
 800519c:	4b3e      	ldr	r3, [pc, #248]	@ (8005298 <UART_SetConfig+0x2cc>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051aa:	d017      	beq.n	80051dc <UART_SetConfig+0x210>
 80051ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b0:	d817      	bhi.n	80051e2 <UART_SetConfig+0x216>
 80051b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b6:	d00b      	beq.n	80051d0 <UART_SetConfig+0x204>
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d811      	bhi.n	80051e2 <UART_SetConfig+0x216>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <UART_SetConfig+0x1fe>
 80051c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c6:	d006      	beq.n	80051d6 <UART_SetConfig+0x20a>
 80051c8:	e00b      	b.n	80051e2 <UART_SetConfig+0x216>
 80051ca:	2300      	movs	r3, #0
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e0a1      	b.n	8005314 <UART_SetConfig+0x348>
 80051d0:	2302      	movs	r3, #2
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e09e      	b.n	8005314 <UART_SetConfig+0x348>
 80051d6:	2304      	movs	r3, #4
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e09b      	b.n	8005314 <UART_SetConfig+0x348>
 80051dc:	2308      	movs	r3, #8
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e098      	b.n	8005314 <UART_SetConfig+0x348>
 80051e2:	2310      	movs	r3, #16
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e095      	b.n	8005314 <UART_SetConfig+0x348>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2f      	ldr	r2, [pc, #188]	@ (80052ac <UART_SetConfig+0x2e0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d125      	bne.n	800523e <UART_SetConfig+0x272>
 80051f2:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <UART_SetConfig+0x2cc>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005200:	d017      	beq.n	8005232 <UART_SetConfig+0x266>
 8005202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005206:	d817      	bhi.n	8005238 <UART_SetConfig+0x26c>
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800520c:	d00b      	beq.n	8005226 <UART_SetConfig+0x25a>
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005212:	d811      	bhi.n	8005238 <UART_SetConfig+0x26c>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <UART_SetConfig+0x254>
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521c:	d006      	beq.n	800522c <UART_SetConfig+0x260>
 800521e:	e00b      	b.n	8005238 <UART_SetConfig+0x26c>
 8005220:	2301      	movs	r3, #1
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e076      	b.n	8005314 <UART_SetConfig+0x348>
 8005226:	2302      	movs	r3, #2
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e073      	b.n	8005314 <UART_SetConfig+0x348>
 800522c:	2304      	movs	r3, #4
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e070      	b.n	8005314 <UART_SetConfig+0x348>
 8005232:	2308      	movs	r3, #8
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e06d      	b.n	8005314 <UART_SetConfig+0x348>
 8005238:	2310      	movs	r3, #16
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e06a      	b.n	8005314 <UART_SetConfig+0x348>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1b      	ldr	r2, [pc, #108]	@ (80052b0 <UART_SetConfig+0x2e4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d138      	bne.n	80052ba <UART_SetConfig+0x2ee>
 8005248:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <UART_SetConfig+0x2cc>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005252:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005256:	d017      	beq.n	8005288 <UART_SetConfig+0x2bc>
 8005258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800525c:	d82a      	bhi.n	80052b4 <UART_SetConfig+0x2e8>
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005262:	d00b      	beq.n	800527c <UART_SetConfig+0x2b0>
 8005264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005268:	d824      	bhi.n	80052b4 <UART_SetConfig+0x2e8>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <UART_SetConfig+0x2aa>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	d006      	beq.n	8005282 <UART_SetConfig+0x2b6>
 8005274:	e01e      	b.n	80052b4 <UART_SetConfig+0x2e8>
 8005276:	2300      	movs	r3, #0
 8005278:	77fb      	strb	r3, [r7, #31]
 800527a:	e04b      	b.n	8005314 <UART_SetConfig+0x348>
 800527c:	2302      	movs	r3, #2
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e048      	b.n	8005314 <UART_SetConfig+0x348>
 8005282:	2304      	movs	r3, #4
 8005284:	77fb      	strb	r3, [r7, #31]
 8005286:	e045      	b.n	8005314 <UART_SetConfig+0x348>
 8005288:	2308      	movs	r3, #8
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e042      	b.n	8005314 <UART_SetConfig+0x348>
 800528e:	bf00      	nop
 8005290:	efff69f3 	.word	0xefff69f3
 8005294:	40011000 	.word	0x40011000
 8005298:	40023800 	.word	0x40023800
 800529c:	40004400 	.word	0x40004400
 80052a0:	40004800 	.word	0x40004800
 80052a4:	40004c00 	.word	0x40004c00
 80052a8:	40005000 	.word	0x40005000
 80052ac:	40011400 	.word	0x40011400
 80052b0:	40007800 	.word	0x40007800
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e02c      	b.n	8005314 <UART_SetConfig+0x348>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a72      	ldr	r2, [pc, #456]	@ (8005488 <UART_SetConfig+0x4bc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d125      	bne.n	8005310 <UART_SetConfig+0x344>
 80052c4:	4b71      	ldr	r3, [pc, #452]	@ (800548c <UART_SetConfig+0x4c0>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80052ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80052d2:	d017      	beq.n	8005304 <UART_SetConfig+0x338>
 80052d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80052d8:	d817      	bhi.n	800530a <UART_SetConfig+0x33e>
 80052da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052de:	d00b      	beq.n	80052f8 <UART_SetConfig+0x32c>
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e4:	d811      	bhi.n	800530a <UART_SetConfig+0x33e>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <UART_SetConfig+0x326>
 80052ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ee:	d006      	beq.n	80052fe <UART_SetConfig+0x332>
 80052f0:	e00b      	b.n	800530a <UART_SetConfig+0x33e>
 80052f2:	2300      	movs	r3, #0
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e00d      	b.n	8005314 <UART_SetConfig+0x348>
 80052f8:	2302      	movs	r3, #2
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e00a      	b.n	8005314 <UART_SetConfig+0x348>
 80052fe:	2304      	movs	r3, #4
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e007      	b.n	8005314 <UART_SetConfig+0x348>
 8005304:	2308      	movs	r3, #8
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x348>
 800530a:	2310      	movs	r3, #16
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e001      	b.n	8005314 <UART_SetConfig+0x348>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800531c:	d15b      	bne.n	80053d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d828      	bhi.n	8005376 <UART_SetConfig+0x3aa>
 8005324:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <UART_SetConfig+0x360>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	08005377 	.word	0x08005377
 800533c:	08005367 	.word	0x08005367
 8005340:	08005377 	.word	0x08005377
 8005344:	08005377 	.word	0x08005377
 8005348:	08005377 	.word	0x08005377
 800534c:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fd fe68 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8005354:	61b8      	str	r0, [r7, #24]
        break;
 8005356:	e013      	b.n	8005380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7fd fe78 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 800535c:	61b8      	str	r0, [r7, #24]
        break;
 800535e:	e00f      	b.n	8005380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <UART_SetConfig+0x4c4>)
 8005362:	61bb      	str	r3, [r7, #24]
        break;
 8005364:	e00c      	b.n	8005380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7fd fd4b 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 800536a:	61b8      	str	r0, [r7, #24]
        break;
 800536c:	e008      	b.n	8005380 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005372:	61bb      	str	r3, [r7, #24]
        break;
 8005374:	e004      	b.n	8005380 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	77bb      	strb	r3, [r7, #30]
        break;
 800537e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d074      	beq.n	8005470 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	005a      	lsls	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d916      	bls.n	80053d0 <UART_SetConfig+0x404>
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d212      	bcs.n	80053d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f023 030f 	bic.w	r3, r3, #15
 80053b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	b29a      	uxth	r2, r3
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	89fa      	ldrh	r2, [r7, #14]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e04f      	b.n	8005470 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	77bb      	strb	r3, [r7, #30]
 80053d4:	e04c      	b.n	8005470 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d6:	7ffb      	ldrb	r3, [r7, #31]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d828      	bhi.n	800542e <UART_SetConfig+0x462>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0x418>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	0800542f 	.word	0x0800542f
 80053f4:	0800541f 	.word	0x0800541f
 80053f8:	0800542f 	.word	0x0800542f
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	0800542f 	.word	0x0800542f
 8005404:	08005427 	.word	0x08005427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7fd fe0c 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800540c:	61b8      	str	r0, [r7, #24]
        break;
 800540e:	e013      	b.n	8005438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7fd fe1c 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 8005414:	61b8      	str	r0, [r7, #24]
        break;
 8005416:	e00f      	b.n	8005438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005418:	4b1d      	ldr	r3, [pc, #116]	@ (8005490 <UART_SetConfig+0x4c4>)
 800541a:	61bb      	str	r3, [r7, #24]
        break;
 800541c:	e00c      	b.n	8005438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541e:	f7fd fcef 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8005422:	61b8      	str	r0, [r7, #24]
        break;
 8005424:	e008      	b.n	8005438 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800542a:	61bb      	str	r3, [r7, #24]
        break;
 800542c:	e004      	b.n	8005438 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	77bb      	strb	r3, [r7, #30]
        break;
 8005436:	bf00      	nop
    }

    if (pclk != 0U)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	085a      	lsrs	r2, r3, #1
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b0f      	cmp	r3, #15
 8005456:	d909      	bls.n	800546c <UART_SetConfig+0x4a0>
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545e:	d205      	bcs.n	800546c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	b29a      	uxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e001      	b.n	8005470 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800547c:	7fbb      	ldrb	r3, [r7, #30]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40007c00 	.word	0x40007c00
 800548c:	40023800 	.word	0x40023800
 8005490:	00f42400 	.word	0x00f42400

08005494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01a      	beq.n	80055aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005592:	d10a      	bne.n	80055aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08c      	sub	sp, #48	@ 0x30
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e8:	f7fc fc10 	bl	8001e0c <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d12e      	bne.n	800565a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f83b 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d021      	beq.n	800565a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60fb      	str	r3, [r7, #12]
   return(result);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	617b      	str	r3, [r7, #20]
   return(result);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e6      	bne.n	8005616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e011      	b.n	800567e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3728      	adds	r7, #40	@ 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005696:	e04f      	b.n	8005738 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d04b      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a0:	f7fc fbb4 	bl	8001e0c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d302      	bcc.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e04e      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d037      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b80      	cmp	r3, #128	@ 0x80
 80056cc:	d034      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b40      	cmp	r3, #64	@ 0x40
 80056d2:	d031      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d110      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2208      	movs	r2, #8
 80056e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f838 	bl	8005760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2208      	movs	r2, #8
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e029      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005712:	d111      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800571c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f81e 	bl	8005760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e00f      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	429a      	cmp	r2, r3
 8005754:	d0a0      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b095      	sub	sp, #84	@ 0x54
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800577c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005786:	643b      	str	r3, [r7, #64]	@ 0x40
 8005788:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800578c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e6      	bne.n	8005768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d118      	bne.n	8005808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f023 0310 	bic.w	r3, r3, #16
 80057ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	613b      	str	r3, [r7, #16]
   return(result);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e6      	bne.n	80057d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800581c:	bf00      	nop
 800581e:	3754      	adds	r7, #84	@ 0x54
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 001c 	add.w	r0, r7, #28
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800583a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800583e:	2b01      	cmp	r3, #1
 8005840:	d121      	bne.n	8005886 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005846:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	4b21      	ldr	r3, [pc, #132]	@ (80058d8 <USB_CoreInit+0xb0>)
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005866:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa92 	bl	8005da4 <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e010      	b.n	80058a8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa86 	bl	8005da4 <USB_CoreReset>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80058a8:	7fbb      	ldrb	r3, [r7, #30]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d10b      	bne.n	80058c6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f043 0206 	orr.w	r2, r3, #6
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d2:	b004      	add	sp, #16
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	ffbdffbf 	.word	0xffbdffbf

080058dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 0201 	bic.w	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d115      	bne.n	800594c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800592c:	200a      	movs	r0, #10
 800592e:	f7fc fa79 	bl	8001e24 <HAL_Delay>
      ms += 10U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	330a      	adds	r3, #10
 8005936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fa25 	bl	8005d88 <USB_GetMode>
 800593e:	4603      	mov	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d01e      	beq.n	8005982 <USB_SetCurrentMode+0x84>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2bc7      	cmp	r3, #199	@ 0xc7
 8005948:	d9f0      	bls.n	800592c <USB_SetCurrentMode+0x2e>
 800594a:	e01a      	b.n	8005982 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800595e:	200a      	movs	r0, #10
 8005960:	f7fc fa60 	bl	8001e24 <HAL_Delay>
      ms += 10U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	330a      	adds	r3, #10
 8005968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fa0c 	bl	8005d88 <USB_GetMode>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <USB_SetCurrentMode+0x84>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2bc7      	cmp	r3, #199	@ 0xc7
 800597a:	d9f0      	bls.n	800595e <USB_SetCurrentMode+0x60>
 800597c:	e001      	b.n	8005982 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e005      	b.n	800598e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2bc8      	cmp	r3, #200	@ 0xc8
 8005986:	d101      	bne.n	800598c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005998:	b084      	sub	sp, #16
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e009      	b.n	80059cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3340      	adds	r3, #64	@ 0x40
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3301      	adds	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b0e      	cmp	r3, #14
 80059d0:	d9f2      	bls.n	80059b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11c      	bne.n	8005a14 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e005      	b.n	8005a20 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a26:	461a      	mov	r2, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10d      	bne.n	8005a50 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f968 	bl	8005d14 <USB_SetDevSpeed>
 8005a44:	e008      	b.n	8005a58 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a46:	2101      	movs	r1, #1
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f963 	bl	8005d14 <USB_SetDevSpeed>
 8005a4e:	e003      	b.n	8005a58 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a50:	2103      	movs	r1, #3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f95e 	bl	8005d14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a58:	2110      	movs	r1, #16
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8fa 	bl	8005c54 <USB_FlushTxFifo>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f924 	bl	8005cb8 <USB_FlushRxFifo>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a80:	461a      	mov	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	e043      	b.n	8005b2c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aba:	d118      	bne.n	8005aee <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e013      	b.n	8005b00 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e008      	b.n	8005b00 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005afa:	461a      	mov	r2, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b30:	461a      	mov	r2, r3
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d3b5      	bcc.n	8005aa4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	e043      	b.n	8005bc6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b54:	d118      	bne.n	8005b88 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e013      	b.n	8005b9a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e008      	b.n	8005b9a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bca:	461a      	mov	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d3b5      	bcc.n	8005b3e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005bf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f043 0210 	orr.w	r2, r3, #16
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <USB_DevInit+0x2b4>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f043 0208 	orr.w	r2, r3, #8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d105      	bne.n	8005c3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <USB_DevInit+0x2b8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c48:	b004      	add	sp, #16
 8005c4a:	4770      	bx	lr
 8005c4c:	803c3800 	.word	0x803c3800
 8005c50:	40000004 	.word	0x40000004

08005c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c6e:	d901      	bls.n	8005c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e01b      	b.n	8005cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	daf2      	bge.n	8005c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	019b      	lsls	r3, r3, #6
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c98:	d901      	bls.n	8005c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e006      	b.n	8005cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d0f0      	beq.n	8005c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cd0:	d901      	bls.n	8005cd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e018      	b.n	8005d08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	daf2      	bge.n	8005cc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf4:	d901      	bls.n	8005cfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e006      	b.n	8005d08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d0f0      	beq.n	8005ce8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d34:	4313      	orrs	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d60:	f023 0303 	bic.w	r3, r3, #3
 8005d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d74:	f043 0302 	orr.w	r3, r3, #2
 8005d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f003 0301 	and.w	r3, r3, #1
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dbc:	d901      	bls.n	8005dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e01b      	b.n	8005dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	daf2      	bge.n	8005db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de6:	d901      	bls.n	8005dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e006      	b.n	8005dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d0f0      	beq.n	8005dda <USB_CoreReset+0x36>

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <__cvt>:
 8005e06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0a:	ec57 6b10 	vmov	r6, r7, d0
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	460c      	mov	r4, r1
 8005e12:	4619      	mov	r1, r3
 8005e14:	463b      	mov	r3, r7
 8005e16:	bfbb      	ittet	lt
 8005e18:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e1c:	461f      	movlt	r7, r3
 8005e1e:	2300      	movge	r3, #0
 8005e20:	232d      	movlt	r3, #45	@ 0x2d
 8005e22:	700b      	strb	r3, [r1, #0]
 8005e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e26:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e2a:	4691      	mov	r9, r2
 8005e2c:	f023 0820 	bic.w	r8, r3, #32
 8005e30:	bfbc      	itt	lt
 8005e32:	4632      	movlt	r2, r6
 8005e34:	4616      	movlt	r6, r2
 8005e36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e3a:	d005      	beq.n	8005e48 <__cvt+0x42>
 8005e3c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e40:	d100      	bne.n	8005e44 <__cvt+0x3e>
 8005e42:	3401      	adds	r4, #1
 8005e44:	2102      	movs	r1, #2
 8005e46:	e000      	b.n	8005e4a <__cvt+0x44>
 8005e48:	2103      	movs	r1, #3
 8005e4a:	ab03      	add	r3, sp, #12
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	ab02      	add	r3, sp, #8
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	ec47 6b10 	vmov	d0, r6, r7
 8005e56:	4653      	mov	r3, sl
 8005e58:	4622      	mov	r2, r4
 8005e5a:	f000 fe59 	bl	8006b10 <_dtoa_r>
 8005e5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e62:	4605      	mov	r5, r0
 8005e64:	d119      	bne.n	8005e9a <__cvt+0x94>
 8005e66:	f019 0f01 	tst.w	r9, #1
 8005e6a:	d00e      	beq.n	8005e8a <__cvt+0x84>
 8005e6c:	eb00 0904 	add.w	r9, r0, r4
 8005e70:	2200      	movs	r2, #0
 8005e72:	2300      	movs	r3, #0
 8005e74:	4630      	mov	r0, r6
 8005e76:	4639      	mov	r1, r7
 8005e78:	f7fa fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8005e7c:	b108      	cbz	r0, 8005e82 <__cvt+0x7c>
 8005e7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e82:	2230      	movs	r2, #48	@ 0x30
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	454b      	cmp	r3, r9
 8005e88:	d31e      	bcc.n	8005ec8 <__cvt+0xc2>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e8e:	1b5b      	subs	r3, r3, r5
 8005e90:	4628      	mov	r0, r5
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	b004      	add	sp, #16
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e9e:	eb00 0904 	add.w	r9, r0, r4
 8005ea2:	d1e5      	bne.n	8005e70 <__cvt+0x6a>
 8005ea4:	7803      	ldrb	r3, [r0, #0]
 8005ea6:	2b30      	cmp	r3, #48	@ 0x30
 8005ea8:	d10a      	bne.n	8005ec0 <__cvt+0xba>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa fe29 	bl	8000b08 <__aeabi_dcmpeq>
 8005eb6:	b918      	cbnz	r0, 8005ec0 <__cvt+0xba>
 8005eb8:	f1c4 0401 	rsb	r4, r4, #1
 8005ebc:	f8ca 4000 	str.w	r4, [sl]
 8005ec0:	f8da 3000 	ldr.w	r3, [sl]
 8005ec4:	4499      	add	r9, r3
 8005ec6:	e7d3      	b.n	8005e70 <__cvt+0x6a>
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	9103      	str	r1, [sp, #12]
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e7d9      	b.n	8005e84 <__cvt+0x7e>

08005ed0 <__exponent>:
 8005ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	bfba      	itte	lt
 8005ed6:	4249      	neglt	r1, r1
 8005ed8:	232d      	movlt	r3, #45	@ 0x2d
 8005eda:	232b      	movge	r3, #43	@ 0x2b
 8005edc:	2909      	cmp	r1, #9
 8005ede:	7002      	strb	r2, [r0, #0]
 8005ee0:	7043      	strb	r3, [r0, #1]
 8005ee2:	dd29      	ble.n	8005f38 <__exponent+0x68>
 8005ee4:	f10d 0307 	add.w	r3, sp, #7
 8005ee8:	461d      	mov	r5, r3
 8005eea:	270a      	movs	r7, #10
 8005eec:	461a      	mov	r2, r3
 8005eee:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ef2:	fb07 1416 	mls	r4, r7, r6, r1
 8005ef6:	3430      	adds	r4, #48	@ 0x30
 8005ef8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005efc:	460c      	mov	r4, r1
 8005efe:	2c63      	cmp	r4, #99	@ 0x63
 8005f00:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f04:	4631      	mov	r1, r6
 8005f06:	dcf1      	bgt.n	8005eec <__exponent+0x1c>
 8005f08:	3130      	adds	r1, #48	@ 0x30
 8005f0a:	1e94      	subs	r4, r2, #2
 8005f0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f10:	1c41      	adds	r1, r0, #1
 8005f12:	4623      	mov	r3, r4
 8005f14:	42ab      	cmp	r3, r5
 8005f16:	d30a      	bcc.n	8005f2e <__exponent+0x5e>
 8005f18:	f10d 0309 	add.w	r3, sp, #9
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	42ac      	cmp	r4, r5
 8005f20:	bf88      	it	hi
 8005f22:	2300      	movhi	r3, #0
 8005f24:	3302      	adds	r3, #2
 8005f26:	4403      	add	r3, r0
 8005f28:	1a18      	subs	r0, r3, r0
 8005f2a:	b003      	add	sp, #12
 8005f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f36:	e7ed      	b.n	8005f14 <__exponent+0x44>
 8005f38:	2330      	movs	r3, #48	@ 0x30
 8005f3a:	3130      	adds	r1, #48	@ 0x30
 8005f3c:	7083      	strb	r3, [r0, #2]
 8005f3e:	70c1      	strb	r1, [r0, #3]
 8005f40:	1d03      	adds	r3, r0, #4
 8005f42:	e7f1      	b.n	8005f28 <__exponent+0x58>

08005f44 <_printf_float>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	b08d      	sub	sp, #52	@ 0x34
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f50:	4616      	mov	r6, r2
 8005f52:	461f      	mov	r7, r3
 8005f54:	4605      	mov	r5, r0
 8005f56:	f000 fcdb 	bl	8006910 <_localeconv_r>
 8005f5a:	6803      	ldr	r3, [r0, #0]
 8005f5c:	9304      	str	r3, [sp, #16]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fa f9a6 	bl	80002b0 <strlen>
 8005f64:	2300      	movs	r3, #0
 8005f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f68:	f8d8 3000 	ldr.w	r3, [r8]
 8005f6c:	9005      	str	r0, [sp, #20]
 8005f6e:	3307      	adds	r3, #7
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	f103 0208 	add.w	r2, r3, #8
 8005f78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f7c:	f8d4 b000 	ldr.w	fp, [r4]
 8005f80:	f8c8 2000 	str.w	r2, [r8]
 8005f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f8c:	9307      	str	r3, [sp, #28]
 8005f8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f9a:	4b9c      	ldr	r3, [pc, #624]	@ (800620c <_printf_float+0x2c8>)
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	f7fa fde4 	bl	8000b6c <__aeabi_dcmpun>
 8005fa4:	bb70      	cbnz	r0, 8006004 <_printf_float+0xc0>
 8005fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005faa:	4b98      	ldr	r3, [pc, #608]	@ (800620c <_printf_float+0x2c8>)
 8005fac:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb0:	f7fa fdbe 	bl	8000b30 <__aeabi_dcmple>
 8005fb4:	bb30      	cbnz	r0, 8006004 <_printf_float+0xc0>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa fdad 	bl	8000b1c <__aeabi_dcmplt>
 8005fc2:	b110      	cbz	r0, 8005fca <_printf_float+0x86>
 8005fc4:	232d      	movs	r3, #45	@ 0x2d
 8005fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fca:	4a91      	ldr	r2, [pc, #580]	@ (8006210 <_printf_float+0x2cc>)
 8005fcc:	4b91      	ldr	r3, [pc, #580]	@ (8006214 <_printf_float+0x2d0>)
 8005fce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fd2:	bf94      	ite	ls
 8005fd4:	4690      	movls	r8, r2
 8005fd6:	4698      	movhi	r8, r3
 8005fd8:	2303      	movs	r3, #3
 8005fda:	6123      	str	r3, [r4, #16]
 8005fdc:	f02b 0304 	bic.w	r3, fp, #4
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	f04f 0900 	mov.w	r9, #0
 8005fe6:	9700      	str	r7, [sp, #0]
 8005fe8:	4633      	mov	r3, r6
 8005fea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f9d2 	bl	8006398 <_printf_common>
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f040 808d 	bne.w	8006114 <_printf_float+0x1d0>
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffe:	b00d      	add	sp, #52	@ 0x34
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	4640      	mov	r0, r8
 800600a:	4649      	mov	r1, r9
 800600c:	f7fa fdae 	bl	8000b6c <__aeabi_dcmpun>
 8006010:	b140      	cbz	r0, 8006024 <_printf_float+0xe0>
 8006012:	464b      	mov	r3, r9
 8006014:	2b00      	cmp	r3, #0
 8006016:	bfbc      	itt	lt
 8006018:	232d      	movlt	r3, #45	@ 0x2d
 800601a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800601e:	4a7e      	ldr	r2, [pc, #504]	@ (8006218 <_printf_float+0x2d4>)
 8006020:	4b7e      	ldr	r3, [pc, #504]	@ (800621c <_printf_float+0x2d8>)
 8006022:	e7d4      	b.n	8005fce <_printf_float+0x8a>
 8006024:	6863      	ldr	r3, [r4, #4]
 8006026:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800602a:	9206      	str	r2, [sp, #24]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	d13b      	bne.n	80060a8 <_printf_float+0x164>
 8006030:	2306      	movs	r3, #6
 8006032:	6063      	str	r3, [r4, #4]
 8006034:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006038:	2300      	movs	r3, #0
 800603a:	6022      	str	r2, [r4, #0]
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006040:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006044:	ab09      	add	r3, sp, #36	@ 0x24
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	6861      	ldr	r1, [r4, #4]
 800604a:	ec49 8b10 	vmov	d0, r8, r9
 800604e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006052:	4628      	mov	r0, r5
 8006054:	f7ff fed7 	bl	8005e06 <__cvt>
 8006058:	9b06      	ldr	r3, [sp, #24]
 800605a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800605c:	2b47      	cmp	r3, #71	@ 0x47
 800605e:	4680      	mov	r8, r0
 8006060:	d129      	bne.n	80060b6 <_printf_float+0x172>
 8006062:	1cc8      	adds	r0, r1, #3
 8006064:	db02      	blt.n	800606c <_printf_float+0x128>
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	4299      	cmp	r1, r3
 800606a:	dd41      	ble.n	80060f0 <_printf_float+0x1ac>
 800606c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006070:	fa5f fa8a 	uxtb.w	sl, sl
 8006074:	3901      	subs	r1, #1
 8006076:	4652      	mov	r2, sl
 8006078:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800607c:	9109      	str	r1, [sp, #36]	@ 0x24
 800607e:	f7ff ff27 	bl	8005ed0 <__exponent>
 8006082:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006084:	1813      	adds	r3, r2, r0
 8006086:	2a01      	cmp	r2, #1
 8006088:	4681      	mov	r9, r0
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	dc02      	bgt.n	8006094 <_printf_float+0x150>
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	07d2      	lsls	r2, r2, #31
 8006092:	d501      	bpl.n	8006098 <_printf_float+0x154>
 8006094:	3301      	adds	r3, #1
 8006096:	6123      	str	r3, [r4, #16]
 8006098:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0a2      	beq.n	8005fe6 <_printf_float+0xa2>
 80060a0:	232d      	movs	r3, #45	@ 0x2d
 80060a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060a6:	e79e      	b.n	8005fe6 <_printf_float+0xa2>
 80060a8:	9a06      	ldr	r2, [sp, #24]
 80060aa:	2a47      	cmp	r2, #71	@ 0x47
 80060ac:	d1c2      	bne.n	8006034 <_printf_float+0xf0>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1c0      	bne.n	8006034 <_printf_float+0xf0>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e7bd      	b.n	8006032 <_printf_float+0xee>
 80060b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ba:	d9db      	bls.n	8006074 <_printf_float+0x130>
 80060bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060c0:	d118      	bne.n	80060f4 <_printf_float+0x1b0>
 80060c2:	2900      	cmp	r1, #0
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	dd0b      	ble.n	80060e0 <_printf_float+0x19c>
 80060c8:	6121      	str	r1, [r4, #16]
 80060ca:	b913      	cbnz	r3, 80060d2 <_printf_float+0x18e>
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	07d0      	lsls	r0, r2, #31
 80060d0:	d502      	bpl.n	80060d8 <_printf_float+0x194>
 80060d2:	3301      	adds	r3, #1
 80060d4:	440b      	add	r3, r1
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060da:	f04f 0900 	mov.w	r9, #0
 80060de:	e7db      	b.n	8006098 <_printf_float+0x154>
 80060e0:	b913      	cbnz	r3, 80060e8 <_printf_float+0x1a4>
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	07d2      	lsls	r2, r2, #31
 80060e6:	d501      	bpl.n	80060ec <_printf_float+0x1a8>
 80060e8:	3302      	adds	r3, #2
 80060ea:	e7f4      	b.n	80060d6 <_printf_float+0x192>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e7f2      	b.n	80060d6 <_printf_float+0x192>
 80060f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f6:	4299      	cmp	r1, r3
 80060f8:	db05      	blt.n	8006106 <_printf_float+0x1c2>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	6121      	str	r1, [r4, #16]
 80060fe:	07d8      	lsls	r0, r3, #31
 8006100:	d5ea      	bpl.n	80060d8 <_printf_float+0x194>
 8006102:	1c4b      	adds	r3, r1, #1
 8006104:	e7e7      	b.n	80060d6 <_printf_float+0x192>
 8006106:	2900      	cmp	r1, #0
 8006108:	bfd4      	ite	le
 800610a:	f1c1 0202 	rsble	r2, r1, #2
 800610e:	2201      	movgt	r2, #1
 8006110:	4413      	add	r3, r2
 8006112:	e7e0      	b.n	80060d6 <_printf_float+0x192>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	055a      	lsls	r2, r3, #21
 8006118:	d407      	bmi.n	800612a <_printf_float+0x1e6>
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	4642      	mov	r2, r8
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	47b8      	blx	r7
 8006124:	3001      	adds	r0, #1
 8006126:	d12b      	bne.n	8006180 <_printf_float+0x23c>
 8006128:	e767      	b.n	8005ffa <_printf_float+0xb6>
 800612a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800612e:	f240 80dd 	bls.w	80062ec <_printf_float+0x3a8>
 8006132:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	f7fa fce5 	bl	8000b08 <__aeabi_dcmpeq>
 800613e:	2800      	cmp	r0, #0
 8006140:	d033      	beq.n	80061aa <_printf_float+0x266>
 8006142:	4a37      	ldr	r2, [pc, #220]	@ (8006220 <_printf_float+0x2dc>)
 8006144:	2301      	movs	r3, #1
 8006146:	4631      	mov	r1, r6
 8006148:	4628      	mov	r0, r5
 800614a:	47b8      	blx	r7
 800614c:	3001      	adds	r0, #1
 800614e:	f43f af54 	beq.w	8005ffa <_printf_float+0xb6>
 8006152:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006156:	4543      	cmp	r3, r8
 8006158:	db02      	blt.n	8006160 <_printf_float+0x21c>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	07d8      	lsls	r0, r3, #31
 800615e:	d50f      	bpl.n	8006180 <_printf_float+0x23c>
 8006160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af45 	beq.w	8005ffa <_printf_float+0xb6>
 8006170:	f04f 0900 	mov.w	r9, #0
 8006174:	f108 38ff 	add.w	r8, r8, #4294967295
 8006178:	f104 0a1a 	add.w	sl, r4, #26
 800617c:	45c8      	cmp	r8, r9
 800617e:	dc09      	bgt.n	8006194 <_printf_float+0x250>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	079b      	lsls	r3, r3, #30
 8006184:	f100 8103 	bmi.w	800638e <_printf_float+0x44a>
 8006188:	68e0      	ldr	r0, [r4, #12]
 800618a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800618c:	4298      	cmp	r0, r3
 800618e:	bfb8      	it	lt
 8006190:	4618      	movlt	r0, r3
 8006192:	e734      	b.n	8005ffe <_printf_float+0xba>
 8006194:	2301      	movs	r3, #1
 8006196:	4652      	mov	r2, sl
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af2b 	beq.w	8005ffa <_printf_float+0xb6>
 80061a4:	f109 0901 	add.w	r9, r9, #1
 80061a8:	e7e8      	b.n	800617c <_printf_float+0x238>
 80061aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dc39      	bgt.n	8006224 <_printf_float+0x2e0>
 80061b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006220 <_printf_float+0x2dc>)
 80061b2:	2301      	movs	r3, #1
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f af1d 	beq.w	8005ffa <_printf_float+0xb6>
 80061c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061c4:	ea59 0303 	orrs.w	r3, r9, r3
 80061c8:	d102      	bne.n	80061d0 <_printf_float+0x28c>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	07d9      	lsls	r1, r3, #31
 80061ce:	d5d7      	bpl.n	8006180 <_printf_float+0x23c>
 80061d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f af0d 	beq.w	8005ffa <_printf_float+0xb6>
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	f104 0b1a 	add.w	fp, r4, #26
 80061e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ea:	425b      	negs	r3, r3
 80061ec:	4553      	cmp	r3, sl
 80061ee:	dc01      	bgt.n	80061f4 <_printf_float+0x2b0>
 80061f0:	464b      	mov	r3, r9
 80061f2:	e793      	b.n	800611c <_printf_float+0x1d8>
 80061f4:	2301      	movs	r3, #1
 80061f6:	465a      	mov	r2, fp
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f aefb 	beq.w	8005ffa <_printf_float+0xb6>
 8006204:	f10a 0a01 	add.w	sl, sl, #1
 8006208:	e7ee      	b.n	80061e8 <_printf_float+0x2a4>
 800620a:	bf00      	nop
 800620c:	7fefffff 	.word	0x7fefffff
 8006210:	08008ac8 	.word	0x08008ac8
 8006214:	08008acc 	.word	0x08008acc
 8006218:	08008ad0 	.word	0x08008ad0
 800621c:	08008ad4 	.word	0x08008ad4
 8006220:	08008ad8 	.word	0x08008ad8
 8006224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006226:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800622a:	4553      	cmp	r3, sl
 800622c:	bfa8      	it	ge
 800622e:	4653      	movge	r3, sl
 8006230:	2b00      	cmp	r3, #0
 8006232:	4699      	mov	r9, r3
 8006234:	dc36      	bgt.n	80062a4 <_printf_float+0x360>
 8006236:	f04f 0b00 	mov.w	fp, #0
 800623a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800623e:	f104 021a 	add.w	r2, r4, #26
 8006242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006244:	9306      	str	r3, [sp, #24]
 8006246:	eba3 0309 	sub.w	r3, r3, r9
 800624a:	455b      	cmp	r3, fp
 800624c:	dc31      	bgt.n	80062b2 <_printf_float+0x36e>
 800624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006250:	459a      	cmp	sl, r3
 8006252:	dc3a      	bgt.n	80062ca <_printf_float+0x386>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	07da      	lsls	r2, r3, #31
 8006258:	d437      	bmi.n	80062ca <_printf_float+0x386>
 800625a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800625c:	ebaa 0903 	sub.w	r9, sl, r3
 8006260:	9b06      	ldr	r3, [sp, #24]
 8006262:	ebaa 0303 	sub.w	r3, sl, r3
 8006266:	4599      	cmp	r9, r3
 8006268:	bfa8      	it	ge
 800626a:	4699      	movge	r9, r3
 800626c:	f1b9 0f00 	cmp.w	r9, #0
 8006270:	dc33      	bgt.n	80062da <_printf_float+0x396>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800627a:	f104 0b1a 	add.w	fp, r4, #26
 800627e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006280:	ebaa 0303 	sub.w	r3, sl, r3
 8006284:	eba3 0309 	sub.w	r3, r3, r9
 8006288:	4543      	cmp	r3, r8
 800628a:	f77f af79 	ble.w	8006180 <_printf_float+0x23c>
 800628e:	2301      	movs	r3, #1
 8006290:	465a      	mov	r2, fp
 8006292:	4631      	mov	r1, r6
 8006294:	4628      	mov	r0, r5
 8006296:	47b8      	blx	r7
 8006298:	3001      	adds	r0, #1
 800629a:	f43f aeae 	beq.w	8005ffa <_printf_float+0xb6>
 800629e:	f108 0801 	add.w	r8, r8, #1
 80062a2:	e7ec      	b.n	800627e <_printf_float+0x33a>
 80062a4:	4642      	mov	r2, r8
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	d1c2      	bne.n	8006236 <_printf_float+0x2f2>
 80062b0:	e6a3      	b.n	8005ffa <_printf_float+0xb6>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	9206      	str	r2, [sp, #24]
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	f43f ae9c 	beq.w	8005ffa <_printf_float+0xb6>
 80062c2:	9a06      	ldr	r2, [sp, #24]
 80062c4:	f10b 0b01 	add.w	fp, fp, #1
 80062c8:	e7bb      	b.n	8006242 <_printf_float+0x2fe>
 80062ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	d1c0      	bne.n	800625a <_printf_float+0x316>
 80062d8:	e68f      	b.n	8005ffa <_printf_float+0xb6>
 80062da:	9a06      	ldr	r2, [sp, #24]
 80062dc:	464b      	mov	r3, r9
 80062de:	4442      	add	r2, r8
 80062e0:	4631      	mov	r1, r6
 80062e2:	4628      	mov	r0, r5
 80062e4:	47b8      	blx	r7
 80062e6:	3001      	adds	r0, #1
 80062e8:	d1c3      	bne.n	8006272 <_printf_float+0x32e>
 80062ea:	e686      	b.n	8005ffa <_printf_float+0xb6>
 80062ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062f0:	f1ba 0f01 	cmp.w	sl, #1
 80062f4:	dc01      	bgt.n	80062fa <_printf_float+0x3b6>
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d536      	bpl.n	8006368 <_printf_float+0x424>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4642      	mov	r2, r8
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f ae78 	beq.w	8005ffa <_printf_float+0xb6>
 800630a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	f43f ae70 	beq.w	8005ffa <_printf_float+0xb6>
 800631a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800631e:	2200      	movs	r2, #0
 8006320:	2300      	movs	r3, #0
 8006322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006326:	f7fa fbef 	bl	8000b08 <__aeabi_dcmpeq>
 800632a:	b9c0      	cbnz	r0, 800635e <_printf_float+0x41a>
 800632c:	4653      	mov	r3, sl
 800632e:	f108 0201 	add.w	r2, r8, #1
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	d10c      	bne.n	8006356 <_printf_float+0x412>
 800633c:	e65d      	b.n	8005ffa <_printf_float+0xb6>
 800633e:	2301      	movs	r3, #1
 8006340:	465a      	mov	r2, fp
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	f43f ae56 	beq.w	8005ffa <_printf_float+0xb6>
 800634e:	f108 0801 	add.w	r8, r8, #1
 8006352:	45d0      	cmp	r8, sl
 8006354:	dbf3      	blt.n	800633e <_printf_float+0x3fa>
 8006356:	464b      	mov	r3, r9
 8006358:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800635c:	e6df      	b.n	800611e <_printf_float+0x1da>
 800635e:	f04f 0800 	mov.w	r8, #0
 8006362:	f104 0b1a 	add.w	fp, r4, #26
 8006366:	e7f4      	b.n	8006352 <_printf_float+0x40e>
 8006368:	2301      	movs	r3, #1
 800636a:	4642      	mov	r2, r8
 800636c:	e7e1      	b.n	8006332 <_printf_float+0x3ee>
 800636e:	2301      	movs	r3, #1
 8006370:	464a      	mov	r2, r9
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	f43f ae3e 	beq.w	8005ffa <_printf_float+0xb6>
 800637e:	f108 0801 	add.w	r8, r8, #1
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	4543      	cmp	r3, r8
 800638a:	dcf0      	bgt.n	800636e <_printf_float+0x42a>
 800638c:	e6fc      	b.n	8006188 <_printf_float+0x244>
 800638e:	f04f 0800 	mov.w	r8, #0
 8006392:	f104 0919 	add.w	r9, r4, #25
 8006396:	e7f4      	b.n	8006382 <_printf_float+0x43e>

08006398 <_printf_common>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	4616      	mov	r6, r2
 800639e:	4698      	mov	r8, r3
 80063a0:	688a      	ldr	r2, [r1, #8]
 80063a2:	690b      	ldr	r3, [r1, #16]
 80063a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	bfb8      	it	lt
 80063ac:	4613      	movlt	r3, r2
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063b4:	4607      	mov	r7, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	b10a      	cbz	r2, 80063be <_printf_common+0x26>
 80063ba:	3301      	adds	r3, #1
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	0699      	lsls	r1, r3, #26
 80063c2:	bf42      	ittt	mi
 80063c4:	6833      	ldrmi	r3, [r6, #0]
 80063c6:	3302      	addmi	r3, #2
 80063c8:	6033      	strmi	r3, [r6, #0]
 80063ca:	6825      	ldr	r5, [r4, #0]
 80063cc:	f015 0506 	ands.w	r5, r5, #6
 80063d0:	d106      	bne.n	80063e0 <_printf_common+0x48>
 80063d2:	f104 0a19 	add.w	sl, r4, #25
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	6832      	ldr	r2, [r6, #0]
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dc26      	bgt.n	800642e <_printf_common+0x96>
 80063e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	3b00      	subs	r3, #0
 80063e8:	bf18      	it	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	0692      	lsls	r2, r2, #26
 80063ee:	d42b      	bmi.n	8006448 <_printf_common+0xb0>
 80063f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063f4:	4641      	mov	r1, r8
 80063f6:	4638      	mov	r0, r7
 80063f8:	47c8      	blx	r9
 80063fa:	3001      	adds	r0, #1
 80063fc:	d01e      	beq.n	800643c <_printf_common+0xa4>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	f003 0306 	and.w	r3, r3, #6
 8006406:	2b04      	cmp	r3, #4
 8006408:	bf02      	ittt	eq
 800640a:	68e5      	ldreq	r5, [r4, #12]
 800640c:	6833      	ldreq	r3, [r6, #0]
 800640e:	1aed      	subeq	r5, r5, r3
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	bf0c      	ite	eq
 8006414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006418:	2500      	movne	r5, #0
 800641a:	4293      	cmp	r3, r2
 800641c:	bfc4      	itt	gt
 800641e:	1a9b      	subgt	r3, r3, r2
 8006420:	18ed      	addgt	r5, r5, r3
 8006422:	2600      	movs	r6, #0
 8006424:	341a      	adds	r4, #26
 8006426:	42b5      	cmp	r5, r6
 8006428:	d11a      	bne.n	8006460 <_printf_common+0xc8>
 800642a:	2000      	movs	r0, #0
 800642c:	e008      	b.n	8006440 <_printf_common+0xa8>
 800642e:	2301      	movs	r3, #1
 8006430:	4652      	mov	r2, sl
 8006432:	4641      	mov	r1, r8
 8006434:	4638      	mov	r0, r7
 8006436:	47c8      	blx	r9
 8006438:	3001      	adds	r0, #1
 800643a:	d103      	bne.n	8006444 <_printf_common+0xac>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	3501      	adds	r5, #1
 8006446:	e7c6      	b.n	80063d6 <_printf_common+0x3e>
 8006448:	18e1      	adds	r1, r4, r3
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	2030      	movs	r0, #48	@ 0x30
 800644e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006452:	4422      	add	r2, r4
 8006454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800645c:	3302      	adds	r3, #2
 800645e:	e7c7      	b.n	80063f0 <_printf_common+0x58>
 8006460:	2301      	movs	r3, #1
 8006462:	4622      	mov	r2, r4
 8006464:	4641      	mov	r1, r8
 8006466:	4638      	mov	r0, r7
 8006468:	47c8      	blx	r9
 800646a:	3001      	adds	r0, #1
 800646c:	d0e6      	beq.n	800643c <_printf_common+0xa4>
 800646e:	3601      	adds	r6, #1
 8006470:	e7d9      	b.n	8006426 <_printf_common+0x8e>
	...

08006474 <_printf_i>:
 8006474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	7e0f      	ldrb	r7, [r1, #24]
 800647a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800647c:	2f78      	cmp	r7, #120	@ 0x78
 800647e:	4691      	mov	r9, r2
 8006480:	4680      	mov	r8, r0
 8006482:	460c      	mov	r4, r1
 8006484:	469a      	mov	sl, r3
 8006486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800648a:	d807      	bhi.n	800649c <_printf_i+0x28>
 800648c:	2f62      	cmp	r7, #98	@ 0x62
 800648e:	d80a      	bhi.n	80064a6 <_printf_i+0x32>
 8006490:	2f00      	cmp	r7, #0
 8006492:	f000 80d2 	beq.w	800663a <_printf_i+0x1c6>
 8006496:	2f58      	cmp	r7, #88	@ 0x58
 8006498:	f000 80b9 	beq.w	800660e <_printf_i+0x19a>
 800649c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064a4:	e03a      	b.n	800651c <_printf_i+0xa8>
 80064a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064aa:	2b15      	cmp	r3, #21
 80064ac:	d8f6      	bhi.n	800649c <_printf_i+0x28>
 80064ae:	a101      	add	r1, pc, #4	@ (adr r1, 80064b4 <_printf_i+0x40>)
 80064b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b4:	0800650d 	.word	0x0800650d
 80064b8:	08006521 	.word	0x08006521
 80064bc:	0800649d 	.word	0x0800649d
 80064c0:	0800649d 	.word	0x0800649d
 80064c4:	0800649d 	.word	0x0800649d
 80064c8:	0800649d 	.word	0x0800649d
 80064cc:	08006521 	.word	0x08006521
 80064d0:	0800649d 	.word	0x0800649d
 80064d4:	0800649d 	.word	0x0800649d
 80064d8:	0800649d 	.word	0x0800649d
 80064dc:	0800649d 	.word	0x0800649d
 80064e0:	08006621 	.word	0x08006621
 80064e4:	0800654b 	.word	0x0800654b
 80064e8:	080065db 	.word	0x080065db
 80064ec:	0800649d 	.word	0x0800649d
 80064f0:	0800649d 	.word	0x0800649d
 80064f4:	08006643 	.word	0x08006643
 80064f8:	0800649d 	.word	0x0800649d
 80064fc:	0800654b 	.word	0x0800654b
 8006500:	0800649d 	.word	0x0800649d
 8006504:	0800649d 	.word	0x0800649d
 8006508:	080065e3 	.word	0x080065e3
 800650c:	6833      	ldr	r3, [r6, #0]
 800650e:	1d1a      	adds	r2, r3, #4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6032      	str	r2, [r6, #0]
 8006514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800651c:	2301      	movs	r3, #1
 800651e:	e09d      	b.n	800665c <_printf_i+0x1e8>
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	1d19      	adds	r1, r3, #4
 8006526:	6031      	str	r1, [r6, #0]
 8006528:	0606      	lsls	r6, r0, #24
 800652a:	d501      	bpl.n	8006530 <_printf_i+0xbc>
 800652c:	681d      	ldr	r5, [r3, #0]
 800652e:	e003      	b.n	8006538 <_printf_i+0xc4>
 8006530:	0645      	lsls	r5, r0, #25
 8006532:	d5fb      	bpl.n	800652c <_printf_i+0xb8>
 8006534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006538:	2d00      	cmp	r5, #0
 800653a:	da03      	bge.n	8006544 <_printf_i+0xd0>
 800653c:	232d      	movs	r3, #45	@ 0x2d
 800653e:	426d      	negs	r5, r5
 8006540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006544:	4859      	ldr	r0, [pc, #356]	@ (80066ac <_printf_i+0x238>)
 8006546:	230a      	movs	r3, #10
 8006548:	e011      	b.n	800656e <_printf_i+0xfa>
 800654a:	6821      	ldr	r1, [r4, #0]
 800654c:	6833      	ldr	r3, [r6, #0]
 800654e:	0608      	lsls	r0, r1, #24
 8006550:	f853 5b04 	ldr.w	r5, [r3], #4
 8006554:	d402      	bmi.n	800655c <_printf_i+0xe8>
 8006556:	0649      	lsls	r1, r1, #25
 8006558:	bf48      	it	mi
 800655a:	b2ad      	uxthmi	r5, r5
 800655c:	2f6f      	cmp	r7, #111	@ 0x6f
 800655e:	4853      	ldr	r0, [pc, #332]	@ (80066ac <_printf_i+0x238>)
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	bf14      	ite	ne
 8006564:	230a      	movne	r3, #10
 8006566:	2308      	moveq	r3, #8
 8006568:	2100      	movs	r1, #0
 800656a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800656e:	6866      	ldr	r6, [r4, #4]
 8006570:	60a6      	str	r6, [r4, #8]
 8006572:	2e00      	cmp	r6, #0
 8006574:	bfa2      	ittt	ge
 8006576:	6821      	ldrge	r1, [r4, #0]
 8006578:	f021 0104 	bicge.w	r1, r1, #4
 800657c:	6021      	strge	r1, [r4, #0]
 800657e:	b90d      	cbnz	r5, 8006584 <_printf_i+0x110>
 8006580:	2e00      	cmp	r6, #0
 8006582:	d04b      	beq.n	800661c <_printf_i+0x1a8>
 8006584:	4616      	mov	r6, r2
 8006586:	fbb5 f1f3 	udiv	r1, r5, r3
 800658a:	fb03 5711 	mls	r7, r3, r1, r5
 800658e:	5dc7      	ldrb	r7, [r0, r7]
 8006590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006594:	462f      	mov	r7, r5
 8006596:	42bb      	cmp	r3, r7
 8006598:	460d      	mov	r5, r1
 800659a:	d9f4      	bls.n	8006586 <_printf_i+0x112>
 800659c:	2b08      	cmp	r3, #8
 800659e:	d10b      	bne.n	80065b8 <_printf_i+0x144>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07df      	lsls	r7, r3, #31
 80065a4:	d508      	bpl.n	80065b8 <_printf_i+0x144>
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	6861      	ldr	r1, [r4, #4]
 80065aa:	4299      	cmp	r1, r3
 80065ac:	bfde      	ittt	le
 80065ae:	2330      	movle	r3, #48	@ 0x30
 80065b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065b8:	1b92      	subs	r2, r2, r6
 80065ba:	6122      	str	r2, [r4, #16]
 80065bc:	f8cd a000 	str.w	sl, [sp]
 80065c0:	464b      	mov	r3, r9
 80065c2:	aa03      	add	r2, sp, #12
 80065c4:	4621      	mov	r1, r4
 80065c6:	4640      	mov	r0, r8
 80065c8:	f7ff fee6 	bl	8006398 <_printf_common>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d14a      	bne.n	8006666 <_printf_i+0x1f2>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	b004      	add	sp, #16
 80065d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f043 0320 	orr.w	r3, r3, #32
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	4833      	ldr	r0, [pc, #204]	@ (80066b0 <_printf_i+0x23c>)
 80065e4:	2778      	movs	r7, #120	@ 0x78
 80065e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	6831      	ldr	r1, [r6, #0]
 80065ee:	061f      	lsls	r7, r3, #24
 80065f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80065f4:	d402      	bmi.n	80065fc <_printf_i+0x188>
 80065f6:	065f      	lsls	r7, r3, #25
 80065f8:	bf48      	it	mi
 80065fa:	b2ad      	uxthmi	r5, r5
 80065fc:	6031      	str	r1, [r6, #0]
 80065fe:	07d9      	lsls	r1, r3, #31
 8006600:	bf44      	itt	mi
 8006602:	f043 0320 	orrmi.w	r3, r3, #32
 8006606:	6023      	strmi	r3, [r4, #0]
 8006608:	b11d      	cbz	r5, 8006612 <_printf_i+0x19e>
 800660a:	2310      	movs	r3, #16
 800660c:	e7ac      	b.n	8006568 <_printf_i+0xf4>
 800660e:	4827      	ldr	r0, [pc, #156]	@ (80066ac <_printf_i+0x238>)
 8006610:	e7e9      	b.n	80065e6 <_printf_i+0x172>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	f023 0320 	bic.w	r3, r3, #32
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	e7f6      	b.n	800660a <_printf_i+0x196>
 800661c:	4616      	mov	r6, r2
 800661e:	e7bd      	b.n	800659c <_printf_i+0x128>
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	6825      	ldr	r5, [r4, #0]
 8006624:	6961      	ldr	r1, [r4, #20]
 8006626:	1d18      	adds	r0, r3, #4
 8006628:	6030      	str	r0, [r6, #0]
 800662a:	062e      	lsls	r6, r5, #24
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	d501      	bpl.n	8006634 <_printf_i+0x1c0>
 8006630:	6019      	str	r1, [r3, #0]
 8006632:	e002      	b.n	800663a <_printf_i+0x1c6>
 8006634:	0668      	lsls	r0, r5, #25
 8006636:	d5fb      	bpl.n	8006630 <_printf_i+0x1bc>
 8006638:	8019      	strh	r1, [r3, #0]
 800663a:	2300      	movs	r3, #0
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	4616      	mov	r6, r2
 8006640:	e7bc      	b.n	80065bc <_printf_i+0x148>
 8006642:	6833      	ldr	r3, [r6, #0]
 8006644:	1d1a      	adds	r2, r3, #4
 8006646:	6032      	str	r2, [r6, #0]
 8006648:	681e      	ldr	r6, [r3, #0]
 800664a:	6862      	ldr	r2, [r4, #4]
 800664c:	2100      	movs	r1, #0
 800664e:	4630      	mov	r0, r6
 8006650:	f7f9 fdde 	bl	8000210 <memchr>
 8006654:	b108      	cbz	r0, 800665a <_printf_i+0x1e6>
 8006656:	1b80      	subs	r0, r0, r6
 8006658:	6060      	str	r0, [r4, #4]
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	2300      	movs	r3, #0
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006664:	e7aa      	b.n	80065bc <_printf_i+0x148>
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	4632      	mov	r2, r6
 800666a:	4649      	mov	r1, r9
 800666c:	4640      	mov	r0, r8
 800666e:	47d0      	blx	sl
 8006670:	3001      	adds	r0, #1
 8006672:	d0ad      	beq.n	80065d0 <_printf_i+0x15c>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	079b      	lsls	r3, r3, #30
 8006678:	d413      	bmi.n	80066a2 <_printf_i+0x22e>
 800667a:	68e0      	ldr	r0, [r4, #12]
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	4298      	cmp	r0, r3
 8006680:	bfb8      	it	lt
 8006682:	4618      	movlt	r0, r3
 8006684:	e7a6      	b.n	80065d4 <_printf_i+0x160>
 8006686:	2301      	movs	r3, #1
 8006688:	4632      	mov	r2, r6
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d09d      	beq.n	80065d0 <_printf_i+0x15c>
 8006694:	3501      	adds	r5, #1
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	9903      	ldr	r1, [sp, #12]
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	42ab      	cmp	r3, r5
 800669e:	dcf2      	bgt.n	8006686 <_printf_i+0x212>
 80066a0:	e7eb      	b.n	800667a <_printf_i+0x206>
 80066a2:	2500      	movs	r5, #0
 80066a4:	f104 0619 	add.w	r6, r4, #25
 80066a8:	e7f5      	b.n	8006696 <_printf_i+0x222>
 80066aa:	bf00      	nop
 80066ac:	08008ada 	.word	0x08008ada
 80066b0:	08008aeb 	.word	0x08008aeb

080066b4 <std>:
 80066b4:	2300      	movs	r3, #0
 80066b6:	b510      	push	{r4, lr}
 80066b8:	4604      	mov	r4, r0
 80066ba:	e9c0 3300 	strd	r3, r3, [r0]
 80066be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066c2:	6083      	str	r3, [r0, #8]
 80066c4:	8181      	strh	r1, [r0, #12]
 80066c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80066c8:	81c2      	strh	r2, [r0, #14]
 80066ca:	6183      	str	r3, [r0, #24]
 80066cc:	4619      	mov	r1, r3
 80066ce:	2208      	movs	r2, #8
 80066d0:	305c      	adds	r0, #92	@ 0x5c
 80066d2:	f000 f914 	bl	80068fe <memset>
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <std+0x58>)
 80066d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <std+0x5c>)
 80066dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <std+0x60>)
 80066e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006718 <std+0x64>)
 80066e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <std+0x68>)
 80066e8:	6224      	str	r4, [r4, #32]
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d006      	beq.n	80066fc <std+0x48>
 80066ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066f2:	4294      	cmp	r4, r2
 80066f4:	d002      	beq.n	80066fc <std+0x48>
 80066f6:	33d0      	adds	r3, #208	@ 0xd0
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d105      	bne.n	8006708 <std+0x54>
 80066fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	f000 b978 	b.w	80069f8 <__retarget_lock_init_recursive>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	bf00      	nop
 800670c:	08006879 	.word	0x08006879
 8006710:	0800689b 	.word	0x0800689b
 8006714:	080068d3 	.word	0x080068d3
 8006718:	080068f7 	.word	0x080068f7
 800671c:	200008ac 	.word	0x200008ac

08006720 <stdio_exit_handler>:
 8006720:	4a02      	ldr	r2, [pc, #8]	@ (800672c <stdio_exit_handler+0xc>)
 8006722:	4903      	ldr	r1, [pc, #12]	@ (8006730 <stdio_exit_handler+0x10>)
 8006724:	4803      	ldr	r0, [pc, #12]	@ (8006734 <stdio_exit_handler+0x14>)
 8006726:	f000 b869 	b.w	80067fc <_fwalk_sglue>
 800672a:	bf00      	nop
 800672c:	20000020 	.word	0x20000020
 8006730:	08008355 	.word	0x08008355
 8006734:	20000030 	.word	0x20000030

08006738 <cleanup_stdio>:
 8006738:	6841      	ldr	r1, [r0, #4]
 800673a:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <cleanup_stdio+0x34>)
 800673c:	4299      	cmp	r1, r3
 800673e:	b510      	push	{r4, lr}
 8006740:	4604      	mov	r4, r0
 8006742:	d001      	beq.n	8006748 <cleanup_stdio+0x10>
 8006744:	f001 fe06 	bl	8008354 <_fflush_r>
 8006748:	68a1      	ldr	r1, [r4, #8]
 800674a:	4b09      	ldr	r3, [pc, #36]	@ (8006770 <cleanup_stdio+0x38>)
 800674c:	4299      	cmp	r1, r3
 800674e:	d002      	beq.n	8006756 <cleanup_stdio+0x1e>
 8006750:	4620      	mov	r0, r4
 8006752:	f001 fdff 	bl	8008354 <_fflush_r>
 8006756:	68e1      	ldr	r1, [r4, #12]
 8006758:	4b06      	ldr	r3, [pc, #24]	@ (8006774 <cleanup_stdio+0x3c>)
 800675a:	4299      	cmp	r1, r3
 800675c:	d004      	beq.n	8006768 <cleanup_stdio+0x30>
 800675e:	4620      	mov	r0, r4
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f001 bdf6 	b.w	8008354 <_fflush_r>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	200008ac 	.word	0x200008ac
 8006770:	20000914 	.word	0x20000914
 8006774:	2000097c 	.word	0x2000097c

08006778 <global_stdio_init.part.0>:
 8006778:	b510      	push	{r4, lr}
 800677a:	4b0b      	ldr	r3, [pc, #44]	@ (80067a8 <global_stdio_init.part.0+0x30>)
 800677c:	4c0b      	ldr	r4, [pc, #44]	@ (80067ac <global_stdio_init.part.0+0x34>)
 800677e:	4a0c      	ldr	r2, [pc, #48]	@ (80067b0 <global_stdio_init.part.0+0x38>)
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	4620      	mov	r0, r4
 8006784:	2200      	movs	r2, #0
 8006786:	2104      	movs	r1, #4
 8006788:	f7ff ff94 	bl	80066b4 <std>
 800678c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006790:	2201      	movs	r2, #1
 8006792:	2109      	movs	r1, #9
 8006794:	f7ff ff8e 	bl	80066b4 <std>
 8006798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800679c:	2202      	movs	r2, #2
 800679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a2:	2112      	movs	r1, #18
 80067a4:	f7ff bf86 	b.w	80066b4 <std>
 80067a8:	200009e4 	.word	0x200009e4
 80067ac:	200008ac 	.word	0x200008ac
 80067b0:	08006721 	.word	0x08006721

080067b4 <__sfp_lock_acquire>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__sfp_lock_acquire+0x8>)
 80067b6:	f000 b920 	b.w	80069fa <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	200009ed 	.word	0x200009ed

080067c0 <__sfp_lock_release>:
 80067c0:	4801      	ldr	r0, [pc, #4]	@ (80067c8 <__sfp_lock_release+0x8>)
 80067c2:	f000 b91b 	b.w	80069fc <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	200009ed 	.word	0x200009ed

080067cc <__sinit>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4604      	mov	r4, r0
 80067d0:	f7ff fff0 	bl	80067b4 <__sfp_lock_acquire>
 80067d4:	6a23      	ldr	r3, [r4, #32]
 80067d6:	b11b      	cbz	r3, 80067e0 <__sinit+0x14>
 80067d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067dc:	f7ff bff0 	b.w	80067c0 <__sfp_lock_release>
 80067e0:	4b04      	ldr	r3, [pc, #16]	@ (80067f4 <__sinit+0x28>)
 80067e2:	6223      	str	r3, [r4, #32]
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <__sinit+0x2c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f5      	bne.n	80067d8 <__sinit+0xc>
 80067ec:	f7ff ffc4 	bl	8006778 <global_stdio_init.part.0>
 80067f0:	e7f2      	b.n	80067d8 <__sinit+0xc>
 80067f2:	bf00      	nop
 80067f4:	08006739 	.word	0x08006739
 80067f8:	200009e4 	.word	0x200009e4

080067fc <_fwalk_sglue>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	4607      	mov	r7, r0
 8006802:	4688      	mov	r8, r1
 8006804:	4614      	mov	r4, r2
 8006806:	2600      	movs	r6, #0
 8006808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800680c:	f1b9 0901 	subs.w	r9, r9, #1
 8006810:	d505      	bpl.n	800681e <_fwalk_sglue+0x22>
 8006812:	6824      	ldr	r4, [r4, #0]
 8006814:	2c00      	cmp	r4, #0
 8006816:	d1f7      	bne.n	8006808 <_fwalk_sglue+0xc>
 8006818:	4630      	mov	r0, r6
 800681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681e:	89ab      	ldrh	r3, [r5, #12]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d907      	bls.n	8006834 <_fwalk_sglue+0x38>
 8006824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006828:	3301      	adds	r3, #1
 800682a:	d003      	beq.n	8006834 <_fwalk_sglue+0x38>
 800682c:	4629      	mov	r1, r5
 800682e:	4638      	mov	r0, r7
 8006830:	47c0      	blx	r8
 8006832:	4306      	orrs	r6, r0
 8006834:	3568      	adds	r5, #104	@ 0x68
 8006836:	e7e9      	b.n	800680c <_fwalk_sglue+0x10>

08006838 <siprintf>:
 8006838:	b40e      	push	{r1, r2, r3}
 800683a:	b500      	push	{lr}
 800683c:	b09c      	sub	sp, #112	@ 0x70
 800683e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006840:	9002      	str	r0, [sp, #8]
 8006842:	9006      	str	r0, [sp, #24]
 8006844:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006848:	4809      	ldr	r0, [pc, #36]	@ (8006870 <siprintf+0x38>)
 800684a:	9107      	str	r1, [sp, #28]
 800684c:	9104      	str	r1, [sp, #16]
 800684e:	4909      	ldr	r1, [pc, #36]	@ (8006874 <siprintf+0x3c>)
 8006850:	f853 2b04 	ldr.w	r2, [r3], #4
 8006854:	9105      	str	r1, [sp, #20]
 8006856:	6800      	ldr	r0, [r0, #0]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	a902      	add	r1, sp, #8
 800685c:	f001 fbfa 	bl	8008054 <_svfiprintf_r>
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	b01c      	add	sp, #112	@ 0x70
 8006868:	f85d eb04 	ldr.w	lr, [sp], #4
 800686c:	b003      	add	sp, #12
 800686e:	4770      	bx	lr
 8006870:	2000002c 	.word	0x2000002c
 8006874:	ffff0208 	.word	0xffff0208

08006878 <__sread>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006880:	f000 f86c 	bl	800695c <_read_r>
 8006884:	2800      	cmp	r0, #0
 8006886:	bfab      	itete	ge
 8006888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800688a:	89a3      	ldrhlt	r3, [r4, #12]
 800688c:	181b      	addge	r3, r3, r0
 800688e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006892:	bfac      	ite	ge
 8006894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006896:	81a3      	strhlt	r3, [r4, #12]
 8006898:	bd10      	pop	{r4, pc}

0800689a <__swrite>:
 800689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	461f      	mov	r7, r3
 80068a0:	898b      	ldrh	r3, [r1, #12]
 80068a2:	05db      	lsls	r3, r3, #23
 80068a4:	4605      	mov	r5, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	4616      	mov	r6, r2
 80068aa:	d505      	bpl.n	80068b8 <__swrite+0x1e>
 80068ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b0:	2302      	movs	r3, #2
 80068b2:	2200      	movs	r2, #0
 80068b4:	f000 f840 	bl	8006938 <_lseek_r>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	4628      	mov	r0, r5
 80068ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	f000 b857 	b.w	8006980 <_write_r>

080068d2 <__sseek>:
 80068d2:	b510      	push	{r4, lr}
 80068d4:	460c      	mov	r4, r1
 80068d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068da:	f000 f82d 	bl	8006938 <_lseek_r>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	bf15      	itete	ne
 80068e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068ee:	81a3      	strheq	r3, [r4, #12]
 80068f0:	bf18      	it	ne
 80068f2:	81a3      	strhne	r3, [r4, #12]
 80068f4:	bd10      	pop	{r4, pc}

080068f6 <__sclose>:
 80068f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fa:	f000 b80d 	b.w	8006918 <_close_r>

080068fe <memset>:
 80068fe:	4402      	add	r2, r0
 8006900:	4603      	mov	r3, r0
 8006902:	4293      	cmp	r3, r2
 8006904:	d100      	bne.n	8006908 <memset+0xa>
 8006906:	4770      	bx	lr
 8006908:	f803 1b01 	strb.w	r1, [r3], #1
 800690c:	e7f9      	b.n	8006902 <memset+0x4>
	...

08006910 <_localeconv_r>:
 8006910:	4800      	ldr	r0, [pc, #0]	@ (8006914 <_localeconv_r+0x4>)
 8006912:	4770      	bx	lr
 8006914:	2000016c 	.word	0x2000016c

08006918 <_close_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d06      	ldr	r5, [pc, #24]	@ (8006934 <_close_r+0x1c>)
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	4608      	mov	r0, r1
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	f7fb f97c 	bl	8001c20 <_close>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_close_r+0x1a>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_close_r+0x1a>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	200009e8 	.word	0x200009e8

08006938 <_lseek_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	@ (8006958 <_lseek_r+0x20>)
 800693c:	4604      	mov	r4, r0
 800693e:	4608      	mov	r0, r1
 8006940:	4611      	mov	r1, r2
 8006942:	2200      	movs	r2, #0
 8006944:	602a      	str	r2, [r5, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f7fb f991 	bl	8001c6e <_lseek>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_lseek_r+0x1e>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_lseek_r+0x1e>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	200009e8 	.word	0x200009e8

0800695c <_read_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d07      	ldr	r5, [pc, #28]	@ (800697c <_read_r+0x20>)
 8006960:	4604      	mov	r4, r0
 8006962:	4608      	mov	r0, r1
 8006964:	4611      	mov	r1, r2
 8006966:	2200      	movs	r2, #0
 8006968:	602a      	str	r2, [r5, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	f7fb f91f 	bl	8001bae <_read>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_read_r+0x1e>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_read_r+0x1e>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	200009e8 	.word	0x200009e8

08006980 <_write_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d07      	ldr	r5, [pc, #28]	@ (80069a0 <_write_r+0x20>)
 8006984:	4604      	mov	r4, r0
 8006986:	4608      	mov	r0, r1
 8006988:	4611      	mov	r1, r2
 800698a:	2200      	movs	r2, #0
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f7fb f92a 	bl	8001be8 <_write>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_write_r+0x1e>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_write_r+0x1e>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200009e8 	.word	0x200009e8

080069a4 <__errno>:
 80069a4:	4b01      	ldr	r3, [pc, #4]	@ (80069ac <__errno+0x8>)
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	2000002c 	.word	0x2000002c

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4d0d      	ldr	r5, [pc, #52]	@ (80069e8 <__libc_init_array+0x38>)
 80069b4:	4c0d      	ldr	r4, [pc, #52]	@ (80069ec <__libc_init_array+0x3c>)
 80069b6:	1b64      	subs	r4, r4, r5
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	2600      	movs	r6, #0
 80069bc:	42a6      	cmp	r6, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	4d0b      	ldr	r5, [pc, #44]	@ (80069f0 <__libc_init_array+0x40>)
 80069c2:	4c0c      	ldr	r4, [pc, #48]	@ (80069f4 <__libc_init_array+0x44>)
 80069c4:	f002 f864 	bl	8008a90 <_init>
 80069c8:	1b64      	subs	r4, r4, r5
 80069ca:	10a4      	asrs	r4, r4, #2
 80069cc:	2600      	movs	r6, #0
 80069ce:	42a6      	cmp	r6, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d8:	4798      	blx	r3
 80069da:	3601      	adds	r6, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e2:	4798      	blx	r3
 80069e4:	3601      	adds	r6, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	08008e40 	.word	0x08008e40
 80069ec:	08008e40 	.word	0x08008e40
 80069f0:	08008e40 	.word	0x08008e40
 80069f4:	08008e44 	.word	0x08008e44

080069f8 <__retarget_lock_init_recursive>:
 80069f8:	4770      	bx	lr

080069fa <__retarget_lock_acquire_recursive>:
 80069fa:	4770      	bx	lr

080069fc <__retarget_lock_release_recursive>:
 80069fc:	4770      	bx	lr

080069fe <quorem>:
 80069fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a02:	6903      	ldr	r3, [r0, #16]
 8006a04:	690c      	ldr	r4, [r1, #16]
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	4607      	mov	r7, r0
 8006a0a:	db7e      	blt.n	8006b0a <quorem+0x10c>
 8006a0c:	3c01      	subs	r4, #1
 8006a0e:	f101 0814 	add.w	r8, r1, #20
 8006a12:	00a3      	lsls	r3, r4, #2
 8006a14:	f100 0514 	add.w	r5, r0, #20
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a30:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a34:	d32e      	bcc.n	8006a94 <quorem+0x96>
 8006a36:	f04f 0a00 	mov.w	sl, #0
 8006a3a:	46c4      	mov	ip, r8
 8006a3c:	46ae      	mov	lr, r5
 8006a3e:	46d3      	mov	fp, sl
 8006a40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a44:	b298      	uxth	r0, r3
 8006a46:	fb06 a000 	mla	r0, r6, r0, sl
 8006a4a:	0c02      	lsrs	r2, r0, #16
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	fb06 2303 	mla	r3, r6, r3, r2
 8006a52:	f8de 2000 	ldr.w	r2, [lr]
 8006a56:	b280      	uxth	r0, r0
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	1a12      	subs	r2, r2, r0
 8006a5c:	445a      	add	r2, fp
 8006a5e:	f8de 0000 	ldr.w	r0, [lr]
 8006a62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a70:	b292      	uxth	r2, r2
 8006a72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a76:	45e1      	cmp	r9, ip
 8006a78:	f84e 2b04 	str.w	r2, [lr], #4
 8006a7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a80:	d2de      	bcs.n	8006a40 <quorem+0x42>
 8006a82:	9b00      	ldr	r3, [sp, #0]
 8006a84:	58eb      	ldr	r3, [r5, r3]
 8006a86:	b92b      	cbnz	r3, 8006a94 <quorem+0x96>
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	3b04      	subs	r3, #4
 8006a8c:	429d      	cmp	r5, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	d32f      	bcc.n	8006af2 <quorem+0xf4>
 8006a92:	613c      	str	r4, [r7, #16]
 8006a94:	4638      	mov	r0, r7
 8006a96:	f001 f979 	bl	8007d8c <__mcmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	db25      	blt.n	8006aea <quorem+0xec>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006aa6:	f8d1 c000 	ldr.w	ip, [r1]
 8006aaa:	fa1f fe82 	uxth.w	lr, r2
 8006aae:	fa1f f38c 	uxth.w	r3, ip
 8006ab2:	eba3 030e 	sub.w	r3, r3, lr
 8006ab6:	4403      	add	r3, r0
 8006ab8:	0c12      	lsrs	r2, r2, #16
 8006aba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006abe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac8:	45c1      	cmp	r9, r8
 8006aca:	f841 3b04 	str.w	r3, [r1], #4
 8006ace:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ad2:	d2e6      	bcs.n	8006aa2 <quorem+0xa4>
 8006ad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006adc:	b922      	cbnz	r2, 8006ae8 <quorem+0xea>
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	429d      	cmp	r5, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	d30b      	bcc.n	8006afe <quorem+0x100>
 8006ae6:	613c      	str	r4, [r7, #16]
 8006ae8:	3601      	adds	r6, #1
 8006aea:	4630      	mov	r0, r6
 8006aec:	b003      	add	sp, #12
 8006aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	3b04      	subs	r3, #4
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	d1cb      	bne.n	8006a92 <quorem+0x94>
 8006afa:	3c01      	subs	r4, #1
 8006afc:	e7c6      	b.n	8006a8c <quorem+0x8e>
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	3b04      	subs	r3, #4
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d1ef      	bne.n	8006ae6 <quorem+0xe8>
 8006b06:	3c01      	subs	r4, #1
 8006b08:	e7ea      	b.n	8006ae0 <quorem+0xe2>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e7ee      	b.n	8006aec <quorem+0xee>
	...

08006b10 <_dtoa_r>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	69c7      	ldr	r7, [r0, #28]
 8006b16:	b099      	sub	sp, #100	@ 0x64
 8006b18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b1c:	ec55 4b10 	vmov	r4, r5, d0
 8006b20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b24:	4683      	mov	fp, r0
 8006b26:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b2a:	b97f      	cbnz	r7, 8006b4c <_dtoa_r+0x3c>
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	f000 fdfd 	bl	800772c <malloc>
 8006b32:	4602      	mov	r2, r0
 8006b34:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b38:	b920      	cbnz	r0, 8006b44 <_dtoa_r+0x34>
 8006b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8006dd8 <_dtoa_r+0x2c8>)
 8006b3c:	21ef      	movs	r1, #239	@ 0xef
 8006b3e:	48a7      	ldr	r0, [pc, #668]	@ (8006ddc <_dtoa_r+0x2cc>)
 8006b40:	f001 fc68 	bl	8008414 <__assert_func>
 8006b44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b48:	6007      	str	r7, [r0, #0]
 8006b4a:	60c7      	str	r7, [r0, #12]
 8006b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	b159      	cbz	r1, 8006b6c <_dtoa_r+0x5c>
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	604a      	str	r2, [r1, #4]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4093      	lsls	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 feda 	bl	8007918 <_Bfree>
 8006b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	1e2b      	subs	r3, r5, #0
 8006b6e:	bfb9      	ittee	lt
 8006b70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b74:	9303      	strlt	r3, [sp, #12]
 8006b76:	2300      	movge	r3, #0
 8006b78:	6033      	strge	r3, [r6, #0]
 8006b7a:	9f03      	ldr	r7, [sp, #12]
 8006b7c:	4b98      	ldr	r3, [pc, #608]	@ (8006de0 <_dtoa_r+0x2d0>)
 8006b7e:	bfbc      	itt	lt
 8006b80:	2201      	movlt	r2, #1
 8006b82:	6032      	strlt	r2, [r6, #0]
 8006b84:	43bb      	bics	r3, r7
 8006b86:	d112      	bne.n	8006bae <_dtoa_r+0x9e>
 8006b88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b94:	4323      	orrs	r3, r4
 8006b96:	f000 854d 	beq.w	8007634 <_dtoa_r+0xb24>
 8006b9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006df4 <_dtoa_r+0x2e4>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 854f 	beq.w	8007644 <_dtoa_r+0xb34>
 8006ba6:	f10a 0303 	add.w	r3, sl, #3
 8006baa:	f000 bd49 	b.w	8007640 <_dtoa_r+0xb30>
 8006bae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	ec51 0b17 	vmov	r0, r1, d7
 8006bb8:	2300      	movs	r3, #0
 8006bba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006bbe:	f7f9 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	b158      	cbz	r0, 8006bde <_dtoa_r+0xce>
 8006bc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006bc8:	2301      	movs	r3, #1
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bce:	b113      	cbz	r3, 8006bd6 <_dtoa_r+0xc6>
 8006bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006bd2:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <_dtoa_r+0x2d4>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006df8 <_dtoa_r+0x2e8>
 8006bda:	f000 bd33 	b.w	8007644 <_dtoa_r+0xb34>
 8006bde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006be2:	aa16      	add	r2, sp, #88	@ 0x58
 8006be4:	a917      	add	r1, sp, #92	@ 0x5c
 8006be6:	4658      	mov	r0, fp
 8006be8:	f001 f980 	bl	8007eec <__d2b>
 8006bec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	2e00      	cmp	r6, #0
 8006bf4:	d077      	beq.n	8006ce6 <_dtoa_r+0x1d6>
 8006bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c10:	4619      	mov	r1, r3
 8006c12:	2200      	movs	r2, #0
 8006c14:	4b74      	ldr	r3, [pc, #464]	@ (8006de8 <_dtoa_r+0x2d8>)
 8006c16:	f7f9 fb57 	bl	80002c8 <__aeabi_dsub>
 8006c1a:	a369      	add	r3, pc, #420	@ (adr r3, 8006dc0 <_dtoa_r+0x2b0>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fd0a 	bl	8000638 <__aeabi_dmul>
 8006c24:	a368      	add	r3, pc, #416	@ (adr r3, 8006dc8 <_dtoa_r+0x2b8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fb4f 	bl	80002cc <__adddf3>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4630      	mov	r0, r6
 8006c32:	460d      	mov	r5, r1
 8006c34:	f7f9 fc96 	bl	8000564 <__aeabi_i2d>
 8006c38:	a365      	add	r3, pc, #404	@ (adr r3, 8006dd0 <_dtoa_r+0x2c0>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fcfb 	bl	8000638 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fb3f 	bl	80002cc <__adddf3>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	f7f9 ffa1 	bl	8000b98 <__aeabi_d2iz>
 8006c56:	2200      	movs	r2, #0
 8006c58:	4607      	mov	r7, r0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 8006c64:	b140      	cbz	r0, 8006c78 <_dtoa_r+0x168>
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7f9 fc7c 	bl	8000564 <__aeabi_i2d>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	f7f9 ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8006c74:	b900      	cbnz	r0, 8006c78 <_dtoa_r+0x168>
 8006c76:	3f01      	subs	r7, #1
 8006c78:	2f16      	cmp	r7, #22
 8006c7a:	d851      	bhi.n	8006d20 <_dtoa_r+0x210>
 8006c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006dec <_dtoa_r+0x2dc>)
 8006c7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c8a:	f7f9 ff47 	bl	8000b1c <__aeabi_dcmplt>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d048      	beq.n	8006d24 <_dtoa_r+0x214>
 8006c92:	3f01      	subs	r7, #1
 8006c94:	2300      	movs	r3, #0
 8006c96:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c9a:	1b9b      	subs	r3, r3, r6
 8006c9c:	1e5a      	subs	r2, r3, #1
 8006c9e:	bf44      	itt	mi
 8006ca0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ca4:	2300      	movmi	r3, #0
 8006ca6:	9208      	str	r2, [sp, #32]
 8006ca8:	bf54      	ite	pl
 8006caa:	f04f 0800 	movpl.w	r8, #0
 8006cae:	9308      	strmi	r3, [sp, #32]
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	db39      	blt.n	8006d28 <_dtoa_r+0x218>
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006cb8:	443b      	add	r3, r7
 8006cba:	9308      	str	r3, [sp, #32]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d864      	bhi.n	8006d90 <_dtoa_r+0x280>
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	bfc4      	itt	gt
 8006cca:	3b04      	subgt	r3, #4
 8006ccc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006cd4:	bfcc      	ite	gt
 8006cd6:	2400      	movgt	r4, #0
 8006cd8:	2401      	movle	r4, #1
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d863      	bhi.n	8006da6 <_dtoa_r+0x296>
 8006cde:	e8df f003 	tbb	[pc, r3]
 8006ce2:	372a      	.short	0x372a
 8006ce4:	5535      	.short	0x5535
 8006ce6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006cea:	441e      	add	r6, r3
 8006cec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	bfc1      	itttt	gt
 8006cf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cf8:	409f      	lslgt	r7, r3
 8006cfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d02:	bfd6      	itet	le
 8006d04:	f1c3 0320 	rsble	r3, r3, #32
 8006d08:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d0c:	fa04 f003 	lslle.w	r0, r4, r3
 8006d10:	f7f9 fc18 	bl	8000544 <__aeabi_ui2d>
 8006d14:	2201      	movs	r2, #1
 8006d16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d1a:	3e01      	subs	r6, #1
 8006d1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d1e:	e777      	b.n	8006c10 <_dtoa_r+0x100>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7b8      	b.n	8006c96 <_dtoa_r+0x186>
 8006d24:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d26:	e7b7      	b.n	8006c98 <_dtoa_r+0x188>
 8006d28:	427b      	negs	r3, r7
 8006d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	eba8 0807 	sub.w	r8, r8, r7
 8006d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d34:	e7c4      	b.n	8006cc0 <_dtoa_r+0x1b0>
 8006d36:	2300      	movs	r3, #0
 8006d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dc35      	bgt.n	8006dac <_dtoa_r+0x29c>
 8006d40:	2301      	movs	r3, #1
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	9307      	str	r3, [sp, #28]
 8006d46:	461a      	mov	r2, r3
 8006d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d4a:	e00b      	b.n	8006d64 <_dtoa_r+0x254>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e7f3      	b.n	8006d38 <_dtoa_r+0x228>
 8006d50:	2300      	movs	r3, #0
 8006d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	bfb8      	it	lt
 8006d62:	2301      	movlt	r3, #1
 8006d64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	f102 0514 	add.w	r5, r2, #20
 8006d70:	429d      	cmp	r5, r3
 8006d72:	d91f      	bls.n	8006db4 <_dtoa_r+0x2a4>
 8006d74:	6041      	str	r1, [r0, #4]
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 fd8e 	bl	8007898 <_Balloc>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d13c      	bne.n	8006dfc <_dtoa_r+0x2ec>
 8006d82:	4b1b      	ldr	r3, [pc, #108]	@ (8006df0 <_dtoa_r+0x2e0>)
 8006d84:	4602      	mov	r2, r0
 8006d86:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d8a:	e6d8      	b.n	8006b3e <_dtoa_r+0x2e>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e7e0      	b.n	8006d52 <_dtoa_r+0x242>
 8006d90:	2401      	movs	r4, #1
 8006d92:	2300      	movs	r3, #0
 8006d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2312      	movs	r3, #18
 8006da4:	e7d0      	b.n	8006d48 <_dtoa_r+0x238>
 8006da6:	2301      	movs	r3, #1
 8006da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006daa:	e7f5      	b.n	8006d98 <_dtoa_r+0x288>
 8006dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	e7d7      	b.n	8006d64 <_dtoa_r+0x254>
 8006db4:	3101      	adds	r1, #1
 8006db6:	0052      	lsls	r2, r2, #1
 8006db8:	e7d8      	b.n	8006d6c <_dtoa_r+0x25c>
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w
 8006dc0:	636f4361 	.word	0x636f4361
 8006dc4:	3fd287a7 	.word	0x3fd287a7
 8006dc8:	8b60c8b3 	.word	0x8b60c8b3
 8006dcc:	3fc68a28 	.word	0x3fc68a28
 8006dd0:	509f79fb 	.word	0x509f79fb
 8006dd4:	3fd34413 	.word	0x3fd34413
 8006dd8:	08008b09 	.word	0x08008b09
 8006ddc:	08008b20 	.word	0x08008b20
 8006de0:	7ff00000 	.word	0x7ff00000
 8006de4:	08008ad9 	.word	0x08008ad9
 8006de8:	3ff80000 	.word	0x3ff80000
 8006dec:	08008c18 	.word	0x08008c18
 8006df0:	08008b78 	.word	0x08008b78
 8006df4:	08008b05 	.word	0x08008b05
 8006df8:	08008ad8 	.word	0x08008ad8
 8006dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e00:	6018      	str	r0, [r3, #0]
 8006e02:	9b07      	ldr	r3, [sp, #28]
 8006e04:	2b0e      	cmp	r3, #14
 8006e06:	f200 80a4 	bhi.w	8006f52 <_dtoa_r+0x442>
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	f000 80a1 	beq.w	8006f52 <_dtoa_r+0x442>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	dd33      	ble.n	8006e7c <_dtoa_r+0x36c>
 8006e14:	4bad      	ldr	r3, [pc, #692]	@ (80070cc <_dtoa_r+0x5bc>)
 8006e16:	f007 020f 	and.w	r2, r7, #15
 8006e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e1e:	ed93 7b00 	vldr	d7, [r3]
 8006e22:	05f8      	lsls	r0, r7, #23
 8006e24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e2c:	d516      	bpl.n	8006e5c <_dtoa_r+0x34c>
 8006e2e:	4ba8      	ldr	r3, [pc, #672]	@ (80070d0 <_dtoa_r+0x5c0>)
 8006e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e38:	f7f9 fd28 	bl	800088c <__aeabi_ddiv>
 8006e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e40:	f004 040f 	and.w	r4, r4, #15
 8006e44:	2603      	movs	r6, #3
 8006e46:	4da2      	ldr	r5, [pc, #648]	@ (80070d0 <_dtoa_r+0x5c0>)
 8006e48:	b954      	cbnz	r4, 8006e60 <_dtoa_r+0x350>
 8006e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e52:	f7f9 fd1b 	bl	800088c <__aeabi_ddiv>
 8006e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5a:	e028      	b.n	8006eae <_dtoa_r+0x39e>
 8006e5c:	2602      	movs	r6, #2
 8006e5e:	e7f2      	b.n	8006e46 <_dtoa_r+0x336>
 8006e60:	07e1      	lsls	r1, r4, #31
 8006e62:	d508      	bpl.n	8006e76 <_dtoa_r+0x366>
 8006e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e6c:	f7f9 fbe4 	bl	8000638 <__aeabi_dmul>
 8006e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e74:	3601      	adds	r6, #1
 8006e76:	1064      	asrs	r4, r4, #1
 8006e78:	3508      	adds	r5, #8
 8006e7a:	e7e5      	b.n	8006e48 <_dtoa_r+0x338>
 8006e7c:	f000 80d2 	beq.w	8007024 <_dtoa_r+0x514>
 8006e80:	427c      	negs	r4, r7
 8006e82:	4b92      	ldr	r3, [pc, #584]	@ (80070cc <_dtoa_r+0x5bc>)
 8006e84:	4d92      	ldr	r5, [pc, #584]	@ (80070d0 <_dtoa_r+0x5c0>)
 8006e86:	f004 020f 	and.w	r2, r4, #15
 8006e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e96:	f7f9 fbcf 	bl	8000638 <__aeabi_dmul>
 8006e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e9e:	1124      	asrs	r4, r4, #4
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2602      	movs	r6, #2
 8006ea4:	2c00      	cmp	r4, #0
 8006ea6:	f040 80b2 	bne.w	800700e <_dtoa_r+0x4fe>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d3      	bne.n	8006e56 <_dtoa_r+0x346>
 8006eae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006eb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80b7 	beq.w	8007028 <_dtoa_r+0x518>
 8006eba:	4b86      	ldr	r3, [pc, #536]	@ (80070d4 <_dtoa_r+0x5c4>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f000 80ae 	beq.w	8007028 <_dtoa_r+0x518>
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80aa 	beq.w	8007028 <_dtoa_r+0x518>
 8006ed4:	9b00      	ldr	r3, [sp, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd37      	ble.n	8006f4a <_dtoa_r+0x43a>
 8006eda:	1e7b      	subs	r3, r7, #1
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80070d8 <_dtoa_r+0x5c8>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f7f9 fba7 	bl	8000638 <__aeabi_dmul>
 8006eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eee:	9c00      	ldr	r4, [sp, #0]
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7f9 fb36 	bl	8000564 <__aeabi_i2d>
 8006ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006efc:	f7f9 fb9c 	bl	8000638 <__aeabi_dmul>
 8006f00:	4b76      	ldr	r3, [pc, #472]	@ (80070dc <_dtoa_r+0x5cc>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	f7f9 f9e2 	bl	80002cc <__adddf3>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f0e:	2c00      	cmp	r4, #0
 8006f10:	f040 808d 	bne.w	800702e <_dtoa_r+0x51e>
 8006f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f18:	4b71      	ldr	r3, [pc, #452]	@ (80070e0 <_dtoa_r+0x5d0>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f7f9 f9d4 	bl	80002c8 <__aeabi_dsub>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4633      	mov	r3, r6
 8006f2c:	f7f9 fe14 	bl	8000b58 <__aeabi_dcmpgt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f040 828b 	bne.w	800744c <_dtoa_r+0x93c>
 8006f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f40:	f7f9 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f040 8128 	bne.w	800719a <_dtoa_r+0x68a>
 8006f4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f2c0 815a 	blt.w	800720e <_dtoa_r+0x6fe>
 8006f5a:	2f0e      	cmp	r7, #14
 8006f5c:	f300 8157 	bgt.w	800720e <_dtoa_r+0x6fe>
 8006f60:	4b5a      	ldr	r3, [pc, #360]	@ (80070cc <_dtoa_r+0x5bc>)
 8006f62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f66:	ed93 7b00 	vldr	d7, [r3]
 8006f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	ed8d 7b00 	vstr	d7, [sp]
 8006f72:	da03      	bge.n	8006f7c <_dtoa_r+0x46c>
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f340 8101 	ble.w	800717e <_dtoa_r+0x66e>
 8006f7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f80:	4656      	mov	r6, sl
 8006f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 fc7f 	bl	800088c <__aeabi_ddiv>
 8006f8e:	f7f9 fe03 	bl	8000b98 <__aeabi_d2iz>
 8006f92:	4680      	mov	r8, r0
 8006f94:	f7f9 fae6 	bl	8000564 <__aeabi_i2d>
 8006f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9c:	f7f9 fb4c 	bl	8000638 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006fac:	f7f9 f98c 	bl	80002c8 <__aeabi_dsub>
 8006fb0:	f806 4b01 	strb.w	r4, [r6], #1
 8006fb4:	9d07      	ldr	r5, [sp, #28]
 8006fb6:	eba6 040a 	sub.w	r4, r6, sl
 8006fba:	42a5      	cmp	r5, r4
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	f040 8117 	bne.w	80071f2 <_dtoa_r+0x6e2>
 8006fc4:	f7f9 f982 	bl	80002cc <__adddf3>
 8006fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fcc:	4604      	mov	r4, r0
 8006fce:	460d      	mov	r5, r1
 8006fd0:	f7f9 fdc2 	bl	8000b58 <__aeabi_dcmpgt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f040 80f9 	bne.w	80071cc <_dtoa_r+0x6bc>
 8006fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fd91 	bl	8000b08 <__aeabi_dcmpeq>
 8006fe6:	b118      	cbz	r0, 8006ff0 <_dtoa_r+0x4e0>
 8006fe8:	f018 0f01 	tst.w	r8, #1
 8006fec:	f040 80ee 	bne.w	80071cc <_dtoa_r+0x6bc>
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4658      	mov	r0, fp
 8006ff4:	f000 fc90 	bl	8007918 <_Bfree>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	7033      	strb	r3, [r6, #0]
 8006ffc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ffe:	3701      	adds	r7, #1
 8007000:	601f      	str	r7, [r3, #0]
 8007002:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 831d 	beq.w	8007644 <_dtoa_r+0xb34>
 800700a:	601e      	str	r6, [r3, #0]
 800700c:	e31a      	b.n	8007644 <_dtoa_r+0xb34>
 800700e:	07e2      	lsls	r2, r4, #31
 8007010:	d505      	bpl.n	800701e <_dtoa_r+0x50e>
 8007012:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007016:	f7f9 fb0f 	bl	8000638 <__aeabi_dmul>
 800701a:	3601      	adds	r6, #1
 800701c:	2301      	movs	r3, #1
 800701e:	1064      	asrs	r4, r4, #1
 8007020:	3508      	adds	r5, #8
 8007022:	e73f      	b.n	8006ea4 <_dtoa_r+0x394>
 8007024:	2602      	movs	r6, #2
 8007026:	e742      	b.n	8006eae <_dtoa_r+0x39e>
 8007028:	9c07      	ldr	r4, [sp, #28]
 800702a:	9704      	str	r7, [sp, #16]
 800702c:	e761      	b.n	8006ef2 <_dtoa_r+0x3e2>
 800702e:	4b27      	ldr	r3, [pc, #156]	@ (80070cc <_dtoa_r+0x5bc>)
 8007030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007036:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800703a:	4454      	add	r4, sl
 800703c:	2900      	cmp	r1, #0
 800703e:	d053      	beq.n	80070e8 <_dtoa_r+0x5d8>
 8007040:	4928      	ldr	r1, [pc, #160]	@ (80070e4 <_dtoa_r+0x5d4>)
 8007042:	2000      	movs	r0, #0
 8007044:	f7f9 fc22 	bl	800088c <__aeabi_ddiv>
 8007048:	4633      	mov	r3, r6
 800704a:	462a      	mov	r2, r5
 800704c:	f7f9 f93c 	bl	80002c8 <__aeabi_dsub>
 8007050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007054:	4656      	mov	r6, sl
 8007056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705a:	f7f9 fd9d 	bl	8000b98 <__aeabi_d2iz>
 800705e:	4605      	mov	r5, r0
 8007060:	f7f9 fa80 	bl	8000564 <__aeabi_i2d>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706c:	f7f9 f92c 	bl	80002c8 <__aeabi_dsub>
 8007070:	3530      	adds	r5, #48	@ 0x30
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800707a:	f806 5b01 	strb.w	r5, [r6], #1
 800707e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007082:	f7f9 fd4b 	bl	8000b1c <__aeabi_dcmplt>
 8007086:	2800      	cmp	r0, #0
 8007088:	d171      	bne.n	800716e <_dtoa_r+0x65e>
 800708a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708e:	4911      	ldr	r1, [pc, #68]	@ (80070d4 <_dtoa_r+0x5c4>)
 8007090:	2000      	movs	r0, #0
 8007092:	f7f9 f919 	bl	80002c8 <__aeabi_dsub>
 8007096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800709a:	f7f9 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f040 8095 	bne.w	80071ce <_dtoa_r+0x6be>
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	f43f af50 	beq.w	8006f4a <_dtoa_r+0x43a>
 80070aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070ae:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <_dtoa_r+0x5c8>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	f7f9 fac1 	bl	8000638 <__aeabi_dmul>
 80070b6:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <_dtoa_r+0x5c8>)
 80070b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070bc:	2200      	movs	r2, #0
 80070be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c2:	f7f9 fab9 	bl	8000638 <__aeabi_dmul>
 80070c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ca:	e7c4      	b.n	8007056 <_dtoa_r+0x546>
 80070cc:	08008c18 	.word	0x08008c18
 80070d0:	08008bf0 	.word	0x08008bf0
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	40240000 	.word	0x40240000
 80070dc:	401c0000 	.word	0x401c0000
 80070e0:	40140000 	.word	0x40140000
 80070e4:	3fe00000 	.word	0x3fe00000
 80070e8:	4631      	mov	r1, r6
 80070ea:	4628      	mov	r0, r5
 80070ec:	f7f9 faa4 	bl	8000638 <__aeabi_dmul>
 80070f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80070f6:	4656      	mov	r6, sl
 80070f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070fc:	f7f9 fd4c 	bl	8000b98 <__aeabi_d2iz>
 8007100:	4605      	mov	r5, r0
 8007102:	f7f9 fa2f 	bl	8000564 <__aeabi_i2d>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710e:	f7f9 f8db 	bl	80002c8 <__aeabi_dsub>
 8007112:	3530      	adds	r5, #48	@ 0x30
 8007114:	f806 5b01 	strb.w	r5, [r6], #1
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	42a6      	cmp	r6, r4
 800711e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	d124      	bne.n	8007172 <_dtoa_r+0x662>
 8007128:	4bac      	ldr	r3, [pc, #688]	@ (80073dc <_dtoa_r+0x8cc>)
 800712a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800712e:	f7f9 f8cd 	bl	80002cc <__adddf3>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800713a:	f7f9 fd0d 	bl	8000b58 <__aeabi_dcmpgt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d145      	bne.n	80071ce <_dtoa_r+0x6be>
 8007142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007146:	49a5      	ldr	r1, [pc, #660]	@ (80073dc <_dtoa_r+0x8cc>)
 8007148:	2000      	movs	r0, #0
 800714a:	f7f9 f8bd 	bl	80002c8 <__aeabi_dsub>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007156:	f7f9 fce1 	bl	8000b1c <__aeabi_dcmplt>
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aef5 	beq.w	8006f4a <_dtoa_r+0x43a>
 8007160:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007162:	1e73      	subs	r3, r6, #1
 8007164:	9315      	str	r3, [sp, #84]	@ 0x54
 8007166:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800716a:	2b30      	cmp	r3, #48	@ 0x30
 800716c:	d0f8      	beq.n	8007160 <_dtoa_r+0x650>
 800716e:	9f04      	ldr	r7, [sp, #16]
 8007170:	e73e      	b.n	8006ff0 <_dtoa_r+0x4e0>
 8007172:	4b9b      	ldr	r3, [pc, #620]	@ (80073e0 <_dtoa_r+0x8d0>)
 8007174:	f7f9 fa60 	bl	8000638 <__aeabi_dmul>
 8007178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800717c:	e7bc      	b.n	80070f8 <_dtoa_r+0x5e8>
 800717e:	d10c      	bne.n	800719a <_dtoa_r+0x68a>
 8007180:	4b98      	ldr	r3, [pc, #608]	@ (80073e4 <_dtoa_r+0x8d4>)
 8007182:	2200      	movs	r2, #0
 8007184:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007188:	f7f9 fa56 	bl	8000638 <__aeabi_dmul>
 800718c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007190:	f7f9 fcd8 	bl	8000b44 <__aeabi_dcmpge>
 8007194:	2800      	cmp	r0, #0
 8007196:	f000 8157 	beq.w	8007448 <_dtoa_r+0x938>
 800719a:	2400      	movs	r4, #0
 800719c:	4625      	mov	r5, r4
 800719e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071a0:	43db      	mvns	r3, r3
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	4656      	mov	r6, sl
 80071a6:	2700      	movs	r7, #0
 80071a8:	4621      	mov	r1, r4
 80071aa:	4658      	mov	r0, fp
 80071ac:	f000 fbb4 	bl	8007918 <_Bfree>
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	d0dc      	beq.n	800716e <_dtoa_r+0x65e>
 80071b4:	b12f      	cbz	r7, 80071c2 <_dtoa_r+0x6b2>
 80071b6:	42af      	cmp	r7, r5
 80071b8:	d003      	beq.n	80071c2 <_dtoa_r+0x6b2>
 80071ba:	4639      	mov	r1, r7
 80071bc:	4658      	mov	r0, fp
 80071be:	f000 fbab 	bl	8007918 <_Bfree>
 80071c2:	4629      	mov	r1, r5
 80071c4:	4658      	mov	r0, fp
 80071c6:	f000 fba7 	bl	8007918 <_Bfree>
 80071ca:	e7d0      	b.n	800716e <_dtoa_r+0x65e>
 80071cc:	9704      	str	r7, [sp, #16]
 80071ce:	4633      	mov	r3, r6
 80071d0:	461e      	mov	r6, r3
 80071d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071d6:	2a39      	cmp	r2, #57	@ 0x39
 80071d8:	d107      	bne.n	80071ea <_dtoa_r+0x6da>
 80071da:	459a      	cmp	sl, r3
 80071dc:	d1f8      	bne.n	80071d0 <_dtoa_r+0x6c0>
 80071de:	9a04      	ldr	r2, [sp, #16]
 80071e0:	3201      	adds	r2, #1
 80071e2:	9204      	str	r2, [sp, #16]
 80071e4:	2230      	movs	r2, #48	@ 0x30
 80071e6:	f88a 2000 	strb.w	r2, [sl]
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	3201      	adds	r2, #1
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e7bd      	b.n	800716e <_dtoa_r+0x65e>
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <_dtoa_r+0x8d0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	f7f9 fa1f 	bl	8000638 <__aeabi_dmul>
 80071fa:	2200      	movs	r2, #0
 80071fc:	2300      	movs	r3, #0
 80071fe:	4604      	mov	r4, r0
 8007200:	460d      	mov	r5, r1
 8007202:	f7f9 fc81 	bl	8000b08 <__aeabi_dcmpeq>
 8007206:	2800      	cmp	r0, #0
 8007208:	f43f aebb 	beq.w	8006f82 <_dtoa_r+0x472>
 800720c:	e6f0      	b.n	8006ff0 <_dtoa_r+0x4e0>
 800720e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007210:	2a00      	cmp	r2, #0
 8007212:	f000 80db 	beq.w	80073cc <_dtoa_r+0x8bc>
 8007216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007218:	2a01      	cmp	r2, #1
 800721a:	f300 80bf 	bgt.w	800739c <_dtoa_r+0x88c>
 800721e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007220:	2a00      	cmp	r2, #0
 8007222:	f000 80b7 	beq.w	8007394 <_dtoa_r+0x884>
 8007226:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800722a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800722c:	4646      	mov	r6, r8
 800722e:	9a08      	ldr	r2, [sp, #32]
 8007230:	2101      	movs	r1, #1
 8007232:	441a      	add	r2, r3
 8007234:	4658      	mov	r0, fp
 8007236:	4498      	add	r8, r3
 8007238:	9208      	str	r2, [sp, #32]
 800723a:	f000 fc21 	bl	8007a80 <__i2b>
 800723e:	4605      	mov	r5, r0
 8007240:	b15e      	cbz	r6, 800725a <_dtoa_r+0x74a>
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd08      	ble.n	800725a <_dtoa_r+0x74a>
 8007248:	42b3      	cmp	r3, r6
 800724a:	9a08      	ldr	r2, [sp, #32]
 800724c:	bfa8      	it	ge
 800724e:	4633      	movge	r3, r6
 8007250:	eba8 0803 	sub.w	r8, r8, r3
 8007254:	1af6      	subs	r6, r6, r3
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	9308      	str	r3, [sp, #32]
 800725a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800725c:	b1f3      	cbz	r3, 800729c <_dtoa_r+0x78c>
 800725e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80b7 	beq.w	80073d4 <_dtoa_r+0x8c4>
 8007266:	b18c      	cbz	r4, 800728c <_dtoa_r+0x77c>
 8007268:	4629      	mov	r1, r5
 800726a:	4622      	mov	r2, r4
 800726c:	4658      	mov	r0, fp
 800726e:	f000 fcc7 	bl	8007c00 <__pow5mult>
 8007272:	464a      	mov	r2, r9
 8007274:	4601      	mov	r1, r0
 8007276:	4605      	mov	r5, r0
 8007278:	4658      	mov	r0, fp
 800727a:	f000 fc17 	bl	8007aac <__multiply>
 800727e:	4649      	mov	r1, r9
 8007280:	9004      	str	r0, [sp, #16]
 8007282:	4658      	mov	r0, fp
 8007284:	f000 fb48 	bl	8007918 <_Bfree>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	4699      	mov	r9, r3
 800728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728e:	1b1a      	subs	r2, r3, r4
 8007290:	d004      	beq.n	800729c <_dtoa_r+0x78c>
 8007292:	4649      	mov	r1, r9
 8007294:	4658      	mov	r0, fp
 8007296:	f000 fcb3 	bl	8007c00 <__pow5mult>
 800729a:	4681      	mov	r9, r0
 800729c:	2101      	movs	r1, #1
 800729e:	4658      	mov	r0, fp
 80072a0:	f000 fbee 	bl	8007a80 <__i2b>
 80072a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072a6:	4604      	mov	r4, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 81cf 	beq.w	800764c <_dtoa_r+0xb3c>
 80072ae:	461a      	mov	r2, r3
 80072b0:	4601      	mov	r1, r0
 80072b2:	4658      	mov	r0, fp
 80072b4:	f000 fca4 	bl	8007c00 <__pow5mult>
 80072b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	4604      	mov	r4, r0
 80072be:	f300 8095 	bgt.w	80073ec <_dtoa_r+0x8dc>
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8087 	bne.w	80073d8 <_dtoa_r+0x8c8>
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 8089 	bne.w	80073e8 <_dtoa_r+0x8d8>
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072dc:	0d1b      	lsrs	r3, r3, #20
 80072de:	051b      	lsls	r3, r3, #20
 80072e0:	b12b      	cbz	r3, 80072ee <_dtoa_r+0x7de>
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	3301      	adds	r3, #1
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	f108 0801 	add.w	r8, r8, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 81b0 	beq.w	8007658 <_dtoa_r+0xb48>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072fe:	6918      	ldr	r0, [r3, #16]
 8007300:	f000 fb72 	bl	80079e8 <__hi0bits>
 8007304:	f1c0 0020 	rsb	r0, r0, #32
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	4418      	add	r0, r3
 800730c:	f010 001f 	ands.w	r0, r0, #31
 8007310:	d077      	beq.n	8007402 <_dtoa_r+0x8f2>
 8007312:	f1c0 0320 	rsb	r3, r0, #32
 8007316:	2b04      	cmp	r3, #4
 8007318:	dd6b      	ble.n	80073f2 <_dtoa_r+0x8e2>
 800731a:	9b08      	ldr	r3, [sp, #32]
 800731c:	f1c0 001c 	rsb	r0, r0, #28
 8007320:	4403      	add	r3, r0
 8007322:	4480      	add	r8, r0
 8007324:	4406      	add	r6, r0
 8007326:	9308      	str	r3, [sp, #32]
 8007328:	f1b8 0f00 	cmp.w	r8, #0
 800732c:	dd05      	ble.n	800733a <_dtoa_r+0x82a>
 800732e:	4649      	mov	r1, r9
 8007330:	4642      	mov	r2, r8
 8007332:	4658      	mov	r0, fp
 8007334:	f000 fcbe 	bl	8007cb4 <__lshift>
 8007338:	4681      	mov	r9, r0
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd05      	ble.n	800734c <_dtoa_r+0x83c>
 8007340:	4621      	mov	r1, r4
 8007342:	461a      	mov	r2, r3
 8007344:	4658      	mov	r0, fp
 8007346:	f000 fcb5 	bl	8007cb4 <__lshift>
 800734a:	4604      	mov	r4, r0
 800734c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800734e:	2b00      	cmp	r3, #0
 8007350:	d059      	beq.n	8007406 <_dtoa_r+0x8f6>
 8007352:	4621      	mov	r1, r4
 8007354:	4648      	mov	r0, r9
 8007356:	f000 fd19 	bl	8007d8c <__mcmp>
 800735a:	2800      	cmp	r0, #0
 800735c:	da53      	bge.n	8007406 <_dtoa_r+0x8f6>
 800735e:	1e7b      	subs	r3, r7, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	4649      	mov	r1, r9
 8007364:	2300      	movs	r3, #0
 8007366:	220a      	movs	r2, #10
 8007368:	4658      	mov	r0, fp
 800736a:	f000 faf7 	bl	800795c <__multadd>
 800736e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007370:	4681      	mov	r9, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8172 	beq.w	800765c <_dtoa_r+0xb4c>
 8007378:	2300      	movs	r3, #0
 800737a:	4629      	mov	r1, r5
 800737c:	220a      	movs	r2, #10
 800737e:	4658      	mov	r0, fp
 8007380:	f000 faec 	bl	800795c <__multadd>
 8007384:	9b00      	ldr	r3, [sp, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	4605      	mov	r5, r0
 800738a:	dc67      	bgt.n	800745c <_dtoa_r+0x94c>
 800738c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738e:	2b02      	cmp	r3, #2
 8007390:	dc41      	bgt.n	8007416 <_dtoa_r+0x906>
 8007392:	e063      	b.n	800745c <_dtoa_r+0x94c>
 8007394:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800739a:	e746      	b.n	800722a <_dtoa_r+0x71a>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	1e5c      	subs	r4, r3, #1
 80073a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	bfbf      	itttt	lt
 80073a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80073a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80073aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80073ac:	1ae3      	sublt	r3, r4, r3
 80073ae:	bfb4      	ite	lt
 80073b0:	18d2      	addlt	r2, r2, r3
 80073b2:	1b1c      	subge	r4, r3, r4
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	bfbc      	itt	lt
 80073b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80073ba:	2400      	movlt	r4, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfb5      	itete	lt
 80073c0:	eba8 0603 	sublt.w	r6, r8, r3
 80073c4:	9b07      	ldrge	r3, [sp, #28]
 80073c6:	2300      	movlt	r3, #0
 80073c8:	4646      	movge	r6, r8
 80073ca:	e730      	b.n	800722e <_dtoa_r+0x71e>
 80073cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073d0:	4646      	mov	r6, r8
 80073d2:	e735      	b.n	8007240 <_dtoa_r+0x730>
 80073d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073d6:	e75c      	b.n	8007292 <_dtoa_r+0x782>
 80073d8:	2300      	movs	r3, #0
 80073da:	e788      	b.n	80072ee <_dtoa_r+0x7de>
 80073dc:	3fe00000 	.word	0x3fe00000
 80073e0:	40240000 	.word	0x40240000
 80073e4:	40140000 	.word	0x40140000
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	e780      	b.n	80072ee <_dtoa_r+0x7de>
 80073ec:	2300      	movs	r3, #0
 80073ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f0:	e782      	b.n	80072f8 <_dtoa_r+0x7e8>
 80073f2:	d099      	beq.n	8007328 <_dtoa_r+0x818>
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	331c      	adds	r3, #28
 80073f8:	441a      	add	r2, r3
 80073fa:	4498      	add	r8, r3
 80073fc:	441e      	add	r6, r3
 80073fe:	9208      	str	r2, [sp, #32]
 8007400:	e792      	b.n	8007328 <_dtoa_r+0x818>
 8007402:	4603      	mov	r3, r0
 8007404:	e7f6      	b.n	80073f4 <_dtoa_r+0x8e4>
 8007406:	9b07      	ldr	r3, [sp, #28]
 8007408:	9704      	str	r7, [sp, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dc20      	bgt.n	8007450 <_dtoa_r+0x940>
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007412:	2b02      	cmp	r3, #2
 8007414:	dd1e      	ble.n	8007454 <_dtoa_r+0x944>
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f aec0 	bne.w	800719e <_dtoa_r+0x68e>
 800741e:	4621      	mov	r1, r4
 8007420:	2205      	movs	r2, #5
 8007422:	4658      	mov	r0, fp
 8007424:	f000 fa9a 	bl	800795c <__multadd>
 8007428:	4601      	mov	r1, r0
 800742a:	4604      	mov	r4, r0
 800742c:	4648      	mov	r0, r9
 800742e:	f000 fcad 	bl	8007d8c <__mcmp>
 8007432:	2800      	cmp	r0, #0
 8007434:	f77f aeb3 	ble.w	800719e <_dtoa_r+0x68e>
 8007438:	4656      	mov	r6, sl
 800743a:	2331      	movs	r3, #49	@ 0x31
 800743c:	f806 3b01 	strb.w	r3, [r6], #1
 8007440:	9b04      	ldr	r3, [sp, #16]
 8007442:	3301      	adds	r3, #1
 8007444:	9304      	str	r3, [sp, #16]
 8007446:	e6ae      	b.n	80071a6 <_dtoa_r+0x696>
 8007448:	9c07      	ldr	r4, [sp, #28]
 800744a:	9704      	str	r7, [sp, #16]
 800744c:	4625      	mov	r5, r4
 800744e:	e7f3      	b.n	8007438 <_dtoa_r+0x928>
 8007450:	9b07      	ldr	r3, [sp, #28]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8104 	beq.w	8007664 <_dtoa_r+0xb54>
 800745c:	2e00      	cmp	r6, #0
 800745e:	dd05      	ble.n	800746c <_dtoa_r+0x95c>
 8007460:	4629      	mov	r1, r5
 8007462:	4632      	mov	r2, r6
 8007464:	4658      	mov	r0, fp
 8007466:	f000 fc25 	bl	8007cb4 <__lshift>
 800746a:	4605      	mov	r5, r0
 800746c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d05a      	beq.n	8007528 <_dtoa_r+0xa18>
 8007472:	6869      	ldr	r1, [r5, #4]
 8007474:	4658      	mov	r0, fp
 8007476:	f000 fa0f 	bl	8007898 <_Balloc>
 800747a:	4606      	mov	r6, r0
 800747c:	b928      	cbnz	r0, 800748a <_dtoa_r+0x97a>
 800747e:	4b84      	ldr	r3, [pc, #528]	@ (8007690 <_dtoa_r+0xb80>)
 8007480:	4602      	mov	r2, r0
 8007482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007486:	f7ff bb5a 	b.w	8006b3e <_dtoa_r+0x2e>
 800748a:	692a      	ldr	r2, [r5, #16]
 800748c:	3202      	adds	r2, #2
 800748e:	0092      	lsls	r2, r2, #2
 8007490:	f105 010c 	add.w	r1, r5, #12
 8007494:	300c      	adds	r0, #12
 8007496:	f000 ffaf 	bl	80083f8 <memcpy>
 800749a:	2201      	movs	r2, #1
 800749c:	4631      	mov	r1, r6
 800749e:	4658      	mov	r0, fp
 80074a0:	f000 fc08 	bl	8007cb4 <__lshift>
 80074a4:	f10a 0301 	add.w	r3, sl, #1
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	4453      	add	r3, sl
 80074ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	462f      	mov	r7, r5
 80074b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ba:	4605      	mov	r5, r0
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	4621      	mov	r1, r4
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4648      	mov	r0, r9
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f7ff fa9a 	bl	80069fe <quorem>
 80074ca:	4639      	mov	r1, r7
 80074cc:	9002      	str	r0, [sp, #8]
 80074ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074d2:	4648      	mov	r0, r9
 80074d4:	f000 fc5a 	bl	8007d8c <__mcmp>
 80074d8:	462a      	mov	r2, r5
 80074da:	9008      	str	r0, [sp, #32]
 80074dc:	4621      	mov	r1, r4
 80074de:	4658      	mov	r0, fp
 80074e0:	f000 fc70 	bl	8007dc4 <__mdiff>
 80074e4:	68c2      	ldr	r2, [r0, #12]
 80074e6:	4606      	mov	r6, r0
 80074e8:	bb02      	cbnz	r2, 800752c <_dtoa_r+0xa1c>
 80074ea:	4601      	mov	r1, r0
 80074ec:	4648      	mov	r0, r9
 80074ee:	f000 fc4d 	bl	8007d8c <__mcmp>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4631      	mov	r1, r6
 80074f6:	4658      	mov	r0, fp
 80074f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074fa:	f000 fa0d 	bl	8007918 <_Bfree>
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007502:	9e07      	ldr	r6, [sp, #28]
 8007504:	ea43 0102 	orr.w	r1, r3, r2
 8007508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750a:	4319      	orrs	r1, r3
 800750c:	d110      	bne.n	8007530 <_dtoa_r+0xa20>
 800750e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007512:	d029      	beq.n	8007568 <_dtoa_r+0xa58>
 8007514:	9b08      	ldr	r3, [sp, #32]
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd02      	ble.n	8007520 <_dtoa_r+0xa10>
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	f883 8000 	strb.w	r8, [r3]
 8007526:	e63f      	b.n	80071a8 <_dtoa_r+0x698>
 8007528:	4628      	mov	r0, r5
 800752a:	e7bb      	b.n	80074a4 <_dtoa_r+0x994>
 800752c:	2201      	movs	r2, #1
 800752e:	e7e1      	b.n	80074f4 <_dtoa_r+0x9e4>
 8007530:	9b08      	ldr	r3, [sp, #32]
 8007532:	2b00      	cmp	r3, #0
 8007534:	db04      	blt.n	8007540 <_dtoa_r+0xa30>
 8007536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007538:	430b      	orrs	r3, r1
 800753a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800753c:	430b      	orrs	r3, r1
 800753e:	d120      	bne.n	8007582 <_dtoa_r+0xa72>
 8007540:	2a00      	cmp	r2, #0
 8007542:	dded      	ble.n	8007520 <_dtoa_r+0xa10>
 8007544:	4649      	mov	r1, r9
 8007546:	2201      	movs	r2, #1
 8007548:	4658      	mov	r0, fp
 800754a:	f000 fbb3 	bl	8007cb4 <__lshift>
 800754e:	4621      	mov	r1, r4
 8007550:	4681      	mov	r9, r0
 8007552:	f000 fc1b 	bl	8007d8c <__mcmp>
 8007556:	2800      	cmp	r0, #0
 8007558:	dc03      	bgt.n	8007562 <_dtoa_r+0xa52>
 800755a:	d1e1      	bne.n	8007520 <_dtoa_r+0xa10>
 800755c:	f018 0f01 	tst.w	r8, #1
 8007560:	d0de      	beq.n	8007520 <_dtoa_r+0xa10>
 8007562:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007566:	d1d8      	bne.n	800751a <_dtoa_r+0xa0a>
 8007568:	9a00      	ldr	r2, [sp, #0]
 800756a:	2339      	movs	r3, #57	@ 0x39
 800756c:	7013      	strb	r3, [r2, #0]
 800756e:	4633      	mov	r3, r6
 8007570:	461e      	mov	r6, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007578:	2a39      	cmp	r2, #57	@ 0x39
 800757a:	d052      	beq.n	8007622 <_dtoa_r+0xb12>
 800757c:	3201      	adds	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e612      	b.n	80071a8 <_dtoa_r+0x698>
 8007582:	2a00      	cmp	r2, #0
 8007584:	dd07      	ble.n	8007596 <_dtoa_r+0xa86>
 8007586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800758a:	d0ed      	beq.n	8007568 <_dtoa_r+0xa58>
 800758c:	9a00      	ldr	r2, [sp, #0]
 800758e:	f108 0301 	add.w	r3, r8, #1
 8007592:	7013      	strb	r3, [r2, #0]
 8007594:	e608      	b.n	80071a8 <_dtoa_r+0x698>
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	9a07      	ldr	r2, [sp, #28]
 800759a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800759e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d028      	beq.n	80075f6 <_dtoa_r+0xae6>
 80075a4:	4649      	mov	r1, r9
 80075a6:	2300      	movs	r3, #0
 80075a8:	220a      	movs	r2, #10
 80075aa:	4658      	mov	r0, fp
 80075ac:	f000 f9d6 	bl	800795c <__multadd>
 80075b0:	42af      	cmp	r7, r5
 80075b2:	4681      	mov	r9, r0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	f04f 020a 	mov.w	r2, #10
 80075bc:	4639      	mov	r1, r7
 80075be:	4658      	mov	r0, fp
 80075c0:	d107      	bne.n	80075d2 <_dtoa_r+0xac2>
 80075c2:	f000 f9cb 	bl	800795c <__multadd>
 80075c6:	4607      	mov	r7, r0
 80075c8:	4605      	mov	r5, r0
 80075ca:	9b07      	ldr	r3, [sp, #28]
 80075cc:	3301      	adds	r3, #1
 80075ce:	9307      	str	r3, [sp, #28]
 80075d0:	e774      	b.n	80074bc <_dtoa_r+0x9ac>
 80075d2:	f000 f9c3 	bl	800795c <__multadd>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4607      	mov	r7, r0
 80075da:	2300      	movs	r3, #0
 80075dc:	220a      	movs	r2, #10
 80075de:	4658      	mov	r0, fp
 80075e0:	f000 f9bc 	bl	800795c <__multadd>
 80075e4:	4605      	mov	r5, r0
 80075e6:	e7f0      	b.n	80075ca <_dtoa_r+0xaba>
 80075e8:	9b00      	ldr	r3, [sp, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfcc      	ite	gt
 80075ee:	461e      	movgt	r6, r3
 80075f0:	2601      	movle	r6, #1
 80075f2:	4456      	add	r6, sl
 80075f4:	2700      	movs	r7, #0
 80075f6:	4649      	mov	r1, r9
 80075f8:	2201      	movs	r2, #1
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fb5a 	bl	8007cb4 <__lshift>
 8007600:	4621      	mov	r1, r4
 8007602:	4681      	mov	r9, r0
 8007604:	f000 fbc2 	bl	8007d8c <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	dcb0      	bgt.n	800756e <_dtoa_r+0xa5e>
 800760c:	d102      	bne.n	8007614 <_dtoa_r+0xb04>
 800760e:	f018 0f01 	tst.w	r8, #1
 8007612:	d1ac      	bne.n	800756e <_dtoa_r+0xa5e>
 8007614:	4633      	mov	r3, r6
 8007616:	461e      	mov	r6, r3
 8007618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800761c:	2a30      	cmp	r2, #48	@ 0x30
 800761e:	d0fa      	beq.n	8007616 <_dtoa_r+0xb06>
 8007620:	e5c2      	b.n	80071a8 <_dtoa_r+0x698>
 8007622:	459a      	cmp	sl, r3
 8007624:	d1a4      	bne.n	8007570 <_dtoa_r+0xa60>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	3301      	adds	r3, #1
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	2331      	movs	r3, #49	@ 0x31
 800762e:	f88a 3000 	strb.w	r3, [sl]
 8007632:	e5b9      	b.n	80071a8 <_dtoa_r+0x698>
 8007634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007636:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007694 <_dtoa_r+0xb84>
 800763a:	b11b      	cbz	r3, 8007644 <_dtoa_r+0xb34>
 800763c:	f10a 0308 	add.w	r3, sl, #8
 8007640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	4650      	mov	r0, sl
 8007646:	b019      	add	sp, #100	@ 0x64
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764e:	2b01      	cmp	r3, #1
 8007650:	f77f ae37 	ble.w	80072c2 <_dtoa_r+0x7b2>
 8007654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007656:	930a      	str	r3, [sp, #40]	@ 0x28
 8007658:	2001      	movs	r0, #1
 800765a:	e655      	b.n	8007308 <_dtoa_r+0x7f8>
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f77f aed6 	ble.w	8007410 <_dtoa_r+0x900>
 8007664:	4656      	mov	r6, sl
 8007666:	4621      	mov	r1, r4
 8007668:	4648      	mov	r0, r9
 800766a:	f7ff f9c8 	bl	80069fe <quorem>
 800766e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007672:	f806 8b01 	strb.w	r8, [r6], #1
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	eba6 020a 	sub.w	r2, r6, sl
 800767c:	4293      	cmp	r3, r2
 800767e:	ddb3      	ble.n	80075e8 <_dtoa_r+0xad8>
 8007680:	4649      	mov	r1, r9
 8007682:	2300      	movs	r3, #0
 8007684:	220a      	movs	r2, #10
 8007686:	4658      	mov	r0, fp
 8007688:	f000 f968 	bl	800795c <__multadd>
 800768c:	4681      	mov	r9, r0
 800768e:	e7ea      	b.n	8007666 <_dtoa_r+0xb56>
 8007690:	08008b78 	.word	0x08008b78
 8007694:	08008afc 	.word	0x08008afc

08007698 <_free_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4605      	mov	r5, r0
 800769c:	2900      	cmp	r1, #0
 800769e:	d041      	beq.n	8007724 <_free_r+0x8c>
 80076a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a4:	1f0c      	subs	r4, r1, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfb8      	it	lt
 80076aa:	18e4      	addlt	r4, r4, r3
 80076ac:	f000 f8e8 	bl	8007880 <__malloc_lock>
 80076b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <_free_r+0x90>)
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	b933      	cbnz	r3, 80076c4 <_free_r+0x2c>
 80076b6:	6063      	str	r3, [r4, #4]
 80076b8:	6014      	str	r4, [r2, #0]
 80076ba:	4628      	mov	r0, r5
 80076bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c0:	f000 b8e4 	b.w	800788c <__malloc_unlock>
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d908      	bls.n	80076da <_free_r+0x42>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	1821      	adds	r1, r4, r0
 80076cc:	428b      	cmp	r3, r1
 80076ce:	bf01      	itttt	eq
 80076d0:	6819      	ldreq	r1, [r3, #0]
 80076d2:	685b      	ldreq	r3, [r3, #4]
 80076d4:	1809      	addeq	r1, r1, r0
 80076d6:	6021      	streq	r1, [r4, #0]
 80076d8:	e7ed      	b.n	80076b6 <_free_r+0x1e>
 80076da:	461a      	mov	r2, r3
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	b10b      	cbz	r3, 80076e4 <_free_r+0x4c>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d9fa      	bls.n	80076da <_free_r+0x42>
 80076e4:	6811      	ldr	r1, [r2, #0]
 80076e6:	1850      	adds	r0, r2, r1
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d10b      	bne.n	8007704 <_free_r+0x6c>
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	4401      	add	r1, r0
 80076f0:	1850      	adds	r0, r2, r1
 80076f2:	4283      	cmp	r3, r0
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	d1e0      	bne.n	80076ba <_free_r+0x22>
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	6053      	str	r3, [r2, #4]
 80076fe:	4408      	add	r0, r1
 8007700:	6010      	str	r0, [r2, #0]
 8007702:	e7da      	b.n	80076ba <_free_r+0x22>
 8007704:	d902      	bls.n	800770c <_free_r+0x74>
 8007706:	230c      	movs	r3, #12
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	e7d6      	b.n	80076ba <_free_r+0x22>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	1821      	adds	r1, r4, r0
 8007710:	428b      	cmp	r3, r1
 8007712:	bf04      	itt	eq
 8007714:	6819      	ldreq	r1, [r3, #0]
 8007716:	685b      	ldreq	r3, [r3, #4]
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	bf04      	itt	eq
 800771c:	1809      	addeq	r1, r1, r0
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	6054      	str	r4, [r2, #4]
 8007722:	e7ca      	b.n	80076ba <_free_r+0x22>
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	200009f4 	.word	0x200009f4

0800772c <malloc>:
 800772c:	4b02      	ldr	r3, [pc, #8]	@ (8007738 <malloc+0xc>)
 800772e:	4601      	mov	r1, r0
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	f000 b825 	b.w	8007780 <_malloc_r>
 8007736:	bf00      	nop
 8007738:	2000002c 	.word	0x2000002c

0800773c <sbrk_aligned>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4e0f      	ldr	r6, [pc, #60]	@ (800777c <sbrk_aligned+0x40>)
 8007740:	460c      	mov	r4, r1
 8007742:	6831      	ldr	r1, [r6, #0]
 8007744:	4605      	mov	r5, r0
 8007746:	b911      	cbnz	r1, 800774e <sbrk_aligned+0x12>
 8007748:	f000 fe46 	bl	80083d8 <_sbrk_r>
 800774c:	6030      	str	r0, [r6, #0]
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 fe41 	bl	80083d8 <_sbrk_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d103      	bne.n	8007762 <sbrk_aligned+0x26>
 800775a:	f04f 34ff 	mov.w	r4, #4294967295
 800775e:	4620      	mov	r0, r4
 8007760:	bd70      	pop	{r4, r5, r6, pc}
 8007762:	1cc4      	adds	r4, r0, #3
 8007764:	f024 0403 	bic.w	r4, r4, #3
 8007768:	42a0      	cmp	r0, r4
 800776a:	d0f8      	beq.n	800775e <sbrk_aligned+0x22>
 800776c:	1a21      	subs	r1, r4, r0
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fe32 	bl	80083d8 <_sbrk_r>
 8007774:	3001      	adds	r0, #1
 8007776:	d1f2      	bne.n	800775e <sbrk_aligned+0x22>
 8007778:	e7ef      	b.n	800775a <sbrk_aligned+0x1e>
 800777a:	bf00      	nop
 800777c:	200009f0 	.word	0x200009f0

08007780 <_malloc_r>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	1ccd      	adds	r5, r1, #3
 8007786:	f025 0503 	bic.w	r5, r5, #3
 800778a:	3508      	adds	r5, #8
 800778c:	2d0c      	cmp	r5, #12
 800778e:	bf38      	it	cc
 8007790:	250c      	movcc	r5, #12
 8007792:	2d00      	cmp	r5, #0
 8007794:	4606      	mov	r6, r0
 8007796:	db01      	blt.n	800779c <_malloc_r+0x1c>
 8007798:	42a9      	cmp	r1, r5
 800779a:	d904      	bls.n	80077a6 <_malloc_r+0x26>
 800779c:	230c      	movs	r3, #12
 800779e:	6033      	str	r3, [r6, #0]
 80077a0:	2000      	movs	r0, #0
 80077a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800787c <_malloc_r+0xfc>
 80077aa:	f000 f869 	bl	8007880 <__malloc_lock>
 80077ae:	f8d8 3000 	ldr.w	r3, [r8]
 80077b2:	461c      	mov	r4, r3
 80077b4:	bb44      	cbnz	r4, 8007808 <_malloc_r+0x88>
 80077b6:	4629      	mov	r1, r5
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff ffbf 	bl	800773c <sbrk_aligned>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	4604      	mov	r4, r0
 80077c2:	d158      	bne.n	8007876 <_malloc_r+0xf6>
 80077c4:	f8d8 4000 	ldr.w	r4, [r8]
 80077c8:	4627      	mov	r7, r4
 80077ca:	2f00      	cmp	r7, #0
 80077cc:	d143      	bne.n	8007856 <_malloc_r+0xd6>
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	d04b      	beq.n	800786a <_malloc_r+0xea>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	4639      	mov	r1, r7
 80077d6:	4630      	mov	r0, r6
 80077d8:	eb04 0903 	add.w	r9, r4, r3
 80077dc:	f000 fdfc 	bl	80083d8 <_sbrk_r>
 80077e0:	4581      	cmp	r9, r0
 80077e2:	d142      	bne.n	800786a <_malloc_r+0xea>
 80077e4:	6821      	ldr	r1, [r4, #0]
 80077e6:	1a6d      	subs	r5, r5, r1
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ffa6 	bl	800773c <sbrk_aligned>
 80077f0:	3001      	adds	r0, #1
 80077f2:	d03a      	beq.n	800786a <_malloc_r+0xea>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	442b      	add	r3, r5
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	f8d8 3000 	ldr.w	r3, [r8]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	bb62      	cbnz	r2, 800785c <_malloc_r+0xdc>
 8007802:	f8c8 7000 	str.w	r7, [r8]
 8007806:	e00f      	b.n	8007828 <_malloc_r+0xa8>
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	1b52      	subs	r2, r2, r5
 800780c:	d420      	bmi.n	8007850 <_malloc_r+0xd0>
 800780e:	2a0b      	cmp	r2, #11
 8007810:	d917      	bls.n	8007842 <_malloc_r+0xc2>
 8007812:	1961      	adds	r1, r4, r5
 8007814:	42a3      	cmp	r3, r4
 8007816:	6025      	str	r5, [r4, #0]
 8007818:	bf18      	it	ne
 800781a:	6059      	strne	r1, [r3, #4]
 800781c:	6863      	ldr	r3, [r4, #4]
 800781e:	bf08      	it	eq
 8007820:	f8c8 1000 	streq.w	r1, [r8]
 8007824:	5162      	str	r2, [r4, r5]
 8007826:	604b      	str	r3, [r1, #4]
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f82f 	bl	800788c <__malloc_unlock>
 800782e:	f104 000b 	add.w	r0, r4, #11
 8007832:	1d23      	adds	r3, r4, #4
 8007834:	f020 0007 	bic.w	r0, r0, #7
 8007838:	1ac2      	subs	r2, r0, r3
 800783a:	bf1c      	itt	ne
 800783c:	1a1b      	subne	r3, r3, r0
 800783e:	50a3      	strne	r3, [r4, r2]
 8007840:	e7af      	b.n	80077a2 <_malloc_r+0x22>
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	42a3      	cmp	r3, r4
 8007846:	bf0c      	ite	eq
 8007848:	f8c8 2000 	streq.w	r2, [r8]
 800784c:	605a      	strne	r2, [r3, #4]
 800784e:	e7eb      	b.n	8007828 <_malloc_r+0xa8>
 8007850:	4623      	mov	r3, r4
 8007852:	6864      	ldr	r4, [r4, #4]
 8007854:	e7ae      	b.n	80077b4 <_malloc_r+0x34>
 8007856:	463c      	mov	r4, r7
 8007858:	687f      	ldr	r7, [r7, #4]
 800785a:	e7b6      	b.n	80077ca <_malloc_r+0x4a>
 800785c:	461a      	mov	r2, r3
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	42a3      	cmp	r3, r4
 8007862:	d1fb      	bne.n	800785c <_malloc_r+0xdc>
 8007864:	2300      	movs	r3, #0
 8007866:	6053      	str	r3, [r2, #4]
 8007868:	e7de      	b.n	8007828 <_malloc_r+0xa8>
 800786a:	230c      	movs	r3, #12
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f80c 	bl	800788c <__malloc_unlock>
 8007874:	e794      	b.n	80077a0 <_malloc_r+0x20>
 8007876:	6005      	str	r5, [r0, #0]
 8007878:	e7d6      	b.n	8007828 <_malloc_r+0xa8>
 800787a:	bf00      	nop
 800787c:	200009f4 	.word	0x200009f4

08007880 <__malloc_lock>:
 8007880:	4801      	ldr	r0, [pc, #4]	@ (8007888 <__malloc_lock+0x8>)
 8007882:	f7ff b8ba 	b.w	80069fa <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	200009ec 	.word	0x200009ec

0800788c <__malloc_unlock>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__malloc_unlock+0x8>)
 800788e:	f7ff b8b5 	b.w	80069fc <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	200009ec 	.word	0x200009ec

08007898 <_Balloc>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	69c6      	ldr	r6, [r0, #28]
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
 80078a0:	b976      	cbnz	r6, 80078c0 <_Balloc+0x28>
 80078a2:	2010      	movs	r0, #16
 80078a4:	f7ff ff42 	bl	800772c <malloc>
 80078a8:	4602      	mov	r2, r0
 80078aa:	61e0      	str	r0, [r4, #28]
 80078ac:	b920      	cbnz	r0, 80078b8 <_Balloc+0x20>
 80078ae:	4b18      	ldr	r3, [pc, #96]	@ (8007910 <_Balloc+0x78>)
 80078b0:	4818      	ldr	r0, [pc, #96]	@ (8007914 <_Balloc+0x7c>)
 80078b2:	216b      	movs	r1, #107	@ 0x6b
 80078b4:	f000 fdae 	bl	8008414 <__assert_func>
 80078b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078bc:	6006      	str	r6, [r0, #0]
 80078be:	60c6      	str	r6, [r0, #12]
 80078c0:	69e6      	ldr	r6, [r4, #28]
 80078c2:	68f3      	ldr	r3, [r6, #12]
 80078c4:	b183      	cbz	r3, 80078e8 <_Balloc+0x50>
 80078c6:	69e3      	ldr	r3, [r4, #28]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078ce:	b9b8      	cbnz	r0, 8007900 <_Balloc+0x68>
 80078d0:	2101      	movs	r1, #1
 80078d2:	fa01 f605 	lsl.w	r6, r1, r5
 80078d6:	1d72      	adds	r2, r6, #5
 80078d8:	0092      	lsls	r2, r2, #2
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fdb8 	bl	8008450 <_calloc_r>
 80078e0:	b160      	cbz	r0, 80078fc <_Balloc+0x64>
 80078e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078e6:	e00e      	b.n	8007906 <_Balloc+0x6e>
 80078e8:	2221      	movs	r2, #33	@ 0x21
 80078ea:	2104      	movs	r1, #4
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fdaf 	bl	8008450 <_calloc_r>
 80078f2:	69e3      	ldr	r3, [r4, #28]
 80078f4:	60f0      	str	r0, [r6, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e4      	bne.n	80078c6 <_Balloc+0x2e>
 80078fc:	2000      	movs	r0, #0
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	6802      	ldr	r2, [r0, #0]
 8007902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007906:	2300      	movs	r3, #0
 8007908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800790c:	e7f7      	b.n	80078fe <_Balloc+0x66>
 800790e:	bf00      	nop
 8007910:	08008b09 	.word	0x08008b09
 8007914:	08008b89 	.word	0x08008b89

08007918 <_Bfree>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	69c6      	ldr	r6, [r0, #28]
 800791c:	4605      	mov	r5, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b976      	cbnz	r6, 8007940 <_Bfree+0x28>
 8007922:	2010      	movs	r0, #16
 8007924:	f7ff ff02 	bl	800772c <malloc>
 8007928:	4602      	mov	r2, r0
 800792a:	61e8      	str	r0, [r5, #28]
 800792c:	b920      	cbnz	r0, 8007938 <_Bfree+0x20>
 800792e:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <_Bfree+0x3c>)
 8007930:	4809      	ldr	r0, [pc, #36]	@ (8007958 <_Bfree+0x40>)
 8007932:	218f      	movs	r1, #143	@ 0x8f
 8007934:	f000 fd6e 	bl	8008414 <__assert_func>
 8007938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800793c:	6006      	str	r6, [r0, #0]
 800793e:	60c6      	str	r6, [r0, #12]
 8007940:	b13c      	cbz	r4, 8007952 <_Bfree+0x3a>
 8007942:	69eb      	ldr	r3, [r5, #28]
 8007944:	6862      	ldr	r2, [r4, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800794c:	6021      	str	r1, [r4, #0]
 800794e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	08008b09 	.word	0x08008b09
 8007958:	08008b89 	.word	0x08008b89

0800795c <__multadd>:
 800795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	690d      	ldr	r5, [r1, #16]
 8007962:	4607      	mov	r7, r0
 8007964:	460c      	mov	r4, r1
 8007966:	461e      	mov	r6, r3
 8007968:	f101 0c14 	add.w	ip, r1, #20
 800796c:	2000      	movs	r0, #0
 800796e:	f8dc 3000 	ldr.w	r3, [ip]
 8007972:	b299      	uxth	r1, r3
 8007974:	fb02 6101 	mla	r1, r2, r1, r6
 8007978:	0c1e      	lsrs	r6, r3, #16
 800797a:	0c0b      	lsrs	r3, r1, #16
 800797c:	fb02 3306 	mla	r3, r2, r6, r3
 8007980:	b289      	uxth	r1, r1
 8007982:	3001      	adds	r0, #1
 8007984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007988:	4285      	cmp	r5, r0
 800798a:	f84c 1b04 	str.w	r1, [ip], #4
 800798e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007992:	dcec      	bgt.n	800796e <__multadd+0x12>
 8007994:	b30e      	cbz	r6, 80079da <__multadd+0x7e>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	42ab      	cmp	r3, r5
 800799a:	dc19      	bgt.n	80079d0 <__multadd+0x74>
 800799c:	6861      	ldr	r1, [r4, #4]
 800799e:	4638      	mov	r0, r7
 80079a0:	3101      	adds	r1, #1
 80079a2:	f7ff ff79 	bl	8007898 <_Balloc>
 80079a6:	4680      	mov	r8, r0
 80079a8:	b928      	cbnz	r0, 80079b6 <__multadd+0x5a>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <__multadd+0x84>)
 80079ae:	480d      	ldr	r0, [pc, #52]	@ (80079e4 <__multadd+0x88>)
 80079b0:	21ba      	movs	r1, #186	@ 0xba
 80079b2:	f000 fd2f 	bl	8008414 <__assert_func>
 80079b6:	6922      	ldr	r2, [r4, #16]
 80079b8:	3202      	adds	r2, #2
 80079ba:	f104 010c 	add.w	r1, r4, #12
 80079be:	0092      	lsls	r2, r2, #2
 80079c0:	300c      	adds	r0, #12
 80079c2:	f000 fd19 	bl	80083f8 <memcpy>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ffa5 	bl	8007918 <_Bfree>
 80079ce:	4644      	mov	r4, r8
 80079d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079d4:	3501      	adds	r5, #1
 80079d6:	615e      	str	r6, [r3, #20]
 80079d8:	6125      	str	r5, [r4, #16]
 80079da:	4620      	mov	r0, r4
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	08008b78 	.word	0x08008b78
 80079e4:	08008b89 	.word	0x08008b89

080079e8 <__hi0bits>:
 80079e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079ec:	4603      	mov	r3, r0
 80079ee:	bf36      	itet	cc
 80079f0:	0403      	lslcc	r3, r0, #16
 80079f2:	2000      	movcs	r0, #0
 80079f4:	2010      	movcc	r0, #16
 80079f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079fa:	bf3c      	itt	cc
 80079fc:	021b      	lslcc	r3, r3, #8
 80079fe:	3008      	addcc	r0, #8
 8007a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a04:	bf3c      	itt	cc
 8007a06:	011b      	lslcc	r3, r3, #4
 8007a08:	3004      	addcc	r0, #4
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0e:	bf3c      	itt	cc
 8007a10:	009b      	lslcc	r3, r3, #2
 8007a12:	3002      	addcc	r0, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db05      	blt.n	8007a24 <__hi0bits+0x3c>
 8007a18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a1c:	f100 0001 	add.w	r0, r0, #1
 8007a20:	bf08      	it	eq
 8007a22:	2020      	moveq	r0, #32
 8007a24:	4770      	bx	lr

08007a26 <__lo0bits>:
 8007a26:	6803      	ldr	r3, [r0, #0]
 8007a28:	4602      	mov	r2, r0
 8007a2a:	f013 0007 	ands.w	r0, r3, #7
 8007a2e:	d00b      	beq.n	8007a48 <__lo0bits+0x22>
 8007a30:	07d9      	lsls	r1, r3, #31
 8007a32:	d421      	bmi.n	8007a78 <__lo0bits+0x52>
 8007a34:	0798      	lsls	r0, r3, #30
 8007a36:	bf49      	itett	mi
 8007a38:	085b      	lsrmi	r3, r3, #1
 8007a3a:	089b      	lsrpl	r3, r3, #2
 8007a3c:	2001      	movmi	r0, #1
 8007a3e:	6013      	strmi	r3, [r2, #0]
 8007a40:	bf5c      	itt	pl
 8007a42:	6013      	strpl	r3, [r2, #0]
 8007a44:	2002      	movpl	r0, #2
 8007a46:	4770      	bx	lr
 8007a48:	b299      	uxth	r1, r3
 8007a4a:	b909      	cbnz	r1, 8007a50 <__lo0bits+0x2a>
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	2010      	movs	r0, #16
 8007a50:	b2d9      	uxtb	r1, r3
 8007a52:	b909      	cbnz	r1, 8007a58 <__lo0bits+0x32>
 8007a54:	3008      	adds	r0, #8
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	0719      	lsls	r1, r3, #28
 8007a5a:	bf04      	itt	eq
 8007a5c:	091b      	lsreq	r3, r3, #4
 8007a5e:	3004      	addeq	r0, #4
 8007a60:	0799      	lsls	r1, r3, #30
 8007a62:	bf04      	itt	eq
 8007a64:	089b      	lsreq	r3, r3, #2
 8007a66:	3002      	addeq	r0, #2
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d403      	bmi.n	8007a74 <__lo0bits+0x4e>
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	f100 0001 	add.w	r0, r0, #1
 8007a72:	d003      	beq.n	8007a7c <__lo0bits+0x56>
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	4770      	bx	lr
 8007a78:	2000      	movs	r0, #0
 8007a7a:	4770      	bx	lr
 8007a7c:	2020      	movs	r0, #32
 8007a7e:	4770      	bx	lr

08007a80 <__i2b>:
 8007a80:	b510      	push	{r4, lr}
 8007a82:	460c      	mov	r4, r1
 8007a84:	2101      	movs	r1, #1
 8007a86:	f7ff ff07 	bl	8007898 <_Balloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	b928      	cbnz	r0, 8007a9a <__i2b+0x1a>
 8007a8e:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <__i2b+0x24>)
 8007a90:	4805      	ldr	r0, [pc, #20]	@ (8007aa8 <__i2b+0x28>)
 8007a92:	f240 1145 	movw	r1, #325	@ 0x145
 8007a96:	f000 fcbd 	bl	8008414 <__assert_func>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	6144      	str	r4, [r0, #20]
 8007a9e:	6103      	str	r3, [r0, #16]
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08008b78 	.word	0x08008b78
 8007aa8:	08008b89 	.word	0x08008b89

08007aac <__multiply>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	690a      	ldr	r2, [r1, #16]
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	bfa8      	it	ge
 8007aba:	4623      	movge	r3, r4
 8007abc:	460f      	mov	r7, r1
 8007abe:	bfa4      	itt	ge
 8007ac0:	460c      	movge	r4, r1
 8007ac2:	461f      	movge	r7, r3
 8007ac4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ac8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007acc:	68a3      	ldr	r3, [r4, #8]
 8007ace:	6861      	ldr	r1, [r4, #4]
 8007ad0:	eb0a 0609 	add.w	r6, sl, r9
 8007ad4:	42b3      	cmp	r3, r6
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	bfb8      	it	lt
 8007ada:	3101      	addlt	r1, #1
 8007adc:	f7ff fedc 	bl	8007898 <_Balloc>
 8007ae0:	b930      	cbnz	r0, 8007af0 <__multiply+0x44>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b44      	ldr	r3, [pc, #272]	@ (8007bf8 <__multiply+0x14c>)
 8007ae6:	4845      	ldr	r0, [pc, #276]	@ (8007bfc <__multiply+0x150>)
 8007ae8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007aec:	f000 fc92 	bl	8008414 <__assert_func>
 8007af0:	f100 0514 	add.w	r5, r0, #20
 8007af4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007af8:	462b      	mov	r3, r5
 8007afa:	2200      	movs	r2, #0
 8007afc:	4543      	cmp	r3, r8
 8007afe:	d321      	bcc.n	8007b44 <__multiply+0x98>
 8007b00:	f107 0114 	add.w	r1, r7, #20
 8007b04:	f104 0214 	add.w	r2, r4, #20
 8007b08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b10:	9302      	str	r3, [sp, #8]
 8007b12:	1b13      	subs	r3, r2, r4
 8007b14:	3b15      	subs	r3, #21
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	f104 0715 	add.w	r7, r4, #21
 8007b20:	42ba      	cmp	r2, r7
 8007b22:	bf38      	it	cc
 8007b24:	2304      	movcc	r3, #4
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	d80c      	bhi.n	8007b4a <__multiply+0x9e>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	dd03      	ble.n	8007b3c <__multiply+0x90>
 8007b34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05b      	beq.n	8007bf4 <__multiply+0x148>
 8007b3c:	6106      	str	r6, [r0, #16]
 8007b3e:	b005      	add	sp, #20
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	f843 2b04 	str.w	r2, [r3], #4
 8007b48:	e7d8      	b.n	8007afc <__multiply+0x50>
 8007b4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b4e:	f1ba 0f00 	cmp.w	sl, #0
 8007b52:	d024      	beq.n	8007b9e <__multiply+0xf2>
 8007b54:	f104 0e14 	add.w	lr, r4, #20
 8007b58:	46a9      	mov	r9, r5
 8007b5a:	f04f 0c00 	mov.w	ip, #0
 8007b5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b62:	f8d9 3000 	ldr.w	r3, [r9]
 8007b66:	fa1f fb87 	uxth.w	fp, r7
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b74:	f8d9 7000 	ldr.w	r7, [r9]
 8007b78:	4463      	add	r3, ip
 8007b7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b8c:	4572      	cmp	r2, lr
 8007b8e:	f849 3b04 	str.w	r3, [r9], #4
 8007b92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b96:	d8e2      	bhi.n	8007b5e <__multiply+0xb2>
 8007b98:	9b01      	ldr	r3, [sp, #4]
 8007b9a:	f845 c003 	str.w	ip, [r5, r3]
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ba4:	3104      	adds	r1, #4
 8007ba6:	f1b9 0f00 	cmp.w	r9, #0
 8007baa:	d021      	beq.n	8007bf0 <__multiply+0x144>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	f104 0c14 	add.w	ip, r4, #20
 8007bb2:	46ae      	mov	lr, r5
 8007bb4:	f04f 0a00 	mov.w	sl, #0
 8007bb8:	f8bc b000 	ldrh.w	fp, [ip]
 8007bbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bc0:	fb09 770b 	mla	r7, r9, fp, r7
 8007bc4:	4457      	add	r7, sl
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bcc:	f84e 3b04 	str.w	r3, [lr], #4
 8007bd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd8:	f8be 3000 	ldrh.w	r3, [lr]
 8007bdc:	fb09 330a 	mla	r3, r9, sl, r3
 8007be0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007be4:	4562      	cmp	r2, ip
 8007be6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bea:	d8e5      	bhi.n	8007bb8 <__multiply+0x10c>
 8007bec:	9f01      	ldr	r7, [sp, #4]
 8007bee:	51eb      	str	r3, [r5, r7]
 8007bf0:	3504      	adds	r5, #4
 8007bf2:	e799      	b.n	8007b28 <__multiply+0x7c>
 8007bf4:	3e01      	subs	r6, #1
 8007bf6:	e79b      	b.n	8007b30 <__multiply+0x84>
 8007bf8:	08008b78 	.word	0x08008b78
 8007bfc:	08008b89 	.word	0x08008b89

08007c00 <__pow5mult>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	4615      	mov	r5, r2
 8007c06:	f012 0203 	ands.w	r2, r2, #3
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	460e      	mov	r6, r1
 8007c0e:	d007      	beq.n	8007c20 <__pow5mult+0x20>
 8007c10:	4c25      	ldr	r4, [pc, #148]	@ (8007ca8 <__pow5mult+0xa8>)
 8007c12:	3a01      	subs	r2, #1
 8007c14:	2300      	movs	r3, #0
 8007c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c1a:	f7ff fe9f 	bl	800795c <__multadd>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	10ad      	asrs	r5, r5, #2
 8007c22:	d03d      	beq.n	8007ca0 <__pow5mult+0xa0>
 8007c24:	69fc      	ldr	r4, [r7, #28]
 8007c26:	b97c      	cbnz	r4, 8007c48 <__pow5mult+0x48>
 8007c28:	2010      	movs	r0, #16
 8007c2a:	f7ff fd7f 	bl	800772c <malloc>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	61f8      	str	r0, [r7, #28]
 8007c32:	b928      	cbnz	r0, 8007c40 <__pow5mult+0x40>
 8007c34:	4b1d      	ldr	r3, [pc, #116]	@ (8007cac <__pow5mult+0xac>)
 8007c36:	481e      	ldr	r0, [pc, #120]	@ (8007cb0 <__pow5mult+0xb0>)
 8007c38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c3c:	f000 fbea 	bl	8008414 <__assert_func>
 8007c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c44:	6004      	str	r4, [r0, #0]
 8007c46:	60c4      	str	r4, [r0, #12]
 8007c48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c50:	b94c      	cbnz	r4, 8007c66 <__pow5mult+0x66>
 8007c52:	f240 2171 	movw	r1, #625	@ 0x271
 8007c56:	4638      	mov	r0, r7
 8007c58:	f7ff ff12 	bl	8007a80 <__i2b>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c62:	4604      	mov	r4, r0
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	f04f 0900 	mov.w	r9, #0
 8007c6a:	07eb      	lsls	r3, r5, #31
 8007c6c:	d50a      	bpl.n	8007c84 <__pow5mult+0x84>
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4622      	mov	r2, r4
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff ff1a 	bl	8007aac <__multiply>
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7ff fe4b 	bl	8007918 <_Bfree>
 8007c82:	4646      	mov	r6, r8
 8007c84:	106d      	asrs	r5, r5, #1
 8007c86:	d00b      	beq.n	8007ca0 <__pow5mult+0xa0>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	b938      	cbnz	r0, 8007c9c <__pow5mult+0x9c>
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff ff0b 	bl	8007aac <__multiply>
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	f8c0 9000 	str.w	r9, [r0]
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	e7e4      	b.n	8007c6a <__pow5mult+0x6a>
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08008be4 	.word	0x08008be4
 8007cac:	08008b09 	.word	0x08008b09
 8007cb0:	08008b89 	.word	0x08008b89

08007cb4 <__lshift>:
 8007cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	6849      	ldr	r1, [r1, #4]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cc2:	68a3      	ldr	r3, [r4, #8]
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	4691      	mov	r9, r2
 8007cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ccc:	f108 0601 	add.w	r6, r8, #1
 8007cd0:	42b3      	cmp	r3, r6
 8007cd2:	db0b      	blt.n	8007cec <__lshift+0x38>
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f7ff fddf 	bl	8007898 <_Balloc>
 8007cda:	4605      	mov	r5, r0
 8007cdc:	b948      	cbnz	r0, 8007cf2 <__lshift+0x3e>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	4b28      	ldr	r3, [pc, #160]	@ (8007d84 <__lshift+0xd0>)
 8007ce2:	4829      	ldr	r0, [pc, #164]	@ (8007d88 <__lshift+0xd4>)
 8007ce4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ce8:	f000 fb94 	bl	8008414 <__assert_func>
 8007cec:	3101      	adds	r1, #1
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__lshift+0x1c>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f100 0114 	add.w	r1, r0, #20
 8007cf8:	f100 0210 	add.w	r2, r0, #16
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	4553      	cmp	r3, sl
 8007d00:	db33      	blt.n	8007d6a <__lshift+0xb6>
 8007d02:	6920      	ldr	r0, [r4, #16]
 8007d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d08:	f104 0314 	add.w	r3, r4, #20
 8007d0c:	f019 091f 	ands.w	r9, r9, #31
 8007d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d18:	d02b      	beq.n	8007d72 <__lshift+0xbe>
 8007d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d1e:	468a      	mov	sl, r1
 8007d20:	2200      	movs	r2, #0
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	fa00 f009 	lsl.w	r0, r0, r9
 8007d28:	4310      	orrs	r0, r2
 8007d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d32:	459c      	cmp	ip, r3
 8007d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d38:	d8f3      	bhi.n	8007d22 <__lshift+0x6e>
 8007d3a:	ebac 0304 	sub.w	r3, ip, r4
 8007d3e:	3b15      	subs	r3, #21
 8007d40:	f023 0303 	bic.w	r3, r3, #3
 8007d44:	3304      	adds	r3, #4
 8007d46:	f104 0015 	add.w	r0, r4, #21
 8007d4a:	4584      	cmp	ip, r0
 8007d4c:	bf38      	it	cc
 8007d4e:	2304      	movcc	r3, #4
 8007d50:	50ca      	str	r2, [r1, r3]
 8007d52:	b10a      	cbz	r2, 8007d58 <__lshift+0xa4>
 8007d54:	f108 0602 	add.w	r6, r8, #2
 8007d58:	3e01      	subs	r6, #1
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	612e      	str	r6, [r5, #16]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	f7ff fdda 	bl	8007918 <_Bfree>
 8007d64:	4628      	mov	r0, r5
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d6e:	3301      	adds	r3, #1
 8007d70:	e7c5      	b.n	8007cfe <__lshift+0x4a>
 8007d72:	3904      	subs	r1, #4
 8007d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d7c:	459c      	cmp	ip, r3
 8007d7e:	d8f9      	bhi.n	8007d74 <__lshift+0xc0>
 8007d80:	e7ea      	b.n	8007d58 <__lshift+0xa4>
 8007d82:	bf00      	nop
 8007d84:	08008b78 	.word	0x08008b78
 8007d88:	08008b89 	.word	0x08008b89

08007d8c <__mcmp>:
 8007d8c:	690a      	ldr	r2, [r1, #16]
 8007d8e:	4603      	mov	r3, r0
 8007d90:	6900      	ldr	r0, [r0, #16]
 8007d92:	1a80      	subs	r0, r0, r2
 8007d94:	b530      	push	{r4, r5, lr}
 8007d96:	d10e      	bne.n	8007db6 <__mcmp+0x2a>
 8007d98:	3314      	adds	r3, #20
 8007d9a:	3114      	adds	r1, #20
 8007d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dac:	4295      	cmp	r5, r2
 8007dae:	d003      	beq.n	8007db8 <__mcmp+0x2c>
 8007db0:	d205      	bcs.n	8007dbe <__mcmp+0x32>
 8007db2:	f04f 30ff 	mov.w	r0, #4294967295
 8007db6:	bd30      	pop	{r4, r5, pc}
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d3f3      	bcc.n	8007da4 <__mcmp+0x18>
 8007dbc:	e7fb      	b.n	8007db6 <__mcmp+0x2a>
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e7f9      	b.n	8007db6 <__mcmp+0x2a>
	...

08007dc4 <__mdiff>:
 8007dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	4689      	mov	r9, r1
 8007dca:	4606      	mov	r6, r0
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4648      	mov	r0, r9
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	f7ff ffdb 	bl	8007d8c <__mcmp>
 8007dd6:	1e05      	subs	r5, r0, #0
 8007dd8:	d112      	bne.n	8007e00 <__mdiff+0x3c>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7ff fd5b 	bl	8007898 <_Balloc>
 8007de2:	4602      	mov	r2, r0
 8007de4:	b928      	cbnz	r0, 8007df2 <__mdiff+0x2e>
 8007de6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ee4 <__mdiff+0x120>)
 8007de8:	f240 2137 	movw	r1, #567	@ 0x237
 8007dec:	483e      	ldr	r0, [pc, #248]	@ (8007ee8 <__mdiff+0x124>)
 8007dee:	f000 fb11 	bl	8008414 <__assert_func>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df8:	4610      	mov	r0, r2
 8007dfa:	b003      	add	sp, #12
 8007dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e00:	bfbc      	itt	lt
 8007e02:	464b      	movlt	r3, r9
 8007e04:	46a1      	movlt	r9, r4
 8007e06:	4630      	mov	r0, r6
 8007e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e0c:	bfba      	itte	lt
 8007e0e:	461c      	movlt	r4, r3
 8007e10:	2501      	movlt	r5, #1
 8007e12:	2500      	movge	r5, #0
 8007e14:	f7ff fd40 	bl	8007898 <_Balloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	b918      	cbnz	r0, 8007e24 <__mdiff+0x60>
 8007e1c:	4b31      	ldr	r3, [pc, #196]	@ (8007ee4 <__mdiff+0x120>)
 8007e1e:	f240 2145 	movw	r1, #581	@ 0x245
 8007e22:	e7e3      	b.n	8007dec <__mdiff+0x28>
 8007e24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e28:	6926      	ldr	r6, [r4, #16]
 8007e2a:	60c5      	str	r5, [r0, #12]
 8007e2c:	f109 0310 	add.w	r3, r9, #16
 8007e30:	f109 0514 	add.w	r5, r9, #20
 8007e34:	f104 0e14 	add.w	lr, r4, #20
 8007e38:	f100 0b14 	add.w	fp, r0, #20
 8007e3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	46d9      	mov	r9, fp
 8007e48:	f04f 0c00 	mov.w	ip, #0
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	fa1f f38a 	uxth.w	r3, sl
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	b283      	uxth	r3, r0
 8007e60:	1acb      	subs	r3, r1, r3
 8007e62:	0c00      	lsrs	r0, r0, #16
 8007e64:	4463      	add	r3, ip
 8007e66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e74:	4576      	cmp	r6, lr
 8007e76:	f849 3b04 	str.w	r3, [r9], #4
 8007e7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e7e:	d8e5      	bhi.n	8007e4c <__mdiff+0x88>
 8007e80:	1b33      	subs	r3, r6, r4
 8007e82:	3b15      	subs	r3, #21
 8007e84:	f023 0303 	bic.w	r3, r3, #3
 8007e88:	3415      	adds	r4, #21
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	bf38      	it	cc
 8007e90:	2304      	movcc	r3, #4
 8007e92:	441d      	add	r5, r3
 8007e94:	445b      	add	r3, fp
 8007e96:	461e      	mov	r6, r3
 8007e98:	462c      	mov	r4, r5
 8007e9a:	4544      	cmp	r4, r8
 8007e9c:	d30e      	bcc.n	8007ebc <__mdiff+0xf8>
 8007e9e:	f108 0103 	add.w	r1, r8, #3
 8007ea2:	1b49      	subs	r1, r1, r5
 8007ea4:	f021 0103 	bic.w	r1, r1, #3
 8007ea8:	3d03      	subs	r5, #3
 8007eaa:	45a8      	cmp	r8, r5
 8007eac:	bf38      	it	cc
 8007eae:	2100      	movcc	r1, #0
 8007eb0:	440b      	add	r3, r1
 8007eb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eb6:	b191      	cbz	r1, 8007ede <__mdiff+0x11a>
 8007eb8:	6117      	str	r7, [r2, #16]
 8007eba:	e79d      	b.n	8007df8 <__mdiff+0x34>
 8007ebc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ec0:	46e6      	mov	lr, ip
 8007ec2:	0c08      	lsrs	r0, r1, #16
 8007ec4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ec8:	4471      	add	r1, lr
 8007eca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ece:	b289      	uxth	r1, r1
 8007ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ed4:	f846 1b04 	str.w	r1, [r6], #4
 8007ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007edc:	e7dd      	b.n	8007e9a <__mdiff+0xd6>
 8007ede:	3f01      	subs	r7, #1
 8007ee0:	e7e7      	b.n	8007eb2 <__mdiff+0xee>
 8007ee2:	bf00      	nop
 8007ee4:	08008b78 	.word	0x08008b78
 8007ee8:	08008b89 	.word	0x08008b89

08007eec <__d2b>:
 8007eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	ec59 8b10 	vmov	r8, r9, d0
 8007ef8:	4616      	mov	r6, r2
 8007efa:	f7ff fccd 	bl	8007898 <_Balloc>
 8007efe:	4604      	mov	r4, r0
 8007f00:	b930      	cbnz	r0, 8007f10 <__d2b+0x24>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b23      	ldr	r3, [pc, #140]	@ (8007f94 <__d2b+0xa8>)
 8007f06:	4824      	ldr	r0, [pc, #144]	@ (8007f98 <__d2b+0xac>)
 8007f08:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f0c:	f000 fa82 	bl	8008414 <__assert_func>
 8007f10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f18:	b10d      	cbz	r5, 8007f1e <__d2b+0x32>
 8007f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	f1b8 0300 	subs.w	r3, r8, #0
 8007f24:	d023      	beq.n	8007f6e <__d2b+0x82>
 8007f26:	4668      	mov	r0, sp
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	f7ff fd7c 	bl	8007a26 <__lo0bits>
 8007f2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f32:	b1d0      	cbz	r0, 8007f6a <__d2b+0x7e>
 8007f34:	f1c0 0320 	rsb	r3, r0, #32
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	40c2      	lsrs	r2, r0
 8007f40:	6163      	str	r3, [r4, #20]
 8007f42:	9201      	str	r2, [sp, #4]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	61a3      	str	r3, [r4, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2201      	moveq	r2, #1
 8007f4e:	2202      	movne	r2, #2
 8007f50:	6122      	str	r2, [r4, #16]
 8007f52:	b1a5      	cbz	r5, 8007f7e <__d2b+0x92>
 8007f54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f58:	4405      	add	r5, r0
 8007f5a:	603d      	str	r5, [r7, #0]
 8007f5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f60:	6030      	str	r0, [r6, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	b003      	add	sp, #12
 8007f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	6161      	str	r1, [r4, #20]
 8007f6c:	e7ea      	b.n	8007f44 <__d2b+0x58>
 8007f6e:	a801      	add	r0, sp, #4
 8007f70:	f7ff fd59 	bl	8007a26 <__lo0bits>
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	6163      	str	r3, [r4, #20]
 8007f78:	3020      	adds	r0, #32
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	e7e8      	b.n	8007f50 <__d2b+0x64>
 8007f7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f86:	6038      	str	r0, [r7, #0]
 8007f88:	6918      	ldr	r0, [r3, #16]
 8007f8a:	f7ff fd2d 	bl	80079e8 <__hi0bits>
 8007f8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f92:	e7e5      	b.n	8007f60 <__d2b+0x74>
 8007f94:	08008b78 	.word	0x08008b78
 8007f98:	08008b89 	.word	0x08008b89

08007f9c <__ssputs_r>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	688e      	ldr	r6, [r1, #8]
 8007fa2:	461f      	mov	r7, r3
 8007fa4:	42be      	cmp	r6, r7
 8007fa6:	680b      	ldr	r3, [r1, #0]
 8007fa8:	4682      	mov	sl, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4690      	mov	r8, r2
 8007fae:	d82d      	bhi.n	800800c <__ssputs_r+0x70>
 8007fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fb8:	d026      	beq.n	8008008 <__ssputs_r+0x6c>
 8007fba:	6965      	ldr	r5, [r4, #20]
 8007fbc:	6909      	ldr	r1, [r1, #16]
 8007fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fc2:	eba3 0901 	sub.w	r9, r3, r1
 8007fc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fca:	1c7b      	adds	r3, r7, #1
 8007fcc:	444b      	add	r3, r9
 8007fce:	106d      	asrs	r5, r5, #1
 8007fd0:	429d      	cmp	r5, r3
 8007fd2:	bf38      	it	cc
 8007fd4:	461d      	movcc	r5, r3
 8007fd6:	0553      	lsls	r3, r2, #21
 8007fd8:	d527      	bpl.n	800802a <__ssputs_r+0x8e>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7ff fbd0 	bl	8007780 <_malloc_r>
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	b360      	cbz	r0, 800803e <__ssputs_r+0xa2>
 8007fe4:	6921      	ldr	r1, [r4, #16]
 8007fe6:	464a      	mov	r2, r9
 8007fe8:	f000 fa06 	bl	80083f8 <memcpy>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6126      	str	r6, [r4, #16]
 8007ffa:	6165      	str	r5, [r4, #20]
 8007ffc:	444e      	add	r6, r9
 8007ffe:	eba5 0509 	sub.w	r5, r5, r9
 8008002:	6026      	str	r6, [r4, #0]
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	463e      	mov	r6, r7
 8008008:	42be      	cmp	r6, r7
 800800a:	d900      	bls.n	800800e <__ssputs_r+0x72>
 800800c:	463e      	mov	r6, r7
 800800e:	6820      	ldr	r0, [r4, #0]
 8008010:	4632      	mov	r2, r6
 8008012:	4641      	mov	r1, r8
 8008014:	f000 f9c6 	bl	80083a4 <memmove>
 8008018:	68a3      	ldr	r3, [r4, #8]
 800801a:	1b9b      	subs	r3, r3, r6
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	4433      	add	r3, r6
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802a:	462a      	mov	r2, r5
 800802c:	f000 fa36 	bl	800849c <_realloc_r>
 8008030:	4606      	mov	r6, r0
 8008032:	2800      	cmp	r0, #0
 8008034:	d1e0      	bne.n	8007ff8 <__ssputs_r+0x5c>
 8008036:	6921      	ldr	r1, [r4, #16]
 8008038:	4650      	mov	r0, sl
 800803a:	f7ff fb2d 	bl	8007698 <_free_r>
 800803e:	230c      	movs	r3, #12
 8008040:	f8ca 3000 	str.w	r3, [sl]
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	e7e9      	b.n	8008026 <__ssputs_r+0x8a>
	...

08008054 <_svfiprintf_r>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	4698      	mov	r8, r3
 800805a:	898b      	ldrh	r3, [r1, #12]
 800805c:	061b      	lsls	r3, r3, #24
 800805e:	b09d      	sub	sp, #116	@ 0x74
 8008060:	4607      	mov	r7, r0
 8008062:	460d      	mov	r5, r1
 8008064:	4614      	mov	r4, r2
 8008066:	d510      	bpl.n	800808a <_svfiprintf_r+0x36>
 8008068:	690b      	ldr	r3, [r1, #16]
 800806a:	b973      	cbnz	r3, 800808a <_svfiprintf_r+0x36>
 800806c:	2140      	movs	r1, #64	@ 0x40
 800806e:	f7ff fb87 	bl	8007780 <_malloc_r>
 8008072:	6028      	str	r0, [r5, #0]
 8008074:	6128      	str	r0, [r5, #16]
 8008076:	b930      	cbnz	r0, 8008086 <_svfiprintf_r+0x32>
 8008078:	230c      	movs	r3, #12
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	b01d      	add	sp, #116	@ 0x74
 8008082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008086:	2340      	movs	r3, #64	@ 0x40
 8008088:	616b      	str	r3, [r5, #20]
 800808a:	2300      	movs	r3, #0
 800808c:	9309      	str	r3, [sp, #36]	@ 0x24
 800808e:	2320      	movs	r3, #32
 8008090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008094:	f8cd 800c 	str.w	r8, [sp, #12]
 8008098:	2330      	movs	r3, #48	@ 0x30
 800809a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008238 <_svfiprintf_r+0x1e4>
 800809e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080a2:	f04f 0901 	mov.w	r9, #1
 80080a6:	4623      	mov	r3, r4
 80080a8:	469a      	mov	sl, r3
 80080aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ae:	b10a      	cbz	r2, 80080b4 <_svfiprintf_r+0x60>
 80080b0:	2a25      	cmp	r2, #37	@ 0x25
 80080b2:	d1f9      	bne.n	80080a8 <_svfiprintf_r+0x54>
 80080b4:	ebba 0b04 	subs.w	fp, sl, r4
 80080b8:	d00b      	beq.n	80080d2 <_svfiprintf_r+0x7e>
 80080ba:	465b      	mov	r3, fp
 80080bc:	4622      	mov	r2, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff ff6b 	bl	8007f9c <__ssputs_r>
 80080c6:	3001      	adds	r0, #1
 80080c8:	f000 80a7 	beq.w	800821a <_svfiprintf_r+0x1c6>
 80080cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ce:	445a      	add	r2, fp
 80080d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080d2:	f89a 3000 	ldrb.w	r3, [sl]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 809f 	beq.w	800821a <_svfiprintf_r+0x1c6>
 80080dc:	2300      	movs	r3, #0
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e6:	f10a 0a01 	add.w	sl, sl, #1
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80080f4:	4654      	mov	r4, sl
 80080f6:	2205      	movs	r2, #5
 80080f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fc:	484e      	ldr	r0, [pc, #312]	@ (8008238 <_svfiprintf_r+0x1e4>)
 80080fe:	f7f8 f887 	bl	8000210 <memchr>
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	b9d8      	cbnz	r0, 800813e <_svfiprintf_r+0xea>
 8008106:	06d0      	lsls	r0, r2, #27
 8008108:	bf44      	itt	mi
 800810a:	2320      	movmi	r3, #32
 800810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008110:	0711      	lsls	r1, r2, #28
 8008112:	bf44      	itt	mi
 8008114:	232b      	movmi	r3, #43	@ 0x2b
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008120:	d015      	beq.n	800814e <_svfiprintf_r+0xfa>
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	4654      	mov	r4, sl
 8008126:	2000      	movs	r0, #0
 8008128:	f04f 0c0a 	mov.w	ip, #10
 800812c:	4621      	mov	r1, r4
 800812e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008132:	3b30      	subs	r3, #48	@ 0x30
 8008134:	2b09      	cmp	r3, #9
 8008136:	d94b      	bls.n	80081d0 <_svfiprintf_r+0x17c>
 8008138:	b1b0      	cbz	r0, 8008168 <_svfiprintf_r+0x114>
 800813a:	9207      	str	r2, [sp, #28]
 800813c:	e014      	b.n	8008168 <_svfiprintf_r+0x114>
 800813e:	eba0 0308 	sub.w	r3, r0, r8
 8008142:	fa09 f303 	lsl.w	r3, r9, r3
 8008146:	4313      	orrs	r3, r2
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	46a2      	mov	sl, r4
 800814c:	e7d2      	b.n	80080f4 <_svfiprintf_r+0xa0>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	1d19      	adds	r1, r3, #4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	9103      	str	r1, [sp, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfbb      	ittet	lt
 800815a:	425b      	neglt	r3, r3
 800815c:	f042 0202 	orrlt.w	r2, r2, #2
 8008160:	9307      	strge	r3, [sp, #28]
 8008162:	9307      	strlt	r3, [sp, #28]
 8008164:	bfb8      	it	lt
 8008166:	9204      	strlt	r2, [sp, #16]
 8008168:	7823      	ldrb	r3, [r4, #0]
 800816a:	2b2e      	cmp	r3, #46	@ 0x2e
 800816c:	d10a      	bne.n	8008184 <_svfiprintf_r+0x130>
 800816e:	7863      	ldrb	r3, [r4, #1]
 8008170:	2b2a      	cmp	r3, #42	@ 0x2a
 8008172:	d132      	bne.n	80081da <_svfiprintf_r+0x186>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	1d1a      	adds	r2, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	9203      	str	r2, [sp, #12]
 800817c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008180:	3402      	adds	r4, #2
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008248 <_svfiprintf_r+0x1f4>
 8008188:	7821      	ldrb	r1, [r4, #0]
 800818a:	2203      	movs	r2, #3
 800818c:	4650      	mov	r0, sl
 800818e:	f7f8 f83f 	bl	8000210 <memchr>
 8008192:	b138      	cbz	r0, 80081a4 <_svfiprintf_r+0x150>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	eba0 000a 	sub.w	r0, r0, sl
 800819a:	2240      	movs	r2, #64	@ 0x40
 800819c:	4082      	lsls	r2, r0
 800819e:	4313      	orrs	r3, r2
 80081a0:	3401      	adds	r4, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	4824      	ldr	r0, [pc, #144]	@ (800823c <_svfiprintf_r+0x1e8>)
 80081aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ae:	2206      	movs	r2, #6
 80081b0:	f7f8 f82e 	bl	8000210 <memchr>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d036      	beq.n	8008226 <_svfiprintf_r+0x1d2>
 80081b8:	4b21      	ldr	r3, [pc, #132]	@ (8008240 <_svfiprintf_r+0x1ec>)
 80081ba:	bb1b      	cbnz	r3, 8008204 <_svfiprintf_r+0x1b0>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	3307      	adds	r3, #7
 80081c0:	f023 0307 	bic.w	r3, r3, #7
 80081c4:	3308      	adds	r3, #8
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ca:	4433      	add	r3, r6
 80081cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ce:	e76a      	b.n	80080a6 <_svfiprintf_r+0x52>
 80081d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d4:	460c      	mov	r4, r1
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7a8      	b.n	800812c <_svfiprintf_r+0xd8>
 80081da:	2300      	movs	r3, #0
 80081dc:	3401      	adds	r4, #1
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	4619      	mov	r1, r3
 80081e2:	f04f 0c0a 	mov.w	ip, #10
 80081e6:	4620      	mov	r0, r4
 80081e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ec:	3a30      	subs	r2, #48	@ 0x30
 80081ee:	2a09      	cmp	r2, #9
 80081f0:	d903      	bls.n	80081fa <_svfiprintf_r+0x1a6>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0c6      	beq.n	8008184 <_svfiprintf_r+0x130>
 80081f6:	9105      	str	r1, [sp, #20]
 80081f8:	e7c4      	b.n	8008184 <_svfiprintf_r+0x130>
 80081fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fe:	4604      	mov	r4, r0
 8008200:	2301      	movs	r3, #1
 8008202:	e7f0      	b.n	80081e6 <_svfiprintf_r+0x192>
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	462a      	mov	r2, r5
 800820a:	4b0e      	ldr	r3, [pc, #56]	@ (8008244 <_svfiprintf_r+0x1f0>)
 800820c:	a904      	add	r1, sp, #16
 800820e:	4638      	mov	r0, r7
 8008210:	f7fd fe98 	bl	8005f44 <_printf_float>
 8008214:	1c42      	adds	r2, r0, #1
 8008216:	4606      	mov	r6, r0
 8008218:	d1d6      	bne.n	80081c8 <_svfiprintf_r+0x174>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	065b      	lsls	r3, r3, #25
 800821e:	f53f af2d 	bmi.w	800807c <_svfiprintf_r+0x28>
 8008222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008224:	e72c      	b.n	8008080 <_svfiprintf_r+0x2c>
 8008226:	ab03      	add	r3, sp, #12
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	462a      	mov	r2, r5
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <_svfiprintf_r+0x1f0>)
 800822e:	a904      	add	r1, sp, #16
 8008230:	4638      	mov	r0, r7
 8008232:	f7fe f91f 	bl	8006474 <_printf_i>
 8008236:	e7ed      	b.n	8008214 <_svfiprintf_r+0x1c0>
 8008238:	08008ce0 	.word	0x08008ce0
 800823c:	08008cea 	.word	0x08008cea
 8008240:	08005f45 	.word	0x08005f45
 8008244:	08007f9d 	.word	0x08007f9d
 8008248:	08008ce6 	.word	0x08008ce6

0800824c <__sflush_r>:
 800824c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	0716      	lsls	r6, r2, #28
 8008256:	4605      	mov	r5, r0
 8008258:	460c      	mov	r4, r1
 800825a:	d454      	bmi.n	8008306 <__sflush_r+0xba>
 800825c:	684b      	ldr	r3, [r1, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc02      	bgt.n	8008268 <__sflush_r+0x1c>
 8008262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd48      	ble.n	80082fa <__sflush_r+0xae>
 8008268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800826a:	2e00      	cmp	r6, #0
 800826c:	d045      	beq.n	80082fa <__sflush_r+0xae>
 800826e:	2300      	movs	r3, #0
 8008270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008274:	682f      	ldr	r7, [r5, #0]
 8008276:	6a21      	ldr	r1, [r4, #32]
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	d030      	beq.n	80082de <__sflush_r+0x92>
 800827c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	0759      	lsls	r1, r3, #29
 8008282:	d505      	bpl.n	8008290 <__sflush_r+0x44>
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	1ad2      	subs	r2, r2, r3
 8008288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800828a:	b10b      	cbz	r3, 8008290 <__sflush_r+0x44>
 800828c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	2300      	movs	r3, #0
 8008292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008294:	6a21      	ldr	r1, [r4, #32]
 8008296:	4628      	mov	r0, r5
 8008298:	47b0      	blx	r6
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	d106      	bne.n	80082ae <__sflush_r+0x62>
 80082a0:	6829      	ldr	r1, [r5, #0]
 80082a2:	291d      	cmp	r1, #29
 80082a4:	d82b      	bhi.n	80082fe <__sflush_r+0xb2>
 80082a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008350 <__sflush_r+0x104>)
 80082a8:	410a      	asrs	r2, r1
 80082aa:	07d6      	lsls	r6, r2, #31
 80082ac:	d427      	bmi.n	80082fe <__sflush_r+0xb2>
 80082ae:	2200      	movs	r2, #0
 80082b0:	6062      	str	r2, [r4, #4]
 80082b2:	04d9      	lsls	r1, r3, #19
 80082b4:	6922      	ldr	r2, [r4, #16]
 80082b6:	6022      	str	r2, [r4, #0]
 80082b8:	d504      	bpl.n	80082c4 <__sflush_r+0x78>
 80082ba:	1c42      	adds	r2, r0, #1
 80082bc:	d101      	bne.n	80082c2 <__sflush_r+0x76>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b903      	cbnz	r3, 80082c4 <__sflush_r+0x78>
 80082c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80082c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082c6:	602f      	str	r7, [r5, #0]
 80082c8:	b1b9      	cbz	r1, 80082fa <__sflush_r+0xae>
 80082ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ce:	4299      	cmp	r1, r3
 80082d0:	d002      	beq.n	80082d8 <__sflush_r+0x8c>
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7ff f9e0 	bl	8007698 <_free_r>
 80082d8:	2300      	movs	r3, #0
 80082da:	6363      	str	r3, [r4, #52]	@ 0x34
 80082dc:	e00d      	b.n	80082fa <__sflush_r+0xae>
 80082de:	2301      	movs	r3, #1
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b0      	blx	r6
 80082e4:	4602      	mov	r2, r0
 80082e6:	1c50      	adds	r0, r2, #1
 80082e8:	d1c9      	bne.n	800827e <__sflush_r+0x32>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0c6      	beq.n	800827e <__sflush_r+0x32>
 80082f0:	2b1d      	cmp	r3, #29
 80082f2:	d001      	beq.n	80082f8 <__sflush_r+0xac>
 80082f4:	2b16      	cmp	r3, #22
 80082f6:	d11e      	bne.n	8008336 <__sflush_r+0xea>
 80082f8:	602f      	str	r7, [r5, #0]
 80082fa:	2000      	movs	r0, #0
 80082fc:	e022      	b.n	8008344 <__sflush_r+0xf8>
 80082fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008302:	b21b      	sxth	r3, r3
 8008304:	e01b      	b.n	800833e <__sflush_r+0xf2>
 8008306:	690f      	ldr	r7, [r1, #16]
 8008308:	2f00      	cmp	r7, #0
 800830a:	d0f6      	beq.n	80082fa <__sflush_r+0xae>
 800830c:	0793      	lsls	r3, r2, #30
 800830e:	680e      	ldr	r6, [r1, #0]
 8008310:	bf08      	it	eq
 8008312:	694b      	ldreq	r3, [r1, #20]
 8008314:	600f      	str	r7, [r1, #0]
 8008316:	bf18      	it	ne
 8008318:	2300      	movne	r3, #0
 800831a:	eba6 0807 	sub.w	r8, r6, r7
 800831e:	608b      	str	r3, [r1, #8]
 8008320:	f1b8 0f00 	cmp.w	r8, #0
 8008324:	dde9      	ble.n	80082fa <__sflush_r+0xae>
 8008326:	6a21      	ldr	r1, [r4, #32]
 8008328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800832a:	4643      	mov	r3, r8
 800832c:	463a      	mov	r2, r7
 800832e:	4628      	mov	r0, r5
 8008330:	47b0      	blx	r6
 8008332:	2800      	cmp	r0, #0
 8008334:	dc08      	bgt.n	8008348 <__sflush_r+0xfc>
 8008336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008348:	4407      	add	r7, r0
 800834a:	eba8 0800 	sub.w	r8, r8, r0
 800834e:	e7e7      	b.n	8008320 <__sflush_r+0xd4>
 8008350:	dfbffffe 	.word	0xdfbffffe

08008354 <_fflush_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b913      	cbnz	r3, 8008364 <_fflush_r+0x10>
 800835e:	2500      	movs	r5, #0
 8008360:	4628      	mov	r0, r5
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	b118      	cbz	r0, 800836e <_fflush_r+0x1a>
 8008366:	6a03      	ldr	r3, [r0, #32]
 8008368:	b90b      	cbnz	r3, 800836e <_fflush_r+0x1a>
 800836a:	f7fe fa2f 	bl	80067cc <__sinit>
 800836e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f3      	beq.n	800835e <_fflush_r+0xa>
 8008376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008378:	07d0      	lsls	r0, r2, #31
 800837a:	d404      	bmi.n	8008386 <_fflush_r+0x32>
 800837c:	0599      	lsls	r1, r3, #22
 800837e:	d402      	bmi.n	8008386 <_fflush_r+0x32>
 8008380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008382:	f7fe fb3a 	bl	80069fa <__retarget_lock_acquire_recursive>
 8008386:	4628      	mov	r0, r5
 8008388:	4621      	mov	r1, r4
 800838a:	f7ff ff5f 	bl	800824c <__sflush_r>
 800838e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008390:	07da      	lsls	r2, r3, #31
 8008392:	4605      	mov	r5, r0
 8008394:	d4e4      	bmi.n	8008360 <_fflush_r+0xc>
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	059b      	lsls	r3, r3, #22
 800839a:	d4e1      	bmi.n	8008360 <_fflush_r+0xc>
 800839c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800839e:	f7fe fb2d 	bl	80069fc <__retarget_lock_release_recursive>
 80083a2:	e7dd      	b.n	8008360 <_fflush_r+0xc>

080083a4 <memmove>:
 80083a4:	4288      	cmp	r0, r1
 80083a6:	b510      	push	{r4, lr}
 80083a8:	eb01 0402 	add.w	r4, r1, r2
 80083ac:	d902      	bls.n	80083b4 <memmove+0x10>
 80083ae:	4284      	cmp	r4, r0
 80083b0:	4623      	mov	r3, r4
 80083b2:	d807      	bhi.n	80083c4 <memmove+0x20>
 80083b4:	1e43      	subs	r3, r0, #1
 80083b6:	42a1      	cmp	r1, r4
 80083b8:	d008      	beq.n	80083cc <memmove+0x28>
 80083ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083c2:	e7f8      	b.n	80083b6 <memmove+0x12>
 80083c4:	4402      	add	r2, r0
 80083c6:	4601      	mov	r1, r0
 80083c8:	428a      	cmp	r2, r1
 80083ca:	d100      	bne.n	80083ce <memmove+0x2a>
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083d6:	e7f7      	b.n	80083c8 <memmove+0x24>

080083d8 <_sbrk_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d06      	ldr	r5, [pc, #24]	@ (80083f4 <_sbrk_r+0x1c>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f7f9 fc50 	bl	8001c88 <_sbrk>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_sbrk_r+0x1a>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_sbrk_r+0x1a>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	200009e8 	.word	0x200009e8

080083f8 <memcpy>:
 80083f8:	440a      	add	r2, r1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008400:	d100      	bne.n	8008404 <memcpy+0xc>
 8008402:	4770      	bx	lr
 8008404:	b510      	push	{r4, lr}
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800840e:	4291      	cmp	r1, r2
 8008410:	d1f9      	bne.n	8008406 <memcpy+0xe>
 8008412:	bd10      	pop	{r4, pc}

08008414 <__assert_func>:
 8008414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008416:	4614      	mov	r4, r2
 8008418:	461a      	mov	r2, r3
 800841a:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <__assert_func+0x2c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4605      	mov	r5, r0
 8008420:	68d8      	ldr	r0, [r3, #12]
 8008422:	b954      	cbnz	r4, 800843a <__assert_func+0x26>
 8008424:	4b07      	ldr	r3, [pc, #28]	@ (8008444 <__assert_func+0x30>)
 8008426:	461c      	mov	r4, r3
 8008428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800842c:	9100      	str	r1, [sp, #0]
 800842e:	462b      	mov	r3, r5
 8008430:	4905      	ldr	r1, [pc, #20]	@ (8008448 <__assert_func+0x34>)
 8008432:	f000 f86f 	bl	8008514 <fiprintf>
 8008436:	f000 f87f 	bl	8008538 <abort>
 800843a:	4b04      	ldr	r3, [pc, #16]	@ (800844c <__assert_func+0x38>)
 800843c:	e7f4      	b.n	8008428 <__assert_func+0x14>
 800843e:	bf00      	nop
 8008440:	2000002c 	.word	0x2000002c
 8008444:	08008d36 	.word	0x08008d36
 8008448:	08008d08 	.word	0x08008d08
 800844c:	08008cfb 	.word	0x08008cfb

08008450 <_calloc_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	fba1 5402 	umull	r5, r4, r1, r2
 8008456:	b93c      	cbnz	r4, 8008468 <_calloc_r+0x18>
 8008458:	4629      	mov	r1, r5
 800845a:	f7ff f991 	bl	8007780 <_malloc_r>
 800845e:	4606      	mov	r6, r0
 8008460:	b928      	cbnz	r0, 800846e <_calloc_r+0x1e>
 8008462:	2600      	movs	r6, #0
 8008464:	4630      	mov	r0, r6
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	220c      	movs	r2, #12
 800846a:	6002      	str	r2, [r0, #0]
 800846c:	e7f9      	b.n	8008462 <_calloc_r+0x12>
 800846e:	462a      	mov	r2, r5
 8008470:	4621      	mov	r1, r4
 8008472:	f7fe fa44 	bl	80068fe <memset>
 8008476:	e7f5      	b.n	8008464 <_calloc_r+0x14>

08008478 <__ascii_mbtowc>:
 8008478:	b082      	sub	sp, #8
 800847a:	b901      	cbnz	r1, 800847e <__ascii_mbtowc+0x6>
 800847c:	a901      	add	r1, sp, #4
 800847e:	b142      	cbz	r2, 8008492 <__ascii_mbtowc+0x1a>
 8008480:	b14b      	cbz	r3, 8008496 <__ascii_mbtowc+0x1e>
 8008482:	7813      	ldrb	r3, [r2, #0]
 8008484:	600b      	str	r3, [r1, #0]
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	1e10      	subs	r0, r2, #0
 800848a:	bf18      	it	ne
 800848c:	2001      	movne	r0, #1
 800848e:	b002      	add	sp, #8
 8008490:	4770      	bx	lr
 8008492:	4610      	mov	r0, r2
 8008494:	e7fb      	b.n	800848e <__ascii_mbtowc+0x16>
 8008496:	f06f 0001 	mvn.w	r0, #1
 800849a:	e7f8      	b.n	800848e <__ascii_mbtowc+0x16>

0800849c <_realloc_r>:
 800849c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	4680      	mov	r8, r0
 80084a2:	4615      	mov	r5, r2
 80084a4:	460c      	mov	r4, r1
 80084a6:	b921      	cbnz	r1, 80084b2 <_realloc_r+0x16>
 80084a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ac:	4611      	mov	r1, r2
 80084ae:	f7ff b967 	b.w	8007780 <_malloc_r>
 80084b2:	b92a      	cbnz	r2, 80084c0 <_realloc_r+0x24>
 80084b4:	f7ff f8f0 	bl	8007698 <_free_r>
 80084b8:	2400      	movs	r4, #0
 80084ba:	4620      	mov	r0, r4
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c0:	f000 f841 	bl	8008546 <_malloc_usable_size_r>
 80084c4:	4285      	cmp	r5, r0
 80084c6:	4606      	mov	r6, r0
 80084c8:	d802      	bhi.n	80084d0 <_realloc_r+0x34>
 80084ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084ce:	d8f4      	bhi.n	80084ba <_realloc_r+0x1e>
 80084d0:	4629      	mov	r1, r5
 80084d2:	4640      	mov	r0, r8
 80084d4:	f7ff f954 	bl	8007780 <_malloc_r>
 80084d8:	4607      	mov	r7, r0
 80084da:	2800      	cmp	r0, #0
 80084dc:	d0ec      	beq.n	80084b8 <_realloc_r+0x1c>
 80084de:	42b5      	cmp	r5, r6
 80084e0:	462a      	mov	r2, r5
 80084e2:	4621      	mov	r1, r4
 80084e4:	bf28      	it	cs
 80084e6:	4632      	movcs	r2, r6
 80084e8:	f7ff ff86 	bl	80083f8 <memcpy>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4640      	mov	r0, r8
 80084f0:	f7ff f8d2 	bl	8007698 <_free_r>
 80084f4:	463c      	mov	r4, r7
 80084f6:	e7e0      	b.n	80084ba <_realloc_r+0x1e>

080084f8 <__ascii_wctomb>:
 80084f8:	4603      	mov	r3, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	b141      	cbz	r1, 8008510 <__ascii_wctomb+0x18>
 80084fe:	2aff      	cmp	r2, #255	@ 0xff
 8008500:	d904      	bls.n	800850c <__ascii_wctomb+0x14>
 8008502:	228a      	movs	r2, #138	@ 0x8a
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	4770      	bx	lr
 800850c:	700a      	strb	r2, [r1, #0]
 800850e:	2001      	movs	r0, #1
 8008510:	4770      	bx	lr
	...

08008514 <fiprintf>:
 8008514:	b40e      	push	{r1, r2, r3}
 8008516:	b503      	push	{r0, r1, lr}
 8008518:	4601      	mov	r1, r0
 800851a:	ab03      	add	r3, sp, #12
 800851c:	4805      	ldr	r0, [pc, #20]	@ (8008534 <fiprintf+0x20>)
 800851e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	f000 f83f 	bl	80085a8 <_vfiprintf_r>
 800852a:	b002      	add	sp, #8
 800852c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008530:	b003      	add	sp, #12
 8008532:	4770      	bx	lr
 8008534:	2000002c 	.word	0x2000002c

08008538 <abort>:
 8008538:	b508      	push	{r3, lr}
 800853a:	2006      	movs	r0, #6
 800853c:	f000 fa08 	bl	8008950 <raise>
 8008540:	2001      	movs	r0, #1
 8008542:	f7f9 fb29 	bl	8001b98 <_exit>

08008546 <_malloc_usable_size_r>:
 8008546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854a:	1f18      	subs	r0, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfbc      	itt	lt
 8008550:	580b      	ldrlt	r3, [r1, r0]
 8008552:	18c0      	addlt	r0, r0, r3
 8008554:	4770      	bx	lr

08008556 <__sfputc_r>:
 8008556:	6893      	ldr	r3, [r2, #8]
 8008558:	3b01      	subs	r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	b410      	push	{r4}
 800855e:	6093      	str	r3, [r2, #8]
 8008560:	da08      	bge.n	8008574 <__sfputc_r+0x1e>
 8008562:	6994      	ldr	r4, [r2, #24]
 8008564:	42a3      	cmp	r3, r4
 8008566:	db01      	blt.n	800856c <__sfputc_r+0x16>
 8008568:	290a      	cmp	r1, #10
 800856a:	d103      	bne.n	8008574 <__sfputc_r+0x1e>
 800856c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008570:	f000 b932 	b.w	80087d8 <__swbuf_r>
 8008574:	6813      	ldr	r3, [r2, #0]
 8008576:	1c58      	adds	r0, r3, #1
 8008578:	6010      	str	r0, [r2, #0]
 800857a:	7019      	strb	r1, [r3, #0]
 800857c:	4608      	mov	r0, r1
 800857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008582:	4770      	bx	lr

08008584 <__sfputs_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	4606      	mov	r6, r0
 8008588:	460f      	mov	r7, r1
 800858a:	4614      	mov	r4, r2
 800858c:	18d5      	adds	r5, r2, r3
 800858e:	42ac      	cmp	r4, r5
 8008590:	d101      	bne.n	8008596 <__sfputs_r+0x12>
 8008592:	2000      	movs	r0, #0
 8008594:	e007      	b.n	80085a6 <__sfputs_r+0x22>
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	463a      	mov	r2, r7
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ffda 	bl	8008556 <__sfputc_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d1f3      	bne.n	800858e <__sfputs_r+0xa>
 80085a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085a8 <_vfiprintf_r>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	460d      	mov	r5, r1
 80085ae:	b09d      	sub	sp, #116	@ 0x74
 80085b0:	4614      	mov	r4, r2
 80085b2:	4698      	mov	r8, r3
 80085b4:	4606      	mov	r6, r0
 80085b6:	b118      	cbz	r0, 80085c0 <_vfiprintf_r+0x18>
 80085b8:	6a03      	ldr	r3, [r0, #32]
 80085ba:	b90b      	cbnz	r3, 80085c0 <_vfiprintf_r+0x18>
 80085bc:	f7fe f906 	bl	80067cc <__sinit>
 80085c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085c2:	07d9      	lsls	r1, r3, #31
 80085c4:	d405      	bmi.n	80085d2 <_vfiprintf_r+0x2a>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	059a      	lsls	r2, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_vfiprintf_r+0x2a>
 80085cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ce:	f7fe fa14 	bl	80069fa <__retarget_lock_acquire_recursive>
 80085d2:	89ab      	ldrh	r3, [r5, #12]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	d501      	bpl.n	80085dc <_vfiprintf_r+0x34>
 80085d8:	692b      	ldr	r3, [r5, #16]
 80085da:	b99b      	cbnz	r3, 8008604 <_vfiprintf_r+0x5c>
 80085dc:	4629      	mov	r1, r5
 80085de:	4630      	mov	r0, r6
 80085e0:	f000 f938 	bl	8008854 <__swsetup_r>
 80085e4:	b170      	cbz	r0, 8008604 <_vfiprintf_r+0x5c>
 80085e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085e8:	07dc      	lsls	r4, r3, #31
 80085ea:	d504      	bpl.n	80085f6 <_vfiprintf_r+0x4e>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b01d      	add	sp, #116	@ 0x74
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	0598      	lsls	r0, r3, #22
 80085fa:	d4f7      	bmi.n	80085ec <_vfiprintf_r+0x44>
 80085fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085fe:	f7fe f9fd 	bl	80069fc <__retarget_lock_release_recursive>
 8008602:	e7f3      	b.n	80085ec <_vfiprintf_r+0x44>
 8008604:	2300      	movs	r3, #0
 8008606:	9309      	str	r3, [sp, #36]	@ 0x24
 8008608:	2320      	movs	r3, #32
 800860a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800860e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008612:	2330      	movs	r3, #48	@ 0x30
 8008614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087c4 <_vfiprintf_r+0x21c>
 8008618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800861c:	f04f 0901 	mov.w	r9, #1
 8008620:	4623      	mov	r3, r4
 8008622:	469a      	mov	sl, r3
 8008624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008628:	b10a      	cbz	r2, 800862e <_vfiprintf_r+0x86>
 800862a:	2a25      	cmp	r2, #37	@ 0x25
 800862c:	d1f9      	bne.n	8008622 <_vfiprintf_r+0x7a>
 800862e:	ebba 0b04 	subs.w	fp, sl, r4
 8008632:	d00b      	beq.n	800864c <_vfiprintf_r+0xa4>
 8008634:	465b      	mov	r3, fp
 8008636:	4622      	mov	r2, r4
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ffa2 	bl	8008584 <__sfputs_r>
 8008640:	3001      	adds	r0, #1
 8008642:	f000 80a7 	beq.w	8008794 <_vfiprintf_r+0x1ec>
 8008646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008648:	445a      	add	r2, fp
 800864a:	9209      	str	r2, [sp, #36]	@ 0x24
 800864c:	f89a 3000 	ldrb.w	r3, [sl]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 809f 	beq.w	8008794 <_vfiprintf_r+0x1ec>
 8008656:	2300      	movs	r3, #0
 8008658:	f04f 32ff 	mov.w	r2, #4294967295
 800865c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008660:	f10a 0a01 	add.w	sl, sl, #1
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800866c:	931a      	str	r3, [sp, #104]	@ 0x68
 800866e:	4654      	mov	r4, sl
 8008670:	2205      	movs	r2, #5
 8008672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008676:	4853      	ldr	r0, [pc, #332]	@ (80087c4 <_vfiprintf_r+0x21c>)
 8008678:	f7f7 fdca 	bl	8000210 <memchr>
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	b9d8      	cbnz	r0, 80086b8 <_vfiprintf_r+0x110>
 8008680:	06d1      	lsls	r1, r2, #27
 8008682:	bf44      	itt	mi
 8008684:	2320      	movmi	r3, #32
 8008686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800868a:	0713      	lsls	r3, r2, #28
 800868c:	bf44      	itt	mi
 800868e:	232b      	movmi	r3, #43	@ 0x2b
 8008690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008694:	f89a 3000 	ldrb.w	r3, [sl]
 8008698:	2b2a      	cmp	r3, #42	@ 0x2a
 800869a:	d015      	beq.n	80086c8 <_vfiprintf_r+0x120>
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	4654      	mov	r4, sl
 80086a0:	2000      	movs	r0, #0
 80086a2:	f04f 0c0a 	mov.w	ip, #10
 80086a6:	4621      	mov	r1, r4
 80086a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ac:	3b30      	subs	r3, #48	@ 0x30
 80086ae:	2b09      	cmp	r3, #9
 80086b0:	d94b      	bls.n	800874a <_vfiprintf_r+0x1a2>
 80086b2:	b1b0      	cbz	r0, 80086e2 <_vfiprintf_r+0x13a>
 80086b4:	9207      	str	r2, [sp, #28]
 80086b6:	e014      	b.n	80086e2 <_vfiprintf_r+0x13a>
 80086b8:	eba0 0308 	sub.w	r3, r0, r8
 80086bc:	fa09 f303 	lsl.w	r3, r9, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	46a2      	mov	sl, r4
 80086c6:	e7d2      	b.n	800866e <_vfiprintf_r+0xc6>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	1d19      	adds	r1, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	9103      	str	r1, [sp, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bfbb      	ittet	lt
 80086d4:	425b      	neglt	r3, r3
 80086d6:	f042 0202 	orrlt.w	r2, r2, #2
 80086da:	9307      	strge	r3, [sp, #28]
 80086dc:	9307      	strlt	r3, [sp, #28]
 80086de:	bfb8      	it	lt
 80086e0:	9204      	strlt	r2, [sp, #16]
 80086e2:	7823      	ldrb	r3, [r4, #0]
 80086e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80086e6:	d10a      	bne.n	80086fe <_vfiprintf_r+0x156>
 80086e8:	7863      	ldrb	r3, [r4, #1]
 80086ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ec:	d132      	bne.n	8008754 <_vfiprintf_r+0x1ac>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	1d1a      	adds	r2, r3, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	9203      	str	r2, [sp, #12]
 80086f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086fa:	3402      	adds	r4, #2
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087d4 <_vfiprintf_r+0x22c>
 8008702:	7821      	ldrb	r1, [r4, #0]
 8008704:	2203      	movs	r2, #3
 8008706:	4650      	mov	r0, sl
 8008708:	f7f7 fd82 	bl	8000210 <memchr>
 800870c:	b138      	cbz	r0, 800871e <_vfiprintf_r+0x176>
 800870e:	9b04      	ldr	r3, [sp, #16]
 8008710:	eba0 000a 	sub.w	r0, r0, sl
 8008714:	2240      	movs	r2, #64	@ 0x40
 8008716:	4082      	lsls	r2, r0
 8008718:	4313      	orrs	r3, r2
 800871a:	3401      	adds	r4, #1
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008722:	4829      	ldr	r0, [pc, #164]	@ (80087c8 <_vfiprintf_r+0x220>)
 8008724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008728:	2206      	movs	r2, #6
 800872a:	f7f7 fd71 	bl	8000210 <memchr>
 800872e:	2800      	cmp	r0, #0
 8008730:	d03f      	beq.n	80087b2 <_vfiprintf_r+0x20a>
 8008732:	4b26      	ldr	r3, [pc, #152]	@ (80087cc <_vfiprintf_r+0x224>)
 8008734:	bb1b      	cbnz	r3, 800877e <_vfiprintf_r+0x1d6>
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	3307      	adds	r3, #7
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	3308      	adds	r3, #8
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008744:	443b      	add	r3, r7
 8008746:	9309      	str	r3, [sp, #36]	@ 0x24
 8008748:	e76a      	b.n	8008620 <_vfiprintf_r+0x78>
 800874a:	fb0c 3202 	mla	r2, ip, r2, r3
 800874e:	460c      	mov	r4, r1
 8008750:	2001      	movs	r0, #1
 8008752:	e7a8      	b.n	80086a6 <_vfiprintf_r+0xfe>
 8008754:	2300      	movs	r3, #0
 8008756:	3401      	adds	r4, #1
 8008758:	9305      	str	r3, [sp, #20]
 800875a:	4619      	mov	r1, r3
 800875c:	f04f 0c0a 	mov.w	ip, #10
 8008760:	4620      	mov	r0, r4
 8008762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008766:	3a30      	subs	r2, #48	@ 0x30
 8008768:	2a09      	cmp	r2, #9
 800876a:	d903      	bls.n	8008774 <_vfiprintf_r+0x1cc>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0c6      	beq.n	80086fe <_vfiprintf_r+0x156>
 8008770:	9105      	str	r1, [sp, #20]
 8008772:	e7c4      	b.n	80086fe <_vfiprintf_r+0x156>
 8008774:	fb0c 2101 	mla	r1, ip, r1, r2
 8008778:	4604      	mov	r4, r0
 800877a:	2301      	movs	r3, #1
 800877c:	e7f0      	b.n	8008760 <_vfiprintf_r+0x1b8>
 800877e:	ab03      	add	r3, sp, #12
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	462a      	mov	r2, r5
 8008784:	4b12      	ldr	r3, [pc, #72]	@ (80087d0 <_vfiprintf_r+0x228>)
 8008786:	a904      	add	r1, sp, #16
 8008788:	4630      	mov	r0, r6
 800878a:	f7fd fbdb 	bl	8005f44 <_printf_float>
 800878e:	4607      	mov	r7, r0
 8008790:	1c78      	adds	r0, r7, #1
 8008792:	d1d6      	bne.n	8008742 <_vfiprintf_r+0x19a>
 8008794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	d405      	bmi.n	80087a6 <_vfiprintf_r+0x1fe>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	059a      	lsls	r2, r3, #22
 800879e:	d402      	bmi.n	80087a6 <_vfiprintf_r+0x1fe>
 80087a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087a2:	f7fe f92b 	bl	80069fc <__retarget_lock_release_recursive>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	065b      	lsls	r3, r3, #25
 80087aa:	f53f af1f 	bmi.w	80085ec <_vfiprintf_r+0x44>
 80087ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087b0:	e71e      	b.n	80085f0 <_vfiprintf_r+0x48>
 80087b2:	ab03      	add	r3, sp, #12
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	462a      	mov	r2, r5
 80087b8:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <_vfiprintf_r+0x228>)
 80087ba:	a904      	add	r1, sp, #16
 80087bc:	4630      	mov	r0, r6
 80087be:	f7fd fe59 	bl	8006474 <_printf_i>
 80087c2:	e7e4      	b.n	800878e <_vfiprintf_r+0x1e6>
 80087c4:	08008ce0 	.word	0x08008ce0
 80087c8:	08008cea 	.word	0x08008cea
 80087cc:	08005f45 	.word	0x08005f45
 80087d0:	08008585 	.word	0x08008585
 80087d4:	08008ce6 	.word	0x08008ce6

080087d8 <__swbuf_r>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	460e      	mov	r6, r1
 80087dc:	4614      	mov	r4, r2
 80087de:	4605      	mov	r5, r0
 80087e0:	b118      	cbz	r0, 80087ea <__swbuf_r+0x12>
 80087e2:	6a03      	ldr	r3, [r0, #32]
 80087e4:	b90b      	cbnz	r3, 80087ea <__swbuf_r+0x12>
 80087e6:	f7fd fff1 	bl	80067cc <__sinit>
 80087ea:	69a3      	ldr	r3, [r4, #24]
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	071a      	lsls	r2, r3, #28
 80087f2:	d501      	bpl.n	80087f8 <__swbuf_r+0x20>
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	b943      	cbnz	r3, 800880a <__swbuf_r+0x32>
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f82a 	bl	8008854 <__swsetup_r>
 8008800:	b118      	cbz	r0, 800880a <__swbuf_r+0x32>
 8008802:	f04f 37ff 	mov.w	r7, #4294967295
 8008806:	4638      	mov	r0, r7
 8008808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	6922      	ldr	r2, [r4, #16]
 800880e:	1a98      	subs	r0, r3, r2
 8008810:	6963      	ldr	r3, [r4, #20]
 8008812:	b2f6      	uxtb	r6, r6
 8008814:	4283      	cmp	r3, r0
 8008816:	4637      	mov	r7, r6
 8008818:	dc05      	bgt.n	8008826 <__swbuf_r+0x4e>
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f7ff fd99 	bl	8008354 <_fflush_r>
 8008822:	2800      	cmp	r0, #0
 8008824:	d1ed      	bne.n	8008802 <__swbuf_r+0x2a>
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	3b01      	subs	r3, #1
 800882a:	60a3      	str	r3, [r4, #8]
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	701e      	strb	r6, [r3, #0]
 8008834:	6962      	ldr	r2, [r4, #20]
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	429a      	cmp	r2, r3
 800883a:	d004      	beq.n	8008846 <__swbuf_r+0x6e>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	07db      	lsls	r3, r3, #31
 8008840:	d5e1      	bpl.n	8008806 <__swbuf_r+0x2e>
 8008842:	2e0a      	cmp	r6, #10
 8008844:	d1df      	bne.n	8008806 <__swbuf_r+0x2e>
 8008846:	4621      	mov	r1, r4
 8008848:	4628      	mov	r0, r5
 800884a:	f7ff fd83 	bl	8008354 <_fflush_r>
 800884e:	2800      	cmp	r0, #0
 8008850:	d0d9      	beq.n	8008806 <__swbuf_r+0x2e>
 8008852:	e7d6      	b.n	8008802 <__swbuf_r+0x2a>

08008854 <__swsetup_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4b29      	ldr	r3, [pc, #164]	@ (80088fc <__swsetup_r+0xa8>)
 8008858:	4605      	mov	r5, r0
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	460c      	mov	r4, r1
 800885e:	b118      	cbz	r0, 8008868 <__swsetup_r+0x14>
 8008860:	6a03      	ldr	r3, [r0, #32]
 8008862:	b90b      	cbnz	r3, 8008868 <__swsetup_r+0x14>
 8008864:	f7fd ffb2 	bl	80067cc <__sinit>
 8008868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886c:	0719      	lsls	r1, r3, #28
 800886e:	d422      	bmi.n	80088b6 <__swsetup_r+0x62>
 8008870:	06da      	lsls	r2, r3, #27
 8008872:	d407      	bmi.n	8008884 <__swsetup_r+0x30>
 8008874:	2209      	movs	r2, #9
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	f04f 30ff 	mov.w	r0, #4294967295
 8008882:	e033      	b.n	80088ec <__swsetup_r+0x98>
 8008884:	0758      	lsls	r0, r3, #29
 8008886:	d512      	bpl.n	80088ae <__swsetup_r+0x5a>
 8008888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888a:	b141      	cbz	r1, 800889e <__swsetup_r+0x4a>
 800888c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008890:	4299      	cmp	r1, r3
 8008892:	d002      	beq.n	800889a <__swsetup_r+0x46>
 8008894:	4628      	mov	r0, r5
 8008896:	f7fe feff 	bl	8007698 <_free_r>
 800889a:	2300      	movs	r3, #0
 800889c:	6363      	str	r3, [r4, #52]	@ 0x34
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6063      	str	r3, [r4, #4]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f043 0308 	orr.w	r3, r3, #8
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	b94b      	cbnz	r3, 80088ce <__swsetup_r+0x7a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c4:	d003      	beq.n	80088ce <__swsetup_r+0x7a>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 f883 	bl	80089d4 <__smakebuf_r>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f013 0201 	ands.w	r2, r3, #1
 80088d6:	d00a      	beq.n	80088ee <__swsetup_r+0x9a>
 80088d8:	2200      	movs	r2, #0
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	4252      	negs	r2, r2
 80088e0:	61a2      	str	r2, [r4, #24]
 80088e2:	6922      	ldr	r2, [r4, #16]
 80088e4:	b942      	cbnz	r2, 80088f8 <__swsetup_r+0xa4>
 80088e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088ea:	d1c5      	bne.n	8008878 <__swsetup_r+0x24>
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
 80088ee:	0799      	lsls	r1, r3, #30
 80088f0:	bf58      	it	pl
 80088f2:	6962      	ldrpl	r2, [r4, #20]
 80088f4:	60a2      	str	r2, [r4, #8]
 80088f6:	e7f4      	b.n	80088e2 <__swsetup_r+0x8e>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7f7      	b.n	80088ec <__swsetup_r+0x98>
 80088fc:	2000002c 	.word	0x2000002c

08008900 <_raise_r>:
 8008900:	291f      	cmp	r1, #31
 8008902:	b538      	push	{r3, r4, r5, lr}
 8008904:	4605      	mov	r5, r0
 8008906:	460c      	mov	r4, r1
 8008908:	d904      	bls.n	8008914 <_raise_r+0x14>
 800890a:	2316      	movs	r3, #22
 800890c:	6003      	str	r3, [r0, #0]
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008916:	b112      	cbz	r2, 800891e <_raise_r+0x1e>
 8008918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800891c:	b94b      	cbnz	r3, 8008932 <_raise_r+0x32>
 800891e:	4628      	mov	r0, r5
 8008920:	f000 f830 	bl	8008984 <_getpid_r>
 8008924:	4622      	mov	r2, r4
 8008926:	4601      	mov	r1, r0
 8008928:	4628      	mov	r0, r5
 800892a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800892e:	f000 b817 	b.w	8008960 <_kill_r>
 8008932:	2b01      	cmp	r3, #1
 8008934:	d00a      	beq.n	800894c <_raise_r+0x4c>
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	d103      	bne.n	8008942 <_raise_r+0x42>
 800893a:	2316      	movs	r3, #22
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	2001      	movs	r0, #1
 8008940:	e7e7      	b.n	8008912 <_raise_r+0x12>
 8008942:	2100      	movs	r1, #0
 8008944:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008948:	4620      	mov	r0, r4
 800894a:	4798      	blx	r3
 800894c:	2000      	movs	r0, #0
 800894e:	e7e0      	b.n	8008912 <_raise_r+0x12>

08008950 <raise>:
 8008950:	4b02      	ldr	r3, [pc, #8]	@ (800895c <raise+0xc>)
 8008952:	4601      	mov	r1, r0
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	f7ff bfd3 	b.w	8008900 <_raise_r>
 800895a:	bf00      	nop
 800895c:	2000002c 	.word	0x2000002c

08008960 <_kill_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d07      	ldr	r5, [pc, #28]	@ (8008980 <_kill_r+0x20>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	f7f9 f903 	bl	8001b78 <_kill>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d102      	bne.n	800897c <_kill_r+0x1c>
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	b103      	cbz	r3, 800897c <_kill_r+0x1c>
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	bf00      	nop
 8008980:	200009e8 	.word	0x200009e8

08008984 <_getpid_r>:
 8008984:	f7f9 b8f0 	b.w	8001b68 <_getpid>

08008988 <__swhatbuf_r>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	460c      	mov	r4, r1
 800898c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008990:	2900      	cmp	r1, #0
 8008992:	b096      	sub	sp, #88	@ 0x58
 8008994:	4615      	mov	r5, r2
 8008996:	461e      	mov	r6, r3
 8008998:	da0d      	bge.n	80089b6 <__swhatbuf_r+0x2e>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089a0:	f04f 0100 	mov.w	r1, #0
 80089a4:	bf14      	ite	ne
 80089a6:	2340      	movne	r3, #64	@ 0x40
 80089a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089ac:	2000      	movs	r0, #0
 80089ae:	6031      	str	r1, [r6, #0]
 80089b0:	602b      	str	r3, [r5, #0]
 80089b2:	b016      	add	sp, #88	@ 0x58
 80089b4:	bd70      	pop	{r4, r5, r6, pc}
 80089b6:	466a      	mov	r2, sp
 80089b8:	f000 f848 	bl	8008a4c <_fstat_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	dbec      	blt.n	800899a <__swhatbuf_r+0x12>
 80089c0:	9901      	ldr	r1, [sp, #4]
 80089c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089ca:	4259      	negs	r1, r3
 80089cc:	4159      	adcs	r1, r3
 80089ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089d2:	e7eb      	b.n	80089ac <__swhatbuf_r+0x24>

080089d4 <__smakebuf_r>:
 80089d4:	898b      	ldrh	r3, [r1, #12]
 80089d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d8:	079d      	lsls	r5, r3, #30
 80089da:	4606      	mov	r6, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	d507      	bpl.n	80089f0 <__smakebuf_r+0x1c>
 80089e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	6123      	str	r3, [r4, #16]
 80089e8:	2301      	movs	r3, #1
 80089ea:	6163      	str	r3, [r4, #20]
 80089ec:	b003      	add	sp, #12
 80089ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f0:	ab01      	add	r3, sp, #4
 80089f2:	466a      	mov	r2, sp
 80089f4:	f7ff ffc8 	bl	8008988 <__swhatbuf_r>
 80089f8:	9f00      	ldr	r7, [sp, #0]
 80089fa:	4605      	mov	r5, r0
 80089fc:	4639      	mov	r1, r7
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7fe febe 	bl	8007780 <_malloc_r>
 8008a04:	b948      	cbnz	r0, 8008a1a <__smakebuf_r+0x46>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	059a      	lsls	r2, r3, #22
 8008a0c:	d4ee      	bmi.n	80089ec <__smakebuf_r+0x18>
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	f043 0302 	orr.w	r3, r3, #2
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	e7e2      	b.n	80089e0 <__smakebuf_r+0xc>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	6020      	str	r0, [r4, #0]
 8008a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a2a:	b15b      	cbz	r3, 8008a44 <__smakebuf_r+0x70>
 8008a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a30:	4630      	mov	r0, r6
 8008a32:	f000 f81d 	bl	8008a70 <_isatty_r>
 8008a36:	b128      	cbz	r0, 8008a44 <__smakebuf_r+0x70>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	431d      	orrs	r5, r3
 8008a48:	81a5      	strh	r5, [r4, #12]
 8008a4a:	e7cf      	b.n	80089ec <__smakebuf_r+0x18>

08008a4c <_fstat_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d07      	ldr	r5, [pc, #28]	@ (8008a6c <_fstat_r+0x20>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	4611      	mov	r1, r2
 8008a58:	602b      	str	r3, [r5, #0]
 8008a5a:	f7f9 f8ed 	bl	8001c38 <_fstat>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	d102      	bne.n	8008a68 <_fstat_r+0x1c>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	b103      	cbz	r3, 8008a68 <_fstat_r+0x1c>
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200009e8 	.word	0x200009e8

08008a70 <_isatty_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d06      	ldr	r5, [pc, #24]	@ (8008a8c <_isatty_r+0x1c>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	f7f9 f8ec 	bl	8001c58 <_isatty>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_isatty_r+0x1a>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_isatty_r+0x1a>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	200009e8 	.word	0x200009e8

08008a90 <_init>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr

08008a9c <_fini>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr
